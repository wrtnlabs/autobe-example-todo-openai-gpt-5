{"operations":[{"specification":"We will define a public authentication endpoint for the guest role that creates a new anonymous guest identity and issues initial JWT credentials. This operation is tied to the Prisma tables Actors.todo_mvp_guests (for creating a minimal guest record with id, created_at, updated_at) and Auth.todo_mvp_sessions (for creating a session row with session_token_hash, last_accessed_at, expires_at, revoked_at, created_at, updated_at). The endpoint path will be /auth/guest/join and will use HTTP POST. It returns an authorization DTO containing issued tokens and session metadata conforming to ITodoMvpGuest.IAuthorized. No path parameters are required. The request body is minimal and uses the ITodoMvpGuest.ICreate schema to allow optional client hints while remaining compatible with OpenAPI object requirements.","authorizationType":"join","description":"This endpoint registers an anonymous guest identity and issues initial JWT credentials suitable for temporary, unauthenticated usage scenarios. It persists a minimal identity row in the Actors.todo_mvp_guests table, leveraging its id (UUID primary key), created_at, and updated_at columns to provide durable but privacy-respecting identification for session management. The design intentionally stores no credential fields for guests, aligning with the table’s minimal footprint described in the Prisma schema comments.\n\nUpon creation of the guest identity, the service also creates a session record in Auth.todo_mvp_sessions. That session row uses session_token_hash to store a hashed representation of the issued token, and maintains lifecycle fields created_at, updated_at, last_accessed_at, and expires_at. For guest sessions, both todo_mvp_user_id and todo_mvp_admin_id remain null by design, as guests are not authenticated users or admins. The expires_at field governs absolute token lifetime, while last_accessed_at supports inactivity policies as described in the schema commentary.\n\nFrom a role perspective, guests have no credentials and do not perform password-based login. Therefore, this join operation is the only way to establish a guest session. The returned ITodoMvpGuest.IAuthorized payload encapsulates the tokens and identifies the session created in todo_mvp_sessions so that subsequent requests can be validated without exposing any personal data.\n\nSecurity considerations include hashing any bearer token into todo_mvp_sessions.session_token_hash, avoiding storage of plaintext tokens. The implementation must honor expires_at and update last_accessed_at on use. Because guests are intentionally minimal, the join flow avoids collecting unnecessary attributes, honoring privacy requirements emphasized in the todo_mvp_guests schema documentation.\n\nRelated operations: use POST /auth/guest/refresh to renew credentials before expires_at. There is no password-based login for guests by design, and guests cannot access protected Todo data per business rules; they may only operate within public or guest-scoped capabilities until they become authenticated users via a separate user registration flow outside the guest scope.","summary":"Register a guest identity in todo_mvp_guests and create a session in todo_mvp_sessions, issuing initial JWTs.","parameters":[],"requestBody":{"description":"Optional client hints for creating a guest identity; typically empty for MVP.","typeName":"ITodoMvpGuest.ICreate"},"responseBody":{"description":"Authorized guest session with issued tokens and basic session metadata.","typeName":"ITodoMvpGuest.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guest/join","method":"post"},{"specification":"We will define a public authentication endpoint for the guest role that refreshes JWT credentials for an existing guest session. This operation reads and updates the Auth.todo_mvp_sessions table by locating the session via session_token_hash (derived from the presented refresh token), confirming that revoked_at is null and expires_at is valid, rotating tokens, updating last_accessed_at and updated_at, and extending expires_at as appropriate. The endpoint path will be /auth/guest/refresh and will use HTTP POST. It returns an authorization DTO conforming to ITodoMvpGuest.IAuthorized. No path parameters are required. The request body will follow ITodoMvpGuestRefresh.IRequest and include the refresh token information needed to locate the session.","authorizationType":"refresh","description":"This endpoint renews guest credentials by validating and rotating the corresponding session stored in Auth.todo_mvp_sessions. The Prisma schema describes session_token_hash as a hashed representation uniquely identifying a session; the service hashes the provided refresh token and matches it against this column. The session’s lifecycle fields—created_at, updated_at, last_accessed_at, and expires_at—are used to enforce absolute TTL and idle activity policies during refresh.\n\nWhen the refresh succeeds, the service updates updated_at and last_accessed_at, rotates the underlying token by updating session_token_hash, and extends expires_at to a new absolute expiration. The revoked_at field, when null, indicates the session has not been explicitly invalidated; if set, refresh must be denied. For guest sessions, todo_mvp_user_id and todo_mvp_admin_id remain null by design, reflecting that the actor is an anonymous guest rather than an authenticated user or admin.\n\nThis operation is specific to the guest role and complements the guest join flow. Guests do not perform password-based login and therefore rely on join followed by periodic refresh. The response type ITodoMvpGuest.IAuthorized packages the newly issued credentials so clients can continue interacting under the same guest identity established earlier.\n\nSecurity considerations: tokens are never stored in plaintext; only their hashes are persisted in session_token_hash. The implementation must verify expires_at and any business-specific idle constraints based on last_accessed_at. On successful refresh, the previous token becomes invalid, preventing token replay.\n\nRelated operations: prior to using this endpoint, a client must have executed POST /auth/guest/join to obtain an initial session. Refresh can be repeated until session constraints in todo_mvp_sessions prevent further renewal (e.g., hard expiration via expires_at or explicit invalidation via revoked_at).","summary":"Refresh guest JWTs by rotating the session in todo_mvp_sessions using session_token_hash and lifecycle fields.","parameters":[],"requestBody":{"description":"Refresh token payload required to locate and rotate the guest session.","typeName":"ITodoMvpGuestRefresh.IRequest"},"responseBody":{"description":"Refreshed authorization payload containing newly issued tokens for the same guest identity.","typeName":"ITodoMvpGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guest/refresh","method":"post"},{"specification":"Create a registration endpoint for member users. This operation creates a new record in the Prisma table Actors.todo_mvp_users using provided credentials and immediately establishes an authentication session in Auth.todo_mvp_sessions. It validates unique email (todo_mvp_users.email with @@unique constraint) and persists a secure password hash into todo_mvp_users.password_hash. Upon successful creation, it issues JWT tokens and stores a hashed bearer representation in todo_mvp_sessions.session_token_hash along with lifecycle timestamps (created_at, updated_at, last_accessed_at, expires_at). The response returns an authorization payload for the User role.","authorizationType":"join","description":"This endpoint registers a new member account using the Actors.todo_mvp_users table. It requires an email and a password that will be transformed into a strong credential and persisted as password_hash. The account’s lifecycle state is tracked by the status column, where suggested values include \"active\" or \"deactivated\" per schema comments; registration initializes an account suitable for immediate use in the MVP when business validation passes. Timestamps created_at and updated_at are recorded to support temporal ordering and auditability.\n\nOn success, the provider also creates an authentication session in Auth.todo_mvp_sessions. The session stores a hashed form of the issued bearer in session_token_hash and manages time-based controls via last_accessed_at and expires_at. The relationship back to the user appears through todo_mvp_user_id, ensuring that subsequent authorization checks can associate actions with the correct user.\n\nSecurity-sensitive data handling follows schema guidance: email must be unique across members (enforced by @@unique on todo_mvp_users.email), and password hashes are stored only in password_hash (no plaintext). The endpoint must not expose password_hash in responses. Optional fields like deleted_at exist in the schema but are not used during registration in MVP flows.\n\nThis operation is designed for the \"user\" role (a member) described in requirements. Even though the endpoint is public, the resulting session is tied to the member through Auth.todo_mvp_sessions so that owner-only Todo actions can be enforced elsewhere.\n\nRelated operations include login for existing accounts and refresh for token renewal using Auth.todo_mvp_sessions data. Applications typically call this registration endpoint once per email address, then rely on login and refresh for ongoing access management.","summary":"Register a new member in Actors.todo_mvp_users and create session in Auth.todo_mvp_sessions.","parameters":[],"requestBody":{"description":"Registration payload for creating a user account (email, password).","typeName":"ITodoMvpUser.ICreate"},"responseBody":{"description":"Authorized session and subject information for the newly created User.","typeName":"ITodoMvpUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"Authenticate an existing member using Actors.todo_mvp_users and create a new session in Auth.todo_mvp_sessions. Validates credentials by comparing a submitted password with the stored password_hash, and verifies the account’s status (e.g., \"active\"). On success, issues JWTs and persists a session_token_hash with lifecycle timestamps (created_at, updated_at, last_accessed_at, expires_at). Returns an authorization payload for the User role.","authorizationType":"login","description":"This operation signs in a member by looking up Actors.todo_mvp_users via the unique email and validating the supplied password against the stored password_hash. Only accounts in an acceptable lifecycle state (e.g., status = \"active\") are allowed to sign in, aligning with the schema’s status column semantics. Timestamps created_at and updated_at on the user reflect account lifecycle; the endpoint must not expose password_hash in any response.\n\nWhen authentication succeeds, a session record is created in Auth.todo_mvp_sessions. The session persists a hashed token in session_token_hash and manages session lifecycle through last_accessed_at and expires_at. Associations back to the authenticating user are tracked via todo_mvp_user_id. Subsequent requests can use the issued tokens for authorization checks.\n\nSecurity considerations include the unique constraint on email (@@unique on todo_mvp_users.email) and the principle that plain credentials are never stored. The system should update last_accessed_at as tokens are used, but this endpoint’s core responsibility is initial issuance and session creation.\n\nThis endpoint applies to the \"user\" role (member). While the endpoint itself is public, successful authentication yields tokens that enable owner-only access to Todo resources under the MVP’s authorization rules.\n\nUse this in conjunction with the refresh operation that rotates or renews tokens based on existing Auth.todo_mvp_sessions entries. Registration (join) precedes login for first-time users.","summary":"Authenticate a member via Actors.todo_mvp_users and create Auth.todo_mvp_sessions entry.","parameters":[],"requestBody":{"description":"Login payload identifying the user (email) and password.","typeName":"ITodoMvpUserLogin.IRequest"},"responseBody":{"description":"Authorized session and subject information for the authenticated User.","typeName":"ITodoMvpUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"Refresh tokens for an existing authenticated session tracked in Auth.todo_mvp_sessions and associated with Actors.todo_mvp_users via todo_mvp_user_id. The operation validates the presented refresh token against session_token_hash semantics, enforces time windows using expires_at and revoked_at rules, updates last_accessed_at and may rotate session_token_hash and expires_at, then returns a renewed authorization payload.","authorizationType":"refresh","description":"This operation renews access for a member by validating an existing session represented in Auth.todo_mvp_sessions. The session table contains session_token_hash (hashed bearer for lookup), lifecycle timestamps including last_accessed_at to support inactivity checks, and expires_at for absolute TTL boundaries. If the session has been ended, a revoked_at timestamp prevents renewal. The operation should also ensure the associated user in Actors.todo_mvp_users remains suitable for access (e.g., status still acceptable).\n\nOn a successful refresh, implementations typically rotate the token material and update last_accessed_at and expires_at, persisting the new hashed representation back to session_token_hash. This maintains security hygiene while extending the session lifespan. No plaintext tokens are stored per schema intent.\n\nThe user account is never exposed with sensitive fields like password_hash. Standard user timestamps (created_at, updated_at) and the status column inform authorization decisions but are not directly modified by this endpoint.\n\nThis endpoint is designed for the \"user\" role context, yet it does not require role-restricted access because validation is performed using the presented refresh token. Business rules in requirements emphasize predictable session behavior and idle-timeout handling, which are supported by last_accessed_at and expires_at columns.\n\nTypical flows pair this endpoint with login (initial session creation) and are used periodically to maintain an authenticated state. If rotation fails or the session is invalid or expired, the client should be guided to re-authenticate via login.","summary":"Refresh a member’s session using Auth.todo_mvp_sessions and return renewed authorization.","parameters":[],"requestBody":{"description":"Refresh token payload used to renew the existing session.","typeName":"ITodoMvpUserRefresh.IRequest"},"responseBody":{"description":"Authorized session and subject information for the refreshed User state.","typeName":"ITodoMvpUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"Allow an authenticated member to change their own password by updating Actors.todo_mvp_users.password_hash. This endpoint requires current password verification and a new password, then replaces the stored password_hash. It does not create a new user or session but should consider rotating or invalidating existing sessions in Auth.todo_mvp_sessions if required by policy.","authorizationType":null,"description":"This security operation lets the authenticated member update their credential by replacing the stored password_hash in Actors.todo_mvp_users. The implementation verifies the current password against the existing password_hash and, upon success, computes and stores a new robust hash. The account’s status column (e.g., \"active\" or \"deactivated\") can be consulted to ensure that only valid accounts perform this action. Standard timestamps created_at and updated_at on the user record ensure lifecycle traceability; this endpoint updates updated_at when the password changes.\n\nBecause credentials change, session management policy should be considered. While the Prisma schema for Auth.todo_mvp_sessions does not mandate automatic revocation, providers may choose to revoke or rotate sessions by updating revoked_at or regenerating session_token_hash and adjusting expires_at. last_accessed_at continues to serve inactivity tracking and should be updated by normal access flows.\n\nThe endpoint must never expose password_hash or accept or return plaintext credentials beyond transient processing. Email uniqueness (enforced by @@unique on todo_mvp_users.email) is unaffected by password changes.\n\nThis operation applies to the authenticated \"user\" role and targets only the caller’s own credential, following the path convention for personal resources. It complements join/login/refresh by enabling post-registration credential maintenance without introducing additional fields in the schema.\n\nRelated operations: login (to obtain tokens before performing this call), refresh (to maintain access after a rotation), and optional logout if sessions are revoked following a password change.","summary":"Change the authenticated member’s password by updating Actors.todo_mvp_users.password_hash.","parameters":[],"requestBody":{"description":"Request containing current and new password for credential rotation.","typeName":"ITodoMvpUserPassword.IUpdate"},"responseBody":{"description":"User information after successful credential update (no sensitive fields).","typeName":"ITodoMvpUser"},"authorizationRole":"user","name":"updatePassword","prerequisites":[],"path":"/my/auth/user/password","method":"put"},{"specification":"End the currently authenticated session by setting Auth.todo_mvp_sessions.revoked_at for the caller’s active session and preventing further use of the associated session_token_hash. This does not remove the user record in Actors.todo_mvp_users.","authorizationType":null,"description":"This operation performs a sign-out for the authenticated member by marking the active session as no longer usable. In Auth.todo_mvp_sessions, revoked_at is set to a timestamp indicating the session has been explicitly ended. Subsequent authorization checks should reject tokens tied to this session. Updating last_accessed_at is not required for a revoked session, and expires_at remains historical context.\n\nThe user account in Actors.todo_mvp_users is unaffected by logout; no changes to email, password_hash, status, created_at, or updated_at are required. The endpoint must not expose credential data. It simply ensures that bearer material linked via session_token_hash will no longer authorize requests.\n\nThis endpoint targets the authenticated \"user\" role and operates on the caller’s own session, following the path convention for personal resources. It complements login and refresh, providing a complete session lifecycle in line with the MVP’s authentication and authorization expectations.\n\nIf clients hold multiple sessions across devices, revoking just the current session is consistent with the independent-session model described by the schema relationships; each session row stands alone tied to todo_mvp_user_id.","summary":"Sign out the authenticated member by revoking the current Auth.todo_mvp_sessions entry.","parameters":[],"requestBody":null,"responseBody":{"description":"Simple success response indicating the session has been revoked.","typeName":"IResult.ISuccess"},"authorizationRole":"user","name":"logout","prerequisites":[],"path":"/my/auth/user/logout","method":"post"},{"specification":"This operation registers a new administrative account and issues initial authorization tokens. It is primarily associated with the Prisma table Actors.todo_mvp_admins, which stores administrator identities and credential data (email, password_hash, status, created_at, updated_at). On successful registration, an authenticated session record is created in Auth.todo_mvp_sessions with the admin linkage (todo_mvp_admin_id), session_token_hash, created_at, updated_at, last_accessed_at, and expires_at for ongoing access management. The endpoint validates the uniqueness of email enforced by @@unique([email]) in todo_mvp_admins and persists a secure credential hash into password_hash rather than any plaintext secret. The result payload follows the project’s authorization DTO convention and contains tokens and admin identification required for subsequent requests.","authorizationType":"join","description":"Purpose and functionality: This endpoint creates a new administrator in the Actors.todo_mvp_admins table by persisting the unique email and a derived password_hash. The table comment specifies that admins are managed independently from todo_mvp_users to preserve clear authorization boundaries. The operation initializes lifecycle timestamps (created_at and updated_at) and sets the status field to a value appropriate for business policy (the schema comment suggests values like \"active\" or \"deactivated\").\n\nImplementation details: The request’s secret is never stored in plaintext; instead, a strong hash (e.g., Argon2/bcrypt) is computed and stored in todo_mvp_admins.password_hash. After insertion, a corresponding session in Auth.todo_mvp_sessions is created with the new admin’s id assigned to todo_mvp_admin_id, a generated and hashed session_token_hash, and timestamps populated for created_at, updated_at, last_accessed_at, and an appropriate expires_at. The unique index @@unique([email]) in todo_mvp_admins is enforced to avoid duplicate accounts.\n\nRole integration and business context: Administrators provide platform-level oversight (aggregate insights and account lifecycle) without browsing or editing member Todo content per the requirements. Keeping admins separate from users (todo_mvp_admins vs todo_mvp_users) ensures clear role separation when producing tokens. The session linkage and indices on Auth.todo_mvp_sessions (including expires_at-related indexes) support efficient token validation and expiration checks.\n\nSecurity considerations: The service must validate email parity with the business rules and ensure secure hash generation and constant-time verification practices. Rate limiting and duplicate-email handling should be applied. The status column can be checked during subsequent authentications to restrict access to deactivated accounts. No plaintext credentials are logged; only a session_token_hash is stored for verification, as guided by the Auth.todo_mvp_sessions schema comment.\n\nRelated operations and behavior: Newly created admins can subsequently authenticate via /auth/admin/login and renew access via /auth/admin/refresh. If email uniqueness is violated, the operation returns a conflict-style outcome. Failure to create the corresponding session should fail registration to avoid orphaned accounts without initial access.","summary":"Register a new admin in Actors.todo_mvp_admins and issue initial authorization via Auth.todo_mvp_sessions.","parameters":[],"requestBody":{"description":"Registration payload with administrator credentials.","typeName":"ITodoMvpAdminJoin.ICreate"},"responseBody":{"description":"Authorized admin information with issued tokens and session context.","typeName":"ITodoMvpAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This operation authenticates an existing administrator using email and password against Actors.todo_mvp_admins and issues authorization tokens tied to a session record in Auth.todo_mvp_sessions. It verifies email uniqueness constraints, checks the status field (e.g., \"active\" vs \"deactivated\" as suggested by schema comments), and writes/rotates a session_token_hash with timestamp updates (created_at/updated_at/last_accessed_at/expires_at). The operation does not interact with user tables (todo_mvp_users) to maintain clear role boundaries.","authorizationType":"login","description":"Purpose and functionality: Validate administrator credentials from Actors.todo_mvp_admins using the provided email and a password verified against password_hash. The table’s comment highlights admins’ independence from users for clear authorization scoping. Only administrator accounts in a permitted status (e.g., \"active\") should be allowed to authenticate.\n\nImplementation details: Upon successful verification, create or rotate a session in Auth.todo_mvp_sessions with todo_mvp_admin_id set, generating a new session_token_hash and populating created_at (on first session) or updated_at (on rotation), last_accessed_at, and a fresh expires_at. The presence of @@unique([email]) on todo_mvp_admins ensures lookup by email yields a single record.\n\nRole-specific integration: Returned tokens represent administrator authorization, enabling access to admin-only capabilities (e.g., aggregate reporting or account lifecycle actions) while not granting visibility into member Todo content. All admin-scoped authorization checks should resolve against the admin identity (todo_mvp_admins.id) and associated sessions.\n\nSecurity considerations: The plaintext password is never persisted and is compared to password_hash using a side-channel-resistant method. Repeated failures should be rate-limited. The status column enforces operational control (e.g., deny logins when status indicates deactivation). Session data is stored as a hash (session_token_hash) to prevent token leakage at rest.\n\nRelated operations and workflow: Use /auth/admin/refresh to renew tokens using a valid refresh token. For session termination, see /auth/admin/logout. If the referenced admin record cannot be found or status is not allowed, the operation returns an authentication failure outcome without revealing existence details.","summary":"Authenticate an admin from Actors.todo_mvp_admins and create/rotate a session in Auth.todo_mvp_sessions.","parameters":[],"requestBody":{"description":"Login credentials for the administrator.","typeName":"ITodoMvpAdminLogin.ICreate"},"responseBody":{"description":"Authorized admin payload with newly issued tokens.","typeName":"ITodoMvpAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This operation refreshes administrator authorization using a valid refresh token/session reference, operating on Auth.todo_mvp_sessions that link to Actors.todo_mvp_admins via todo_mvp_admin_id. It rotates session_token_hash, updates last_accessed_at and updated_at, and may extend expires_at according to policy. It verifies that the session is not expired or revoked and that the associated admin remains in an allowed status.","authorizationType":"refresh","description":"Purpose and functionality: Renew administrator access tokens without full credential re-entry by validating a refresh token mapped to a record in Auth.todo_mvp_sessions. The session must be associated to an admin via todo_mvp_admin_id and in good standing.\n\nImplementation details: On success, rotate session_token_hash, set last_accessed_at to now, update updated_at, and set a new expires_at window per policy. Reject refresh when expires_at is in the past, when revoked_at is set, or when the linked Actors.todo_mvp_admins record indicates a disallowed status. Indexed fields on Auth.todo_mvp_sessions (e.g., expires_at, revoked_at combinations) support efficient validation.\n\nRole integration and business context: This endpoint continues the administrator’s authenticated lifecycle while respecting role separation from members. The returned authorization bundle represents admin privileges and should be scoped for administrative-only operations consistent with MVP boundaries.\n\nSecurity considerations: Only a hashed session_token_hash is stored; the refresh token presented by the client must match the stored hash. Implement rotation to prevent replay and ensure tokens are short-lived as guided by expires_at. Avoid revealing whether a specific session exists when validation fails; return a generic refresh failure outcome.\n\nRelated operations and dependencies: Typically invoked after a successful /auth/admin/login or /auth/admin/join. For ending access, /auth/admin/logout marks the session as revoked so that subsequent refresh attempts fail.","summary":"Refresh admin authorization by rotating Auth.todo_mvp_sessions tied to Actors.todo_mvp_admins.","parameters":[],"requestBody":{"description":"Refresh token/session reference to renew authorization.","typeName":"ITodoMvpAdminRefresh.ICreate"},"responseBody":{"description":"Authorized admin payload with refreshed tokens.","typeName":"ITodoMvpAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation terminates the current administrator session by updating the corresponding record in Auth.todo_mvp_sessions (revoked_at and updated_at). It is accessible only to authenticated admins (authorizationRole: \"admin\"). Following revocation, the session’s token can no longer be used for refresh, aligning with the indexes and semantics defined in the sessions table. It does not alter records in Actors.todo_mvp_admins.","authorizationType":null,"description":"Purpose and functionality: End the active admin session by recording a revocation timestamp in Auth.todo_mvp_sessions.revoked_at for the caller’s session. This prevents further use of the underlying token for refresh, as advised by the session lifecycle columns.\n\nImplementation details: The provider function identifies the caller’s active session (todo_mvp_admin_id present) and sets revoked_at to the current time, while updating updated_at. Subsequent calls to /auth/admin/refresh should fail because the session is revoked or otherwise invalid per expires_at.\n\nRole integration and business context: This is an admin-scoped security operation. It does not touch Actors.todo_mvp_admins credentials or status; it solely changes Auth.todo_mvp_sessions for the current session.\n\nSecurity considerations: Ensure the operation targets only the caller’s session context obtained from the authenticated request. No plaintext secrets are handled here; only session metadata is updated.\n\nRelated operations and workflow: Use /auth/admin/login to establish a session and /auth/admin/refresh to maintain it. After logout, further refresh attempts should be rejected for that session.","summary":"Revoke the current admin session in Auth.todo_mvp_sessions without modifying Actors.todo_mvp_admins.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"logout","prerequisites":[],"path":"/auth/admin/logout","method":"post"},{"specification":"This operation allows an authenticated administrator to change their password by updating Actors.todo_mvp_admins.password_hash and updated_at. It is restricted to admins (authorizationRole: \"admin\"). Optionally, implementations may revoke other active sessions in Auth.todo_mvp_sessions for the same admin by setting revoked_at, while keeping the current session policy-defined (e.g., require re-auth). The operation does not create new sessions or tokens by itself.","authorizationType":null,"description":"Purpose and functionality: Enable an administrator to update their credential by writing a new derived hash into Actors.todo_mvp_admins.password_hash. The table’s comment notes that plaintext passwords are never stored; only a hash is persisted. The operation updates updated_at accordingly in the admin record.\n\nImplementation details: The handler should verify the current secret against password_hash using a secure comparison before accepting the new secret. After successful verification, compute a strong hash for the new secret and store it in password_hash, updating updated_at. Implementers may choose to revoke other sessions in Auth.todo_mvp_sessions for the same admin by setting revoked_at to prevent continued use of older tokens.\n\nRole-specific integration: This admin-only security operation affects only the administrator’s own credential and does not interact with member entities or content. It aligns with the requirement that admins have oversight functions but no routine access to member Todo content.\n\nSecurity considerations: Enforce strong password policies at the application layer as appropriate. No secrets should be logged. Consider rate limiting and lockout strategies if repeated verification failures occur.\n\nRelated operations and workflow: After changing the password, the admin may need to re-authenticate via /auth/admin/login. If the implementation revokes other sessions, refresh attempts made from those sessions should fail due to revoked_at or expired expires_at.","summary":"Update Actors.todo_mvp_admins.password_hash for the authenticated admin and optionally revoke other sessions in Auth.todo_mvp_sessions.","parameters":[],"requestBody":{"description":"Payload containing the current password and the new password.","typeName":"ITodoMvpAdminPassword.IUpdate"},"responseBody":{"description":"Outcome of the password change (e.g., whether re-authentication is required).","typeName":"ITodoMvpAdminSecurityResult"},"authorizationRole":"admin","name":"updatePassword","prerequisites":[],"path":"/auth/admin/password","method":"put"},{"specification":"Retrieve a filtered, sorted, and paginated collection of Todo records owned by the authenticated user. This operation works on the Prisma table todo_mvp_todos. It returns summary information suitable for list views and supports minimal filters aligned with business rules: status (open/completed/all) and default sorting. Pagination parameters are included to keep responses predictable for typical list sizes. The endpoint is designed for complex query inputs via a request body while using a read-only HTTP method pattern (PATCH for search).\n\nRelevant Prisma model: todo_mvp_todos with columns: id (UUID primary key), todo_mvp_user_id (owner), title (required), notes (optional), status (open|completed), due_date (optional, timestamptz used with day-level semantics), completed_at (set only when completed), created_at, updated_at. Relations: owner todo_mvp_users; audit relations exist via todo_mvp_audit_events but are system-managed and not exposed here.\n\nDTOs: ITodoMvpTodo.IRequest for search/filter/sort/pagination input and IPageITodoMvpTodo.ISummary for the paginated response containing summaries of ITodoMvpTodo.","authorizationType":null,"authorizationRole":"user","name":"patch","path":"/todoMvp/user/todos","method":"patch","summary":"List/search the authenticated user’s Todos from table todo_mvp_todos with pagination and minimal filters.","description":"Retrieve a list of the caller’s own Todo items from todo_mvp_todos using business-aligned filters and ordering. The underlying Prisma schema documents a simple lifecycle with a required title, optional notes and due_date, a status that is either \"open\" or \"completed\", and timestamps for created_at and updated_at, plus completed_at only when status is \"completed\". This endpoint focuses on list presentation and therefore returns summary information optimized for rendering lists.\n\nSecurity and permissions: Access is restricted to authenticated users and must return only rows where todo_mvp_todos.todo_mvp_user_id equals the authenticated user’s id. No other user’s data can be included. Administrative identities do not browse member content in MVP; enforcement is handled in provider logic.\n\nDatabase relationship context: Each Todo belongs to exactly one user (todo_mvp_users) via a required relation with onDelete: Cascade, ensuring user removal removes their Todos. Audit/event tables (todo_mvp_audit_events) record lifecycle actions but are system-managed artifacts and are not manipulated by this endpoint.\n\nValidation and business logic: Filters are limited and predictable—status filter supports \"all\", \"open\", and \"completed\"; default sorting is by created_at descending (newest first). Pagination parameters are required to ensure consistent performance targets. Inputs that specify an invalid status or sort key should be rejected with a validation error.\n\nRelated operations: Use POST /todos to create new items; GET /todos/{todoId} to view a single item’s full details; PUT /todos/{todoId} to change fields (title, notes, due_date, status). Typical UI will call this endpoint frequently to refresh the visible list after any mutation.\n\nError handling: Validation failures produce clear messages without leaking other users’ information. If the authenticated context is missing, the provider must deny access. Concurrency is not directly relevant for reads, but the list should reflect confirmed writes promptly.","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for listing Todos.","typeName":"ITodoMvpTodo.IRequest"},"responseBody":{"description":"Paginated list of Todo summaries owned by the authenticated user.","typeName":"IPageITodoMvpTodo.ISummary"},"prerequisites":[]},{"specification":"Create a new Todo owned by the authenticated user in the Prisma table todo_mvp_todos. Required fields follow schema and business rules: title is required and trimmed; status defaults to \"open\"; notes and due_date are optional. The system records created_at and updated_at at creation; completed_at remains null until status becomes \"completed\".\n\nRelevant Prisma model: todo_mvp_todos (id UUID PK, todo_mvp_user_id, title, notes?, status, due_date?, completed_at?, created_at, updated_at). The owner relation to todo_mvp_users is required and enforced by the application using the authenticated user’s id.","authorizationType":null,"authorizationRole":"user","name":"create","path":"/todoMvp/user/todos","method":"post","summary":"Create a new Todo in table todo_mvp_todos owned by the authenticated user.","description":"Create a Todo record in todo_mvp_todos for the requesting user. The Prisma schema’s description emphasizes a minimal task model: title (required), optional notes and due_date, and a status constrained to \"open\" or \"completed\" with a default of \"open\" on creation. Timestamps include created_at and updated_at, while completed_at is set only when status becomes \"completed\".\n\nSecurity and permissions: Only authenticated users may create Todos, and each created row must be associated with the creator’s todo_mvp_users.id (stored in todo_mvp_user_id). Other users’ ownership cannot be specified by clients.\n\nValidation and business rules: Title must be non-empty after trimming and within the documented length expectations (typical 1–120 characters). Notes are optional and typically limited to around 1,000 characters as per business guidance. due_date is optional and interpreted at day-level in the user’s local context (stored as timestamptz by schema); invalid dates must be rejected. Status should default to \"open\"; clients generally should not set completed_at at creation.\n\nRelated operations: After creation, clients typically call PATCH /todos to refresh the list or GET /todos/{todoId} to fetch full details. Auditing of the creation event, if enabled, is handled internally by system services referencing todo_mvp_audit_events.\n\nError handling: Validation failures result in clear messages and no partial writes. Ownership is enforced server-side, and authentication failures must be denied without exposing other users’ data.","parameters":[],"requestBody":{"description":"Creation payload for a Todo (title required; optional notes and due_date; status defaults to \"open\").","typeName":"ITodoMvpTodo.ICreate"},"responseBody":{"description":"Newly created Todo with full details.","typeName":"ITodoMvpTodo"},"prerequisites":[]},{"specification":"Retrieve a single Todo by its identifier from the Prisma table todo_mvp_todos. Returns the full resource including title, notes, status, due_date, completed_at (if applicable), created_at, and updated_at. Ensures ownership by matching todo_mvp_user_id to the authenticated user.","authorizationType":null,"authorizationRole":"user","name":"at","path":"/todoMvp/user/todos/{todoId}","method":"get","summary":"Get a single Todo from table todo_mvp_todos by id with full details.","description":"Fetch one Todo record from todo_mvp_todos using its id. The model’s columns include title (required), notes (optional), status (\"open\" or \"completed\"), due_date (optional, day-level semantics), completed_at when completed, and created_at/updated_at timestamps. This operation provides the complete representation suitable for detail views or edit forms.\n\nSecurity and permissions: The caller must be authenticated as a user and must own the Todo (todo_mvp_user_id equals the caller’s id). If not owned or not found, the service denies access or returns a not-found outcome without revealing any protected content.\n\nRelationship context: The Todo has a required owner relation to todo_mvp_users with onDelete: Cascade. Audit trails may reference this Todo via todo_mvp_audit_events; those records are system-managed and not exposed by this endpoint.\n\nValidation and behavior: The path parameter todoId is a UUID. No request body is required. Typical usage follows list or creation operations to view details before updates.\n\nError handling: If the id is invalid format, treat as validation failure. If the Todo does not exist or is not owned, respond as not-found without disclosing ownership details.","parameters":[{"name":"todoId","description":"Identifier of the target Todo (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full Todo resource for the requested id.","typeName":"ITodoMvpTodo"},"prerequisites":[{"endpoint":{"path":"/todoMvp/user/todos","method":"post"},"description":"A Todo must be created before it can be retrieved by its ID. This operation creates the Todo and yields a valid todoId to use in the path."}]},{"specification":"Update an existing Todo in the Prisma table todo_mvp_todos by identifier. Allows modifying title, notes, due_date, and status in line with business validation. Updates updated_at; sets or clears completed_at when status transitions between \"open\" and \"completed\". Ownership is enforced via todo_mvp_user_id matching the authenticated user.","authorizationType":null,"authorizationRole":"user","name":"update","path":"/todoMvp/user/todos/{todoId}","method":"put","summary":"Update a Todo in table todo_mvp_todos by id (title, notes, due_date, status).","description":"Modify fields of a Todo in todo_mvp_todos. The schema defines a minimal task with title (required), optional notes and due_date, and a status limited to \"open\" or \"completed\". On successful changes, updated_at is refreshed; if status becomes \"completed\", completed_at is set; when reverting to \"open\", completed_at is cleared. Other timestamps (created_at) are immutable.\n\nSecurity and permissions: Only the owning authenticated user may update their Todo (todo_mvp_user_id equals the caller). The operation must not allow clients to change ownership. Administrative accounts do not edit member content in MVP.\n\nValidation rules: Title must remain valid after trimming (typical 1–120 characters). Notes length should remain within the ~1,000 character guidance. due_date, when provided, must be a valid calendar date. Status must be either \"open\" or \"completed\". All-or-nothing validation applies; partial updates are not persisted on validation failure.\n\nRelated operations: Clients often call GET /todos/{todoId} before updating and PATCH /todos afterward to refresh the list. Creation is via POST /todos. System audit of update events, if configured, is internal to services referencing todo_mvp_audit_events.\n\nError handling: Invalid UUID in the path yields a validation error. Nonexistent or non-owned targets must be handled as not-found without disclosing protected details. Concurrency conflicts should be detected and surfaced with clear retry guidance.","parameters":[{"name":"todoId","description":"Identifier of the Todo to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for a Todo (title, notes, due_date, status).","typeName":"ITodoMvpTodo.IUpdate"},"responseBody":{"description":"Updated Todo with full details after applying changes.","typeName":"ITodoMvpTodo"},"prerequisites":[{"endpoint":{"path":"/todoMvp/user/todos","method":"post"},"description":"A Todo must exist before it can be updated. Creating a Todo provides a valid todoId referenced by the update path parameter."}]},{"specification":"Permanently remove a Todo item from the system by its identifier. This operation manipulates the todo_mvp_todos Prisma table. It performs a hard delete because the model does not define any deleted_at field; therefore, records are fully removed. The endpoint is intended for authenticated end users acting on their own records; ownership checks occur in business logic using todo_mvp_todos.todo_mvp_user_id. Related Prisma relations (e.g., todo_mvp_audit_events, todo_mvp_compliance_removal_records) reference todos and maintain referential integrity according to their relation settings.","authorizationType":null,"description":"Delete a single Todo owned by the requesting user. The underlying Prisma model todo_mvp_todos includes fields id (UUID primary key), todo_mvp_user_id (owner reference), title, notes, status (\"open\" or \"completed\" by business rules), optional due_date, optional completed_at, and timestamps created_at and updated_at. Because this model intentionally excludes a deletion marker column, the system permanently removes the row when this operation succeeds.\n\nSecurity and permissions: Only authenticated users may invoke this endpoint, and the target Todo must be owned by the caller (matched via todo_mvp_todos.todo_mvp_user_id). Implementations should deny access to non-owners without disclosing whether the record exists. Administrative identities are not intended to manage member content in this MVP.\n\nBehavior and validation: The provider must verify path parameter format (UUID) and enforce ownership checks before deletion. On success, the record is removed from todo_mvp_todos. Any dependent rows in related tables will follow the configured Prisma relation behavior for referential integrity. If the record does not exist or is not accessible to the caller, the provider should respond accordingly without revealing private details.\n\nRelated operations: Creation and updates occur through other CRUD endpoints on the same todo_mvp_todos table. Listing and detail retrieval endpoints should no longer return the deleted resource after this operation. Error handling should clearly indicate validation failures (e.g., malformed UUID) and access violations.","summary":"Hard delete a Todo from todo_mvp_todos by ID","parameters":[{"name":"todoId","description":"UUID of the Todo to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"user","name":"erase","prerequisites":[{"endpoint":{"path":"/todoMvp/user/todos","method":"post"},"description":"Creates the Todo record that provides the required todoId. The Todo must exist (and be owned by the caller) before it can be permanently deleted; if creation fails or the record does not exist, deletion cannot proceed."}],"path":"/todoMvp/user/todos/{todoId}","method":"delete"},{"specification":"Retrieve a filtered, paginated list of audit trail entries from the todo_mvp_audit_events Prisma table. This is a read-only administrative operation that supports complex searches via request body parameters (e.g., filter by actor, target Todo, event_type, and time ranges). No creation, modification, or deletion of audit events is exposed by APIs because audit entries are system-managed artifacts.","authorizationType":null,"description":"Return audit trail entries recorded in the todo_mvp_audit_events table. The schema defines id (UUID primary key), optional foreign keys todo_mvp_user_id and todo_mvp_admin_id (actors), optional todo_mvp_todo_id (target Todo), event_type (e.g., \"todo_created\", \"todo_updated\", \"todo_completed\", \"todo_uncompleted\", \"todo_deleted\"), optional event_description, and timestamps created_at, updated_at, and optional deleted_at.\n\nSecurity and permissions: This endpoint is limited to administrators, consistent with the requirement that admins have oversight capabilities without accessing member Todo content directly. The response contains operational metadata only; implementations must avoid including Todo content fields, as the audit table intentionally stores no title or notes content.\n\nQuery behavior and validation: The request body (ITodoMvpAuditEvent.IRequest) should support pagination inputs, optional filters such as actor IDs, target Todo ID, event_type set, and created_at ranges, and sorting controls (e.g., by created_at). The response returns a paginated container (IPageITodoMvpAuditEvent) with pagination metadata and an array of audit entries. Input should be validated to ensure UUID formats where applicable and to constrain sort fields to supported columns.\n\nRelated operations: Use GET /auditEvents/{auditEventId} to retrieve a specific audit entry. No write endpoints exist for audit events as they are created automatically by application logic during user/admin actions.","summary":"List/search audit events from todo_mvp_audit_events (admin read-only)","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for audit event retrieval","typeName":"ITodoMvpAuditEvent.IRequest"},"responseBody":{"description":"Paginated list of audit events matching the search criteria","typeName":"IPageITodoMvpAuditEvent"},"authorizationRole":"admin","name":"index","prerequisites":[],"path":"/todoMvp/admin/auditEvents","method":"patch"},{"specification":"Retrieve a specific audit trail entry by its identifier from the todo_mvp_audit_events Prisma table. This is a read-only administrative operation intended for operational oversight and diagnostics. The endpoint returns exactly one audit event resource when found and authorized.","authorizationType":null,"description":"Fetch a single audit entry from todo_mvp_audit_events by its id. The table includes id (UUID primary key), optional actor references todo_mvp_user_id and todo_mvp_admin_id, an optional target todo_mvp_todo_id, event_type, optional event_description, created_at, updated_at, and optional deleted_at. The model deliberately avoids storing Todo content (title/notes) to preserve privacy.\n\nSecurity and permissions: Access is restricted to administrators in alignment with MVP oversight requirements. Non-admins must not access audit trail contents. The provider must ensure the caller is authorized and should avoid leaking information beyond what the audit schema contains.\n\nBehavior and error handling: On success, return the matched audit event. If the id is malformed, return a validation error. If the record is not found or has been removed by lifecycle processes, return a not-found outcome. This operation complements PATCH /auditEvents for list retrieval.\n\nThis endpoint is read-only; creation and modification of audit events are system-controlled side effects of other business operations.","summary":"Get a single audit event from todo_mvp_audit_events by ID (admin)","parameters":[{"name":"auditEventId","description":"UUID of the audit event to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested audit event","typeName":"ITodoMvpAuditEvent"},"authorizationRole":"admin","name":"at","prerequisites":[],"path":"/todoMvp/admin/auditEvents/{auditEventId}","method":"get"},{"specification":"Retrieve a filtered, paginated list of administrative compliance removal records from the todo_mvp_compliance_removal_records Prisma table. These records document policy- or legal-driven removals without storing Todo content. This is a read-only administrative endpoint supporting search parameters in the request body.","authorizationType":null,"description":"Return compliance removal records kept in todo_mvp_compliance_removal_records. The schema defines id (UUID primary key), optional todo_mvp_admin_id (acting admin), optional todo_mvp_todo_id (removed Todo reference), reason_code (e.g., \"policy_violation\", \"legal_request\", \"user_request_via_admin\"), optional notes (must not contain Todo content), action_effective_at, created_at, updated_at, and optional deleted_at for lifecycle/retention control.\n\nSecurity and permissions: Only administrators may access this endpoint. The dataset supports oversight and compliance workflows and must not reveal user Todo content, which is not present in the model by design.\n\nQuery behavior and validation: The request body (ITodoMvpComplianceRemovalRecord.IRequest) should allow pagination, filtering by acting admin, by removed Todo reference, by reason_code, and by action_effective_at ranges, as well as sorting (e.g., created_at or action_effective_at). The response returns a paginated list container (IPageITodoMvpComplianceRemovalRecord). Validate UUID formats and constrain sort fields to supported columns.\n\nRelated operations: No write APIs are exposed for these records in accordance with system-generated data principles. Records are created by administrative workflows within provider logic.","summary":"List/search compliance removal records from todo_mvp_compliance_removal_records (admin)","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for compliance removal records","typeName":"ITodoMvpComplianceRemovalRecord.IRequest"},"responseBody":{"description":"Paginated list of compliance removal records matching criteria","typeName":"IPageITodoMvpComplianceRemovalRecord"},"authorizationRole":"admin","name":"index","prerequisites":[],"path":"/todoMvp/admin/complianceRemovalRecords","method":"patch"},{"specification":"Retrieve a single compliance removal record by its identifier from the Audits table todo_mvp_compliance_removal_records. This operation returns one privacy-preserving administrative record that documents a compliance-driven removal of a Todo. It exposes metadata such as reason_code, notes (admin-only operational notes without Todo content), action_effective_at, and links (nullable) to the acting admin and the removed Todo. It is a read-only endpoint designed for administrative oversight and auditability; it does not alter any data.\n\nAssociated Prisma tables and relationships:\n- Primary table: todo_mvp_compliance_removal_records (id, todo_mvp_admin_id?, todo_mvp_todo_id?, reason_code, notes?, action_effective_at, created_at, updated_at, deleted_at?)\n- Relations: optional references to todo_mvp_admins and todo_mvp_todos with onDelete: Cascade behavior configured at relations, while the record itself retains integrity even if referenced entities are removed.\n\nBusiness intent: provide administrators visibility into compliance removals without exposing Todo content, in line with the schema comment that no Todo content is stored in these records.","authorizationType":null,"description":"This endpoint returns a single administrative compliance removal record identified by its ID. The underlying Prisma model todo_mvp_compliance_removal_records is documented as a “Minimal, privacy-preserving record” that captures when an administrator removes a Todo for policy or legal reasons. Fields include reason_code for a high-level cause, optional notes that must not contain user Todo content, and action_effective_at to indicate when the removal took effect for the user. References to the acting administrator (todo_mvp_admin_id) and the removed Todo (todo_mvp_todo_id) are nullable to preserve the record’s integrity even after entity deletion. The model also records created_at and updated_at timestamps, with deleted_at used for retention and lifecycle control.\n\nSecurity and permissions: Access is restricted to administrative actors. The record is intended for oversight and compliance verification; it must not reveal Todo content. Implementations should verify that the caller has administrative privileges and, where applicable, limit visibility to the minimum required set of fields for operational needs.\n\nEntity relationships: The record may relate to todo_mvp_admins (actorAdmin) and todo_mvp_todos (removedTodo) via nullable foreign keys. Because these references may be null (for example, after the Todo is removed), clients must not assume presence of related entity details and should rely on the record’s own fields for compliance proofs.\n\nValidation and behavior: The path parameter complianceRemovalRecordId must be a valid UUID. If the record does not exist or is not accessible under current policy, the server should respond with an appropriate not found outcome. Since this is a read-only operation, no request body is required. This operation may be used alongside audit event retrieval to corroborate broader timelines (e.g., todo_mvp_audit_events with event_type such as \"todo_deleted\").","summary":"Get a compliance removal record (todo_mvp_compliance_removal_records) by ID","parameters":[{"name":"complianceRemovalRecordId","description":"Identifier of the compliance removal record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Compliance removal record details for oversight without Todo content","typeName":"ITodoMvpComplianceRemovalRecord"},"authorizationRole":"admin","name":"at","prerequisites":[],"path":"/todoMvp/admin/complianceRemovalRecords/{complianceRemovalRecordId}","method":"get"},{"specification":"Search and paginate authentication sessions from the Auth table todo_mvp_sessions. This list operation supports complex filtering (e.g., by owner, lifecycle timestamps, and revocation/expiration state) and sorting, returning a page of session records the caller is authorized to see. Each session represents a signed-in state bound to either a user (todo_mvp_user_id) or an admin (todo_mvp_admin_id), with a unique session_token_hash, temporal fields (created_at, updated_at, last_accessed_at, expires_at), and an optional revoked_at.\n\nAssociated Prisma tables and relationships:\n- Primary table: todo_mvp_sessions (id, todo_mvp_user_id?, todo_mvp_admin_id?, session_token_hash, created_at, updated_at, last_accessed_at, expires_at, revoked_at?)\n- Relations: optional links to todo_mvp_users and todo_mvp_admins with onDelete: Cascade.\n\nBusiness intent: allow an authenticated actor to review their session footprint, and enable administrative monitoring use cases in controlled contexts without exposing credentials or raw tokens.","authorizationType":null,"description":"This operation returns a paginated list of session records from the Prisma model todo_mvp_sessions. The schema describes sessions as system-managed artifacts that represent authenticated states for users or admins. Key fields include session_token_hash (unique identifier for the session, not the raw token), timestamps for lifecycle control (created_at, updated_at, last_accessed_at, expires_at), and revoked_at to indicate explicit sign-out. Foreign keys todo_mvp_user_id or todo_mvp_admin_id are nullable to accommodate distinct actor types, with relationships to todo_mvp_users and todo_mvp_admins respectively.\n\nSecurity and permissions: Access is limited to authenticated actors. Implementations must scope results to the caller’s identity: a user should only see sessions tied to their own account; administrators may see their own sessions and, where policy allows, run oversight queries. To minimize endpoint proliferation, this documentation targets authenticated users by default; broader administrative queries should be implemented with additional policy guards if needed.\n\nFiltering, pagination, and sorting: The request body (ITodoMvpSession.IRequest) should support owner scoping (e.g., ownerId), actor type (user/admin) where relevant, lifecycle filters (e.g., active vs. revoked by checking revoked_at and expires_at relative to now), and temporal ranges (created_at, last_accessed_at). Pagination parameters (page, pageSize) and sorting options (e.g., created_at desc, last_accessed_at desc, expires_at asc/desc) are recommended. The response returns a paginated container (IPageITodoMvpSession) with pagination metadata and an array of session entities.\n\nRelated operations: Use GET /sessions/{sessionId} for a single session view. Implementations often link to sign-out flows that set revoked_at; those are not part of this read operation and should be provided separately if required by product scope.","summary":"Search and paginate sessions (todo_mvp_sessions) with filters and sorting","parameters":[],"requestBody":{"description":"Search criteria, pagination, and sorting options for session retrieval","typeName":"ITodoMvpSession.IRequest"},"responseBody":{"description":"Paginated result set of sessions the caller is authorized to view","typeName":"IPageITodoMvpSession"},"authorizationRole":"user","name":"index","prerequisites":[],"path":"/todoMvp/user/sessions","method":"patch"},{"specification":"Retrieve a single authentication session by its identifier from the Auth table todo_mvp_sessions. Returns lifecycle timestamps (created_at, updated_at, last_accessed_at, expires_at) and revocation status (revoked_at), along with nullable ownership references (todo_mvp_user_id or todo_mvp_admin_id). Intended for authenticated actors to inspect the status of a specific session they own.","authorizationType":null,"description":"This endpoint reads one record from the Prisma model todo_mvp_sessions based on the supplied sessionId. The model’s commentary highlights that sessions are system-managed artifacts supporting authentication and authorization, with a unique session_token_hash for secure lookup that never exposes plaintext tokens. Timestamps include created_at and updated_at for audit relevance, last_accessed_at for inactivity management, expires_at for absolute TTL, and revoked_at when a sign-out occurs.\n\nSecurity and permissions: The caller must be authenticated and authorized to view the requested session. A user may read only their own session records; administrative access to others’ sessions, if allowed by policy, should be enforced by provider logic and is out of scope for this documentation. No request body is required.\n\nRelationships: The session may be associated with either todo_mvp_users (todo_mvp_user_id) or todo_mvp_admins (todo_mvp_admin_id). As these associations are nullable, client code should not assume both are present. The operation returns a single ITodoMvpSession object on success.","summary":"Get a session (todo_mvp_sessions) by ID","parameters":[{"name":"sessionId","description":"Identifier of the session to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Session information for the specified identifier","typeName":"ITodoMvpSession"},"authorizationRole":"user","name":"at","prerequisites":[],"path":"/todoMvp/user/sessions/{sessionId}","method":"get"},{"specification":"Retrieve a single user account by its identifier from the Actors table todo_mvp_users. Returns business-unique email, lifecycle status, and timestamps (created_at, updated_at, and optional deleted_at). Designed for authenticated users to read their own profile information or for controlled administrative contexts as policy allows.","authorizationType":null,"description":"This endpoint returns one user record from the Prisma model todo_mvp_users using the provided userId. The schema defines fields including id, email (unique within users), password_hash (never exposed to clients), status (e.g., \"active\" or \"deactivated\" for lifecycle control), and timestamps (created_at, updated_at, and deleted_at for account lifecycle workflows). Relations include arrays to todo_mvp_sessions, todo_mvp_todos, and todo_mvp_audit_events, which are not directly returned here but inform ownership and activity elsewhere in the system.\n\nSecurity and permissions: The caller must be authenticated. Implementations should enforce owner-only access for standard user contexts, ensuring a user can retrieve only their own record. Administrative reads of user profiles, if enabled by policy, should be implemented with appropriate guardrails and auditing.\n\nValidation and behavior: The path parameter userId must be a valid UUID. On success, the response returns ITodoMvpUser, excluding sensitive fields (e.g., password_hash remains server-side). If the user does not exist or is not accessible, the server should provide a not found outcome. This endpoint can be used alongside session and Todo operations to present a coherent account view.","summary":"Get a user (todo_mvp_users) by ID","parameters":[{"name":"userId","description":"Identifier of the user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User account details excluding sensitive credentials","typeName":"ITodoMvpUser"},"authorizationRole":"user","name":"at","prerequisites":[],"path":"/todoMvp/user/users/{userId}","method":"get"},{"specification":"Retrieve the authenticated owner’s Todo items from the Prisma table todo_mvp_todos. This operation lists task records with required title and simple two-state lifecycle (open/completed), owned by a single user through the foreign key todo_mvp_todos.todo_mvp_user_id referencing todo_mvp_users.id. The endpoint is intended for end-user list views and returns a structured collection of Todos suitable for UI rendering.\n\nThe underlying Prisma model includes: id (UUID), todo_mvp_user_id (UUID), title (String), notes (String?), status (String; business-allowed values \"open\"|\"completed\"), due_date (DateTime? interpreted as a day-level date by business rules), completed_at (DateTime? set only when status becomes completed), created_at, and updated_at. Relations enforce ownership and cascading behavior on user deletion. Indexes facilitate common list queries by user, status, and created_at/due_date.\n\nThis operation must only return Todos owned by the requesting authenticated user. It does not expose other users’ data. Business rules from requirements apply to content semantics (e.g., title length and trimming) though validation occurs on create/update endpoints. This list endpoint focuses on secure retrieval and predictable ordering/filtering determined by provider logic aligned with MVP defaults.","authorizationType":null,"description":"List the requesting user’s Todos from the todo_mvp_todos table. Each Todo represents a single actionable item owned by one authenticated user as described in the Prisma schema: a required title, optional notes, optional day-level due_date interpreted in the user’s local time context, a simple status (\"open\" or \"completed\"), and timestamps for created_at, updated_at, and completed_at (only when completed).\n\nSecurity and permissions: access is restricted to authenticated users and returns only records where todo_mvp_todos.todo_mvp_user_id matches the requester’s identity. The response must not include any other user’s data. Authentication and authorization are enforced by the controller/provider according to session and ownership checks described in the business requirements.\n\nDatabase relationship: todo_mvp_todos.owner relates to todo_mvp_users via todo_mvp_user_id with onDelete: Cascade. No deletion-timestamp column exists on this table; records are physically removed when deleted by design of the MVP’s lifecycle policies. Indexes on (todo_mvp_user_id, status, created_at) and related composites support default list ordering and basic filtering in provider logic.\n\nValidation and business logic context: while this endpoint does not validate create/update inputs, clients should expect fields to adhere to rules derived from the schema comments (e.g., title is trimmed and typically 1–120 chars by business rules; notes may be null; completed_at exists only when status is \"completed\"). Due dates are optional and intended as day-level values.\n\nRelated operations: creation and modification occur via separate endpoints (e.g., POST/PUT/PUT-Toggle not shown here). This endpoint is designed to be used in conjunction with those to reflect list updates immediately after successful mutations. In case of authorization failure or ownership violations, providers return appropriate errors in line with platform conventions.","summary":"List Todos owned by the authenticated user from Prisma table todo_mvp_todos","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated collection container holding the authenticated user’s Todo items.","typeName":"IPageITodoMvpTodo"},"authorizationRole":"user","name":"get","prerequisites":[],"path":"/todoMvp/user/todos","method":"get"},{"specification":"Retrieve a single administrator account from the Prisma table todo_mvp_admins by its identifier. The model stores administrator credentials and lifecycle state to support platform oversight and account management, and is managed independently from regular users for clear authorization boundaries. Typical usage is within an administrative console; it is not meant for general end-user access.\n\nThe underlying Prisma model fields include: id (UUID), email (unique), password_hash (stored securely; never exposed in responses), status (e.g., \"active\" or \"deactivated\"), created_at, updated_at, and deleted_at (timestamp indicating the record is no longer in active use). Relations connect admins to sessions, audit events, and compliance removal records. Indexes on (status, created_at) support operational queries.\n\nThis operation must enforce administrative authorization and should only return administrator metadata appropriate for administrative views. Sensitive fields like password_hash must not be exposed by the response DTO even though they exist in the table.","authorizationType":null,"description":"Fetch an administrator account from the todo_mvp_admins table using its id path parameter. The Prisma schema defines administrators with a unique email, hashed credentials (password_hash), lifecycle status, and timestamp fields (created_at, updated_at). A deleted_at timestamp indicates the record is no longer in active use and typical reads may exclude such records depending on provider policy. Administrators are modeled separately from todo_mvp_users to maintain clear authorization boundaries and to support limited oversight capabilities as described in the requirements.\n\nSecurity and permissions: this operation is restricted to authenticated administrative actors. Providers must verify that the requester has the appropriate administrative role before revealing administrator metadata. The response must never include sensitive secrets such as password_hash. Access to records considered inactive by lifecycle state may be restricted based on business policy.\n\nDatabase relationships: todo_mvp_admins connects to session records (todo_mvp_sessions), audit entries (todo_mvp_audit_events), and compliance removal records (todo_mvp_compliance_removal_records). These relations enable operational oversight and accountability without exposing user content. Indexes facilitate queries by status and creation time for administrative tools.\n\nExpected behavior and errors: when the adminId is not a valid UUID or the record does not exist or is not accessible due to lifecycle state, providers should return a not-found outcome consistent with platform conventions. Unauthorized requests must be denied. This detail retrieval is typically used alongside administrative list/search endpoints (not shown here) within management interfaces.","summary":"Get administrator detail from Prisma table todo_mvp_admins by ID","parameters":[{"name":"adminId","description":"Unique identifier of the administrator to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator account details suitable for administrative views (excluding secrets).","typeName":"ITodoMvpAdmin"},"authorizationRole":"admin","name":"at","prerequisites":[],"path":"/todoMvp/admin/admins/{adminId}","method":"get"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated visitor who can view public information pages but cannot access or modify any Todo data.","kind":"guest"},{"name":"user","description":"Authenticated member who can manage only their own Todo items (create, read, update, complete/uncomplete, and delete).","kind":"member"},{"name":"admin","description":"Administrator with elevated permissions to manage users, view platform-level usage reports, and handle policy or content violations. Does not edit member Todos unless for compliance reasons.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoMvpTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMvpTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoMvpAuditEvent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMvpAuditEvent"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoMvpComplianceRemovalRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMvpComplianceRemovalRecord"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoMvpSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMvpSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoMvpTodo":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoMvpTodo"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoMvpGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the guest identity.\n\nMaps to Actors.todo_mvp_guests.id (UUID)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the guest identity.\n\nMaps to Actors.todo_mvp_guests.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the guest identity.\n\nMaps to Actors.todo_mvp_guests.updated_at."}},"required":["id","created_at","updated_at"],"description":"Guest identity entity for anonymous visitors with minimal persisted footprint.\n\nDirectly corresponds to Actors.todo_mvp_guests in Prisma. The model stores only id, created_at, updated_at (and an internal deleted_at not surfaced in public DTOs) to honor privacy and MVP scope."},"ITodoMvpGuest.ICreate":{"type":"object","properties":{},"required":[],"description":"Request body for creating a guest identity and establishing an initial session.\n\nIntentionally empty for MVP. Per security rules, audit-derived fields such as ip_address or user_agent are captured by middleware and MUST NOT be client-supplied. The server creates Actors.todo_mvp_guests and the associated Auth.todo_mvp_sessions entries."},"ITodoMvpGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated guest subject.\n\nMaps to Actors.todo_mvp_guests.id and identifies the subject for this authorization outcome."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the guest identity.\n\nMaps to Actors.todo_mvp_guests.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the guest identity.\n\nMaps to Actors.todo_mvp_guests.updated_at."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"guest":{"$ref":"#/components/schemas/ITodoMvpGuest","description":"Optional guest identity snapshot for convenience.\n\nReflects Actors.todo_mvp_guests fields suitable for public return (id, created_at, updated_at)."}},"required":["id","created_at","updated_at","token"],"description":"Authorization response for guest join/refresh operations.\n\nConforms to the IAuthorized pattern: includes the subject id and the IAuthorizationToken bundle. Optionally includes a public guest snapshot corresponding to Actors.todo_mvp_guests."},"ITodoMvpGuestRefresh.IRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the guest.\n\nThe server hashes this value and matches it against Auth.todo_mvp_sessions.session_token_hash before rotating credentials and extending expires_at."}},"required":["refresh_token"],"description":"Refresh request payload for guest sessions.\n\nContains only the refresh_token required to locate and rotate the underlying Auth.todo_mvp_sessions entry per the Prisma schema commentary."},"ITodoMvpUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Member’s unique email address used for authentication and communication in MVP.\n\nMaps to Actors.todo_mvp_users.email and must be unique per the @@unique constraint."},"password":{"type":"string","minLength":8,"writeOnly":true,"description":"Plaintext password submitted for registration. The server hashes this secret and persists it as password_hash.\n\nNEVER store or return plaintext credentials. Maps indirectly to Actors.todo_mvp_users.password_hash after hashing."}},"required":["email","password"],"description":"Registration request body for creating a new member user.\n\nOn success, the service creates Actors.todo_mvp_users (email unique, password stored as password_hash, status set per policy) and establishes an Auth.todo_mvp_sessions row. Sensitive fields such as password_hash are never exposed to clients."},"ITodoMvpUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user account.\n\nMaps to Actors.todo_mvp_users.id."},"email":{"type":"string","format":"email","description":"Unique email for the user account.\n\nMaps to Actors.todo_mvp_users.email (unique by @@unique)."},"status":{"$ref":"#/components/schemas/IEAccountStatus","description":"Lifecycle status of the user account.\n\nMaps to Actors.todo_mvp_users.status and follows allowed values from schema comments."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nMaps to Actors.todo_mvp_users.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated.\n\nMaps to Actors.todo_mvp_users.updated_at."}},"required":["id","email","status","created_at","updated_at"],"description":"Member user account representation aligned with Actors.todo_mvp_users.\n\nSensitive fields such as password_hash are intentionally excluded from responses. The model's optional deleted_at is also omitted from public responses."},"ITodoMvpUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of the authenticated user.\n\nThis echoes Prisma todo_mvp_users.id (UUID) for the subject associated with the issued authorization."},"email":{"type":"string","format":"email","description":"Business-unique email address for the member user.\n\nMapped from Prisma model Actors.todo_mvp_users.email with @@unique constraint. Used for authentication and basic communications in the MVP."},"status":{"oneOf":[{"const":"active","description":"Lifecycle status of the user account.\n\nMapped from Prisma model Actors.todo_mvp_users.status (String). While the database column is a free-form string, business rules constrain allowed values to \"active\" or \"deactivated\" for predictable authorization behavior."},{"const":"deactivated","description":"Lifecycle status of the user account.\n\nMapped from Prisma model Actors.todo_mvp_users.status (String). While the database column is a free-form string, business rules constrain allowed values to \"active\" or \"deactivated\" for predictable authorization behavior."}],"description":"Lifecycle status of the user account.\n\nMapped from Prisma model Actors.todo_mvp_users.status (String). While the database column is a free-form string, business rules constrain allowed values to \"active\" or \"deactivated\" for predictable authorization behavior."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the user account record.\n\nMapped from Prisma model Actors.todo_mvp_users.created_at (Timestamptz). Supports temporal ordering and audit-friendly visibility."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp of the user account record.\n\nMapped from Prisma model Actors.todo_mvp_users.updated_at (Timestamptz). Updated when mutable properties of the user are changed (e.g., password updates) by server-side logic."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for account lifecycle workflows.\n\nMapped from Prisma model Actors.todo_mvp_users.deleted_at (nullable Timestamptz). When set, the record is considered inactive for normal reads depending on provider policy. Nullable by design."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ITodoMvpUser","description":"Authenticated user profile without sensitive fields.\n\nDerived from Actors.todo_mvp_users while omitting password_hash and other internal values. Included to provide client-side context for the current subject."}},"required":["id","email","status","created_at","updated_at","token"],"description":"Authorization response for the User role following join/login/refresh operations.\n\nConforms to the required structure: contains the subject id (UUID) and a token bundle of type IAuthorizationToken. Optionally includes the sanitized user profile for convenience. Sensitive data like password_hash is intentionally excluded.\n\nSecurity notes reference Prisma models Actors.todo_mvp_users and Auth.todo_mvp_sessions, which store identity and session lifecycle metadata respectively (e.g., session_token_hash, last_accessed_at, expires_at, revoked_at)."},"ITodoMvpUserLogin.IRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User’s unique email for authentication.\n\nMaps conceptually to Actors.todo_mvp_users.email, which is business-unique (Prisma @@unique([email]))."},"password":{"type":"string","minLength":8,"description":"Plain-text password submitted for verification.\n\nCompared against Actors.todo_mvp_users.password_hash using a secure one-way function during login. The plaintext value is never persisted."}},"required":["email","password"],"description":"Login request payload for member authentication against Actors.todo_mvp_users.\n\nIncludes the minimal fields required by the MVP: email (unique identifier) and a plaintext password for verification. On success, providers create a session in Auth.todo_mvp_sessions and return ITodoMvpUser.IAuthorized."},"ITodoMvpUserRefresh.IRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token presented by the client for session renewal.\n\nThe implementation hashes this value and compares it with Auth.todo_mvp_sessions.session_token_hash. On success, the session rotates/extends per lifecycle rules (updated_at, last_accessed_at, expires_at)."}},"required":["refresh_token"],"description":"Refresh request to rotate and renew an existing authenticated session stored in Prisma Auth.todo_mvp_sessions.\n\nMinimal input: a refresh_token string, which is never stored in plaintext at rest. Validation checks include revoked_at and expires_at semantics per Prisma schema commentary."},"ITodoMvpUserPassword.IUpdate":{"type":"object","properties":{"current_password":{"type":"string","minLength":8,"description":"Current plaintext credential used to verify identity before rotation.\n\nVerified against Actors.todo_mvp_users.password_hash using constant-time comparison. Not persisted."},"new_password":{"type":"string","minLength":8,"description":"New plaintext credential to be hashed and stored.\n\nReplaces Actors.todo_mvp_users.password_hash after hashing with a strong algorithm (e.g., Argon2/bcrypt). Providers may revoke or rotate sessions in Auth.todo_mvp_sessions by policy after a successful change."}},"required":["current_password","new_password"],"description":"Password change request for authenticated members targeting Actors.todo_mvp_users.password_hash.\n\nSecurity notes: The API never exposes password_hash. Providers should consider rotating or revoking existing sessions in Auth.todo_mvp_sessions upon success and must update user.updated_at to reflect credential change."},"IResult.ISuccess":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates operation outcome.\n\nFor successful operations, this value is true."},"message":{"type":"string","description":"Optional human-readable confirmation message.\n\nIntended for client display. Keep language concise and non-technical."}},"required":["success"],"description":"Generic success result DTO for simple acknowledgement responses (e.g., logout).\n\nThis structure is intentionally minimal for MVP flows where no complex payload is required beyond confirming success."},"ITodoMvpAdminJoin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator email address.\n\nMapped to Actors.todo_mvp_admins.email with @@unique constraint. Must be unique within admin accounts."},"password":{"type":"string","minLength":8,"description":"Plain text password submitted by the client for registration.\n\nThe server MUST hash this value (e.g., Argon2/bcrypt) and persist the derived hash into Actors.todo_mvp_admins.password_hash. Plaintext is never stored. Minimum length guidance is applied at DTO level for basic validation."}},"required":["email","password"],"description":"Create DTO for administrator registration (POST /auth/admin/join).\n\nThis request body maps to creating a record in Prisma table Actors.todo_mvp_admins by supplying minimal credentials. Do not include system-managed fields like id, created_at, updated_at, or deleted_at, and do not allow status override in MVP."},"ITodoMvpAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator.\n\nCorresponds to Actors.todo_mvp_admins.id (UUID)."},"email":{"type":"string","format":"email","description":"Administrator’s unique email address.\n\nReference: Prisma column Actors.todo_mvp_admins.email (unique). Do not expose secrets. This is a business-unique identifier for admins."},"status":{"$ref":"#/components/schemas/IEAdminStatus","description":"Lifecycle status of the administrator account.\n\nReference: Prisma column Actors.todo_mvp_admins.status. Allowed values in MVP are \"active\" or \"deactivated\"."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created.\n\nReference: Prisma column Actors.todo_mvp_admins.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated.\n\nReference: Prisma column Actors.todo_mvp_admins.updated_at (Timestamptz)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating the record is no longer in active use per lifecycle/retention policies.\n\nReference: Prisma column Actors.todo_mvp_admins.deleted_at (Timestamptz, nullable)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/ITodoMvpAdmin","description":"Administrator profile information suitable for client display (excludes secrets like password_hash)."}},"required":["id","email","status","created_at","updated_at","token"],"description":"Authorization response DTO for administrator authentication flows (join/login/refresh).\n\nReturned after successfully issuing credentials to an admin account. Includes the admin's id and an authorization token bundle. The optional \"admin\" property provides non-sensitive account metadata."},"ITodoMvpAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrator record.\n\nReference: Prisma column Actors.todo_mvp_admins.id (UUID)."},"email":{"type":"string","format":"email","description":"Administrator’s unique email address.\n\nReference: Prisma column Actors.todo_mvp_admins.email (unique). Do not expose secrets. This is a business-unique identifier for admins."},"status":{"$ref":"#/components/schemas/IEAccountStatus","description":"Lifecycle status of the administrator account.\n\nReference: Prisma column Actors.todo_mvp_admins.status. The schema commentary suggests values such as \"active\" or \"deactivated\" for operational control."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created.\n\nReference: Prisma column Actors.todo_mvp_admins.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was last updated.\n\nReference: Prisma column Actors.todo_mvp_admins.updated_at (Timestamptz)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating the record is no longer in active use per lifecycle/retention policies.\n\nReference: Prisma column Actors.todo_mvp_admins.deleted_at (Timestamptz, nullable)."}},"required":["id","email","status","created_at","updated_at"],"description":"Administrator entity suitable for administrative views, excluding secret credentials.\n\nSecurity note: The Prisma model includes password_hash for credential storage, but it MUST NOT be exposed by response DTOs. This schema intentionally omits password_hash and any token material.\n\nRole context: Admins have limited oversight capabilities in MVP (aggregate insights and account lifecycle) and do not browse or edit member Todo content."},"ITodoMvpAdminLogin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator's unique email used for authentication.\n\nReferences Prisma table Actors.todo_mvp_admins.email (unique per admin). This field identifies exactly one administrator account during login according to the @@unique([email]) constraint in the schema comments."},"password":{"type":"string","writeOnly":true,"description":"Plaintext password submitted for verification during login.\n\nBack-end compares this value with the stored credential hash (todo_mvp_admins.password_hash). Per Prisma schema comments, plaintext passwords are never stored; only secure hashes are persisted. This value must never appear in logs or responses."}},"required":["email","password"],"description":"Login request for administrative accounts.\n\nThis DTO matches the MVP authentication flow for admins, validating credentials against Actors.todo_mvp_admins. It accepts an email and a plaintext password which is verified against password_hash. The DTO purpose aligns with schema guidance: only hashed credentials are stored; plaintext is transient for verification."},"ITodoMvpAdminRefresh.ICreate":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Client-presented refresh token used to renew administrator authorization.\n\nImplementation hashes this value and matches it against Auth.todo_mvp_sessions.session_token_hash. The surrounding lifecycle fields (expires_at, revoked_at, last_accessed_at) govern whether the session can be refreshed as described in the Prisma schema comments."}},"required":["refresh_token"],"description":"Admin token refresh request.\n\nThe presented refresh_token is hashed server-side and compared to Auth.todo_mvp_sessions.session_token_hash. On success, providers rotate tokens, update last_accessed_at/updated_at, and may extend expires_at according to policy. This DTO contains no identity fields to avoid bypassing authentication context."},"ITodoMvpAdminPassword.IUpdate":{"type":"object","properties":{"current_password":{"type":"string","writeOnly":true,"description":"Administrator’s current plaintext password for verification prior to changing credentials.\n\nVerified against Actors.todo_mvp_admins.password_hash using a secure comparison method. Never stored in plaintext and must not be logged."},"new_password":{"type":"string","writeOnly":true,"description":"New plaintext password to be hashed and stored into Actors.todo_mvp_admins.password_hash upon successful verification.\n\nBack-end computes a strong hash (e.g., Argon2/bcrypt) and persists it. Plaintext must never be returned or logged."}},"required":["current_password","new_password"],"description":"Credential rotation request for administrators.\n\nThis DTO updates Actors.todo_mvp_admins.password_hash after verifying current_password. On success, implementations may revoke or rotate related sessions in Auth.todo_mvp_sessions (setting revoked_at or rotating session_token_hash) per security policy. No sensitive hashes are ever exposed."},"ITodoMvpAdminSecurityResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the administrative credential update completed successfully.\n\nTrue means the password hash in Actors.todo_mvp_admins.password_hash has been replaced. False indicates validation or processing failure."},"reauth_required":{"type":"boolean","description":"Signals whether the client must re-authenticate after this operation completes.\n\nSome policies require re-login following password changes or when session rotation demands new credentials."},"revoked_other_sessions":{"type":"boolean","description":"Whether other active sessions for this administrator were revoked as part of the password change policy.\n\nIf true, providers have set Auth.todo_mvp_sessions.revoked_at for other sessions associated with the same todo_mvp_admins.id to reduce risk from stale tokens."}},"required":["success","reauth_required"],"description":"Outcome payload for an administrator password change.\n\nThis DTO communicates security-relevant results without exposing secrets. It reflects policy outcomes such as re-authentication requirements and potential revocation of other sessions recorded in Auth.todo_mvp_sessions, aligning with the Prisma schema lifecycle fields (revoked_at, updated_at, expires_at)."},"ITodoMvpTodo.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated retrieval.\n\nNot a DB column; controls pagination window. Begin at 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":200},{"type":"null"}],"description":"Maximum number of records per page.\n\nBusiness default is commonly 100 for MVP. Providers enforce maximum to avoid excessive payloads."},"status":{"oneOf":[{"$ref":"#/components/schemas/IETodoMvpTodoStatusFilter"},{"type":"null"}],"description":"Filter by Todo lifecycle state for list retrieval.\n\nAllowed values reflect simple two-state lifecycle. \"all\" returns both; \"open\" or \"completed\" restrict to one."},"sort_by":{"oneOf":[{"$ref":"#/components/schemas/IETodoMvpTodoSortBy"},{"type":"null"}],"description":"Sort key for ordering results.\n\nDefaults to created_at in most views; due_date and completed_at supported for alternate views."},"order":{"oneOf":[{"$ref":"#/components/schemas/IESortOrder"},{"type":"null"}],"description":"Sort direction associated with sort_by.\n\nTypical default is desc for timestamp-based sorts."}},"required":[],"description":"Search, filter, sort, and pagination request for listing the authenticated user's Todos.\n\nSecurity: Ownership is derived from the authenticated context; this DTO never accepts todo_mvp_user_id or similar actor identifiers.\n\nPrisma reference: Operates on Todos.todo_mvp_todos via provider logic; not persisted."},"ITodoMvpTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":120,"description":"Short human-readable label for the task.\n\nPrisma reference: `Todos.todo_mvp_todos.title` (required). Business rules specify trimming leading/trailing whitespace and a typical length of 1–120 characters after trim. Duplicate titles are allowed per user.\n\nSecurity note: No sensitive data stored here."},"notes":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Optional free-form details for the task.\n\nPrisma reference: `Todos.todo_mvp_todos.notes` (nullable). Business guidance allows up to ~1,000 characters; whitespace-only may be treated as empty.\n\nSecurity note: Should not include secrets."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional day-level target completion date interpreted in the user's local time.\n\nPrisma reference: `Todos.todo_mvp_todos.due_date` (nullable timestamptz). Although stored as a timestamp, business semantics are day-level to avoid timezone ambiguity.\n\nSecurity note: No identity information here."}},"required":["title"],"description":"Create DTO for a Todo item owned by the authenticated user.\n\nPrisma mapping: Inserts into `Todos.todo_mvp_todos` with server-assigned fields `id`, `todo_mvp_user_id`, `status` (defaults to `open`), and timestamps (`created_at`, `updated_at`). `completed_at` remains null until status transitions to `completed`.\n\nSecurity checklist:\n- Authentication fields (e.g., `todo_mvp_user_id`) are forbidden in client input and must be taken from the authenticated session.\n- System-generated fields (`id`, `created_at`, `updated_at`, `completed_at`) are system-managed and not accepted here.\n- Sensitive fields (passwords/tokens) are not part of this DTO."},"ITodoMvpTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Todo identifier.\n\nPrisma reference: Todos.todo_mvp_todos.id (UUID primary key). System-generated and immutable."},"title":{"type":"string","minLength":1,"maxLength":120,"description":"Short human-readable label for the task.\n\nPrisma reference: Todos.todo_mvp_todos.title (required). Business rules emphasize trimming and length 1–120 after trim."},"notes":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Optional free-form details.\n\nPrisma reference: Todos.todo_mvp_todos.notes (nullable). Up to ~1,000 characters by business guidance."},"status":{"$ref":"#/components/schemas/IETodoMvpTodoStatus","description":"Lifecycle state of the task.\n\nPrisma reference: Todos.todo_mvp_todos.status. Allowed values: \"open\" or \"completed\"."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional day-level due date in the user's local time context.\n\nPrisma reference: Todos.todo_mvp_todos.due_date (nullable timestamptz)."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp set only when status transitions to \"completed\"; cleared when reverting to \"open\".\n\nPrisma reference: Todos.todo_mvp_todos.completed_at (nullable timestamptz)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp recorded when the Todo is created.\n\nPrisma reference: Todos.todo_mvp_todos.created_at (timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp recorded whenever the Todo is edited or its status changes.\n\nPrisma reference: Todos.todo_mvp_todos.updated_at (timestamptz)."}},"required":["id","title","status","created_at","updated_at"],"description":"Full Todo entity for single-item responses.\n\nThis DTO reflects all public fields of Todos.todo_mvp_todos needed by clients: identity, content, lifecycle state, optional dates, and timestamps. Ownership (todo_mvp_user_id) is intentionally omitted in responses; it is enforced server-side.\n\nSecurity: No passwords or tokens; no actor IDs in outputs."},"ITodoMvpTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":120,"description":"New title for the task. Must be trimmed and satisfy length 1–120 characters after trimming.\n\nPrisma reference: Todos.todo_mvp_todos.title (non-nullable String). Title cannot be cleared to null; omit this property to leave unchanged."},"notes":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Updated notes. Provide null to clear notes.\n\nPrisma reference: Todos.todo_mvp_todos.notes (nullable String). Notes preserve line breaks; limit ~1,000 characters by business rules."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Updated due date. Provide null to clear the date.\n\nPrisma reference: Todos.todo_mvp_todos.due_date (nullable timestamptz). Business semantics treat this as a day-level date in user’s local time."},"status":{"$ref":"#/components/schemas/IETodoMvpTodoStatus","description":"Updated lifecycle state. When set to \"completed\", providers set completed_at; when set to \"open\", providers clear completed_at.\n\nPrisma reference: Todos.todo_mvp_todos.status (non-nullable String with allowed values \"open\" or \"completed\")."}},"required":[],"description":"Update DTO for modifying a Todo's mutable fields.\n\nAll properties are optional (Partial<T> pattern). Ownership is immutable and not present. System-managed fields (id, todo_mvp_user_id, created_at, updated_at, completed_at) are not client-writable; providers update timestamps and completed_at based on valid state transitions.\n\nSecurity checklist:\n- Authentication fields: todo_mvp_user_id never accepted.\n- Sensitive fields: none.\n- System fields: managed server-side."},"IETodoMvpTodoStatus":{"oneOf":[{"const":"open","description":"Enumeration of Todo lifecycle states.\n\nPrisma reference: Todos.todo_mvp_todos.status (business-allowed values). \"open\" indicates an active (not completed) task; \"completed\" indicates a done task that can be reopened."},{"const":"completed","description":"Enumeration of Todo lifecycle states.\n\nPrisma reference: Todos.todo_mvp_todos.status (business-allowed values). \"open\" indicates an active (not completed) task; \"completed\" indicates a done task that can be reopened."}],"description":"Enumeration of Todo lifecycle states.\n\nPrisma reference: Todos.todo_mvp_todos.status (business-allowed values). \"open\" indicates an active (not completed) task; \"completed\" indicates a done task that can be reopened."},"IETodoMvpTodoStatusFilter":{"oneOf":[{"const":"all","description":"Enumeration for filtering Todos by lifecycle in list requests.\n\nValues: \"all\" returns both states; \"open\" filters to active items; \"completed\" filters to done items."},{"const":"open","description":"Enumeration for filtering Todos by lifecycle in list requests.\n\nValues: \"all\" returns both states; \"open\" filters to active items; \"completed\" filters to done items."},{"const":"completed","description":"Enumeration for filtering Todos by lifecycle in list requests.\n\nValues: \"all\" returns both states; \"open\" filters to active items; \"completed\" filters to done items."}],"description":"Enumeration for filtering Todos by lifecycle in list requests.\n\nValues: \"all\" returns both states; \"open\" filters to active items; \"completed\" filters to done items."},"IETodoMvpTodoSortBy":{"oneOf":[{"const":"created_at","description":"Enumeration of supported sort keys for Todo list retrieval.\n\nThese correspond to indexed columns and common queries referenced in the Prisma schema for Todos (created_at, due_date, completed_at)."},{"const":"due_date","description":"Enumeration of supported sort keys for Todo list retrieval.\n\nThese correspond to indexed columns and common queries referenced in the Prisma schema for Todos (created_at, due_date, completed_at)."},{"const":"completed_at","description":"Enumeration of supported sort keys for Todo list retrieval.\n\nThese correspond to indexed columns and common queries referenced in the Prisma schema for Todos (created_at, due_date, completed_at)."}],"description":"Enumeration of supported sort keys for Todo list retrieval.\n\nThese correspond to indexed columns and common queries referenced in the Prisma schema for Todos (created_at, due_date, completed_at)."},"IESortOrder":{"oneOf":[{"const":"asc","description":"Sort direction: ascending.\n\nApplied to the selected sort_by field."},{"const":"desc","description":"Sort direction: descending.\n\nApplied to the selected sort_by field."}],"description":"Sort direction enumeration for list operations.\n\nRestricts clients to safe, predictable values: \"asc\" or \"desc\"."},"ITodoMvpAuditEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (todo_mvp_audit_events.id).\n\nPrisma: String @id @db.Uuid."},"todo_mvp_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Acting user's identifier (todo_mvp_audit_events.todo_mvp_user_id).\n\nNullable to preserve records after user deletion."},"todo_mvp_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Acting admin's identifier (todo_mvp_audit_events.todo_mvp_admin_id).\n\nNullable to preserve records after admin deletion."},"todo_mvp_todo_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target Todo identifier (todo_mvp_audit_events.todo_mvp_todo_id).\n\nNullable to preserve history after Todo deletion."},"event_type":{"$ref":"#/components/schemas/IEAuditEventType","description":"Business event type (todo_mvp_audit_events.event_type).\n\nEnum constrained to safe, documented values for MVP."},"event_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short operational description (todo_mvp_audit_events.event_description).\n\nMust not include Todo content (title/notes)."},"created_at":{"type":"string","format":"date-time","description":"Audit record creation time (todo_mvp_audit_events.created_at).\n\nPrisma: DateTime @db.Timestamptz."},"updated_at":{"type":"string","format":"date-time","description":"Last administrative correction timestamp (todo_mvp_audit_events.updated_at).\n\nPrisma: DateTime @db.Timestamptz."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for retention control (todo_mvp_audit_events.deleted_at).\n\nPrisma: DateTime? @db.Timestamptz."}},"required":["id","event_type","created_at","updated_at"],"description":"Audit trail entity reflecting Prisma table Audits.todo_mvp_audit_events.\n\nCaptures who acted (user/admin, nullable FKs), the target Todo (nullable FK), the event type, and timestamps. No Todo content is stored, preserving privacy in line with schema commentary."},"ITodoMvpAuditEvent.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated retrieval of audit events.\n\nThis is an API-level control that does not map to a database column. When null or omitted, provider defaults apply."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":200},{"type":"null"}],"description":"Maximum number of audit event records to return per page.\n\nAPI-level control aligned with performance targets. Upper bound protects responsiveness. When null or omitted, provider defaults apply."},"actor_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by acting user id.\n\nReferences Audits.todo_mvp_audit_events.todo_mvp_user_id (UUID, nullable)."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by acting admin id.\n\nReferences Audits.todo_mvp_audit_events.todo_mvp_admin_id (UUID, nullable)."},"target_todo_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by target Todo id.\n\nReferences Audits.todo_mvp_audit_events.todo_mvp_todo_id (UUID, nullable)."},"event_types":{"oneOf":[{"type":"array","items":{"oneOf":[{"const":"todo_created"},{"const":"todo_updated"},{"const":"todo_completed"},{"const":"todo_uncompleted"},{"const":"todo_deleted"}]}},{"type":"null"}],"description":"Optional filter by one or more audit event types captured in Audits.todo_mvp_audit_events.event_type."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for filtering by Audits.todo_mvp_audit_events.created_at (Timestamptz)."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for filtering by Audits.todo_mvp_audit_events.created_at (Timestamptz)."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sortable columns for audit lists.\n\nWhitelisted to stable timestamp columns in Audits.todo_mvp_audit_events."},{"const":"updated_at","description":"Sortable columns for audit lists.\n\nWhitelisted to stable timestamp columns in Audits.todo_mvp_audit_events."}],"description":"Sortable columns for audit lists.\n\nWhitelisted to stable timestamp columns in Audits.todo_mvp_audit_events."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction applied with sort_by (asc or desc).\n\nConstrained by IEOrderDirection to avoid unsafe arbitrary input."}},"required":[],"description":"Search, filter, and pagination parameters for listing audit events (admin-only context).\n\nOwnership context is administrative; sensitive Todo content is never present in the audit entity by design."},"IEAuditEventType":{"oneOf":[{"const":"todo_created"},{"const":"todo_updated"},{"const":"todo_completed"},{"const":"todo_uncompleted"},{"const":"todo_deleted"}],"description":"Allowed business event types stored in Audits.todo_mvp_audit_events.event_type.\n\nValues derived from Prisma schema comments and standardized for MVP analytics."},"ITodoMvpComplianceRemovalRecord":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the compliance removal record (todo_mvp_compliance_removal_records.id).\n\nPrisma: String @id @db.Uuid."},"todo_mvp_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Acting administrator's identifier (todo_mvp_compliance_removal_records.todo_mvp_admin_id).\n\nPrisma: String? @db.Uuid. Nullable to preserve integrity if the admin account is later deleted."},"todo_mvp_todo_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Removed Todo's identifier (todo_mvp_compliance_removal_records.todo_mvp_todo_id).\n\nPrisma: String? @db.Uuid. Nullable to preserve the record after the Todo is deleted."},"reason_code":{"$ref":"#/components/schemas/IEComplianceReasonCode","description":"High-level reason code for compliance removal (todo_mvp_compliance_removal_records.reason_code).\n\nSchema comments provide examples; this enum standardizes the allowed set for MVP."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional administrative notes that must not include user Todo content (todo_mvp_compliance_removal_records.notes).\n\nPrisma: String?. Content policies apply."},"action_effective_at":{"type":"string","format":"date-time","description":"Timestamp when the removal took effect from the user's perspective (todo_mvp_compliance_removal_records.action_effective_at).\n\nPrisma: DateTime @db.Timestamptz."},"created_at":{"type":"string","format":"date-time","description":"Record creation time (todo_mvp_compliance_removal_records.created_at).\n\nPrisma: DateTime @db.Timestamptz."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last administrative correction to this record, if any (todo_mvp_compliance_removal_records.updated_at).\n\nPrisma: DateTime @db.Timestamptz."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for retention/lifecycle control (todo_mvp_compliance_removal_records.deleted_at).\n\nPrisma: DateTime? @db.Timestamptz."}},"required":["id","reason_code","action_effective_at","created_at","updated_at"],"description":"Compliance removal record entity mirroring Prisma table Audits.todo_mvp_compliance_removal_records.\n\nThese records document policy- or legal-driven removals in a privacy-preserving manner: they do not store Todo content but do capture who acted (admin), what was removed (Todo reference, nullable), why (reason_code), and when (action_effective_at).\n\nForeign keys are nullable to preserve oversight records even after related entities are deleted. Notes must avoid including user Todo content per schema comments."},"ITodoMvpComplianceRemovalRecord.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated retrieval of compliance removal records.\n\nAPI-level control; does not map to a database column."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":200},{"type":"null"}],"description":"Maximum number of records returned per page for compliance removal records.\n\nUpper bound helps meet responsiveness targets; when null or omitted, provider defaults apply."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by the acting administrator’s id.\n\nReferences Audits.todo_mvp_compliance_removal_records.todo_mvp_admin_id (UUID, nullable)."},"removed_todo_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by the removed Todo id.\n\nReferences Audits.todo_mvp_compliance_removal_records.todo_mvp_todo_id (UUID, nullable)."},"reason_codes":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Optional filter by high-level reason codes such as \"policy_violation\", \"legal_request\", or \"user_request_via_admin\".\n\nMaps to Audits.todo_mvp_compliance_removal_records.reason_code."},"effective_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for filtering by Audits.todo_mvp_compliance_removal_records.action_effective_at (Timestamptz)."},"effective_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for filtering by Audits.todo_mvp_compliance_removal_records.action_effective_at (Timestamptz)."},"sort_by":{"oneOf":[{"const":"action_effective_at","description":"Sortable columns for compliance removal records.\n\nWhitelisted to columns indexed or commonly used for operational ordering."},{"const":"created_at","description":"Sortable columns for compliance removal records.\n\nWhitelisted to columns indexed or commonly used for operational ordering."},{"const":"updated_at","description":"Sortable columns for compliance removal records.\n\nWhitelisted to columns indexed or commonly used for operational ordering."},{"const":"reason_code","description":"Sortable columns for compliance removal records.\n\nWhitelisted to columns indexed or commonly used for operational ordering."}],"description":"Sortable columns for compliance removal records.\n\nWhitelisted to columns indexed or commonly used for operational ordering."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction applied with sort_by (asc or desc).\n\nConstrained by IEOrderDirection."}},"required":[],"description":"Search and pagination parameters for compliance removal records (admin-only).\n\nFilters align with Audits.todo_mvp_compliance_removal_records while preserving privacy (no Todo content)."},"IEComplianceReasonCode":{"oneOf":[{"const":"policy_violation","description":"Allowed reason codes for compliance removals stored in Audits.todo_mvp_compliance_removal_records.reason_code.\n\nValues derived from Prisma schema commentary examples and standardized for MVP to ensure consistent inputs and analytics."},{"const":"legal_request","description":"Allowed reason codes for compliance removals stored in Audits.todo_mvp_compliance_removal_records.reason_code.\n\nValues derived from Prisma schema commentary examples and standardized for MVP to ensure consistent inputs and analytics."},{"const":"user_request_via_admin","description":"Allowed reason codes for compliance removals stored in Audits.todo_mvp_compliance_removal_records.reason_code.\n\nValues derived from Prisma schema commentary examples and standardized for MVP to ensure consistent inputs and analytics."}],"description":"Allowed reason codes for compliance removals stored in Audits.todo_mvp_compliance_removal_records.reason_code.\n\nValues derived from Prisma schema commentary examples and standardized for MVP to ensure consistent inputs and analytics."},"ITodoMvpSession.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nBusiness guidance: Defaults to the first page when omitted. Pagination is recommended to keep responses predictable for typical list sizes.\n\nThis parameter does not map to a Prisma column; it is an API convenience aligned with the pagination guidance in requirements."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of records to return per page.\n\nBusiness guidance: Reasonable defaults and upper bounds are recommended (e.g., 100) to meet responsiveness targets.\n\nThis parameter does not map to a Prisma column; it is an API convenience aligned with the pagination guidance in requirements."},"state":{"$ref":"#/components/schemas/IESessionState","description":"Filter by session lifecycle state derived from columns in Auth.todo_mvp_sessions.\n\nMappings to Prisma columns:\n- \"active\": revoked_at is null AND expires_at is in the future.\n- \"revoked\": revoked_at is not null.\n- \"expired\": expires_at is in the past.\n- \"all\": no additional lifecycle filtering."},"sort_by":{"$ref":"#/components/schemas/IESessionSortBy","description":"Sort key constrained to lifecycle columns of Auth.todo_mvp_sessions (e.g., created_at, last_accessed_at, expires_at, updated_at)."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Order direction for the chosen sort key.\n\nSecurity: Input is constrained to a known set of values to avoid raw SQL-like patterns."},"created_from":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for filtering by Auth.todo_mvp_sessions.created_at.\n\nReference: Prisma column todo_mvp_sessions.created_at (Timestamptz)."},"created_to":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for filtering by Auth.todo_mvp_sessions.created_at.\n\nReference: Prisma column todo_mvp_sessions.created_at (Timestamptz)."},"last_accessed_from":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for filtering by Auth.todo_mvp_sessions.last_accessed_at.\n\nReference: Prisma column todo_mvp_sessions.last_accessed_at (Timestamptz)."},"last_accessed_to":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for filtering by Auth.todo_mvp_sessions.last_accessed_at.\n\nReference: Prisma column todo_mvp_sessions.last_accessed_at (Timestamptz)."},"expires_after":{"type":"string","format":"date-time","description":"Lower bound (exclusive or inclusive per provider policy) for filtering by Auth.todo_mvp_sessions.expires_at.\n\nReference: Prisma column todo_mvp_sessions.expires_at (Timestamptz)."},"expires_before":{"type":"string","format":"date-time","description":"Upper bound (exclusive or inclusive per provider policy) for filtering by Auth.todo_mvp_sessions.expires_at.\n\nReference: Prisma column todo_mvp_sessions.expires_at (Timestamptz)."}},"required":[],"description":"Search, filter, sort, and pagination parameters for listing session records from Auth.todo_mvp_sessions.\n\nThis request DTO aligns with the Prisma model todo_mvp_sessions, which records session lifecycle using created_at, updated_at, last_accessed_at, expires_at, and revoked_at. Parameters intentionally avoid accepting any user or admin IDs directly, honoring security guidance that actor identity comes from authentication context rather than client input.\n\nAll properties are optional. Providers may impose sensible defaults (for example, sort_by = \"last_accessed_at\" and order = \"desc\")."},"ITodoMvpSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the session record.\n\nReference: Prisma column Auth.todo_mvp_sessions.id (UUID)."},"todo_mvp_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key referencing Actors.todo_mvp_users.id for user-owned sessions. Nullable because a session can belong to an admin or (for guest flows) neither.\n\nReference: Prisma column Auth.todo_mvp_sessions.todo_mvp_user_id (UUID, nullable)."},"todo_mvp_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key referencing Actors.todo_mvp_admins.id for admin-owned sessions. Nullable because a session can belong to a user or (for guest flows) neither.\n\nReference: Prisma column Auth.todo_mvp_sessions.todo_mvp_admin_id (UUID, nullable)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the session was created (sign-in success time).\n\nReference: Prisma column Auth.todo_mvp_sessions.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the session record itself was last updated (e.g., rotation).\n\nReference: Prisma column Auth.todo_mvp_sessions.updated_at (Timestamptz)."},"last_accessed_at":{"type":"string","format":"date-time","description":"Most recent time the session was actively used, supporting inactivity timeout policies.\n\nReference: Prisma column Auth.todo_mvp_sessions.last_accessed_at (Timestamptz)."},"expires_at":{"type":"string","format":"date-time","description":"Absolute expiration time after which the session is no longer valid.\n\nReference: Prisma column Auth.todo_mvp_sessions.expires_at (Timestamptz)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking explicit revocation (e.g., logout). Null means not revoked.\n\nReference: Prisma column Auth.todo_mvp_sessions.revoked_at (Timestamptz, nullable)."}},"required":["id","created_at","updated_at","last_accessed_at","expires_at"],"description":"Session entity describing an authenticated state as stored in Auth.todo_mvp_sessions.\n\nSecurity note: Sensitive materials like session_token_hash (hashed bearer token for lookup) are intentionally omitted from this response DTO, aligning with the schema comment that plaintext tokens are never stored and with security guidance to avoid exposing secrets.\n\nRelationship context: A session optionally links to either a user (todo_mvp_user_id) or an admin (todo_mvp_admin_id). These are nullable to support distinct actor types and guest flows."},"ITodoMvpTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Todo identifier.\n\nPrisma reference: Todos.todo_mvp_todos.id (UUID primary key)."},"title":{"type":"string","minLength":1,"maxLength":120,"description":"Short task label, suitable for list display.\n\nPrisma reference: Todos.todo_mvp_todos.title (required)."},"status":{"$ref":"#/components/schemas/IETodoMvpTodoStatus","description":"Lifecycle state for quick list rendering.\n\nPrisma reference: Todos.todo_mvp_todos.status (\"open\"|\"completed\")."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional day-level due date for list context.\n\nPrisma reference: Todos.todo_mvp_todos.due_date (nullable)."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Set only for completed items, useful for Completed views ordering.\n\nPrisma reference: Todos.todo_mvp_todos.completed_at (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Creation time for predictable default sorting (newest first).\n\nPrisma reference: Todos.todo_mvp_todos.created_at."}},"required":["id","title","status","created_at"],"description":"Summary DTO optimized for list views.\n\nExcludes potentially large text fields like notes to keep responses light. Contains essential fields for rendering and sorting in list pages."},"IEOrderDirection":{"oneOf":[{"const":"asc","description":"Sort order direction used by request DTOs to constrain input and standardize API behavior.\n\nThis enumeration is interface-level and independent of Prisma columns; it provides consistent semantics for ascending or descending sort across endpoints."},{"const":"desc","description":"Sort order direction used by request DTOs to constrain input and standardize API behavior.\n\nThis enumeration is interface-level and independent of Prisma columns; it provides consistent semantics for ascending or descending sort across endpoints."}],"description":"Sort order direction used by request DTOs to constrain input and standardize API behavior.\n\nThis enumeration is interface-level and independent of Prisma columns; it provides consistent semantics for ascending or descending sort across endpoints."},"IESessionSortBy":{"oneOf":[{"const":"created_at","description":"Allowed sort keys for session listings derived from Auth.todo_mvp_sessions columns.\n\nValues map directly to Prisma columns: created_at, last_accessed_at, expires_at, and updated_at. Use with IEOrderDirection to construct predictable, validated sorting rules in request DTOs."},{"const":"last_accessed_at","description":"Allowed sort keys for session listings derived from Auth.todo_mvp_sessions columns.\n\nValues map directly to Prisma columns: created_at, last_accessed_at, expires_at, and updated_at. Use with IEOrderDirection to construct predictable, validated sorting rules in request DTOs."},{"const":"expires_at","description":"Allowed sort keys for session listings derived from Auth.todo_mvp_sessions columns.\n\nValues map directly to Prisma columns: created_at, last_accessed_at, expires_at, and updated_at. Use with IEOrderDirection to construct predictable, validated sorting rules in request DTOs."},{"const":"updated_at","description":"Allowed sort keys for session listings derived from Auth.todo_mvp_sessions columns.\n\nValues map directly to Prisma columns: created_at, last_accessed_at, expires_at, and updated_at. Use with IEOrderDirection to construct predictable, validated sorting rules in request DTOs."}],"description":"Allowed sort keys for session listings derived from Auth.todo_mvp_sessions columns.\n\nValues map directly to Prisma columns: created_at, last_accessed_at, expires_at, and updated_at. Use with IEOrderDirection to construct predictable, validated sorting rules in request DTOs."},"IESessionState":{"oneOf":[{"const":"all","description":"High-level lifecycle filter for sessions used by search/list request DTOs.\n\nThese values are derived from Auth.todo_mvp_sessions lifecycle columns (revoked_at and expires_at) and are not stored directly in the database. They provide a clear, privacy-preserving query abstraction."},{"const":"active","description":"High-level lifecycle filter for sessions used by search/list request DTOs.\n\nThese values are derived from Auth.todo_mvp_sessions lifecycle columns (revoked_at and expires_at) and are not stored directly in the database. They provide a clear, privacy-preserving query abstraction."},{"const":"revoked","description":"High-level lifecycle filter for sessions used by search/list request DTOs.\n\nThese values are derived from Auth.todo_mvp_sessions lifecycle columns (revoked_at and expires_at) and are not stored directly in the database. They provide a clear, privacy-preserving query abstraction."},{"const":"expired","description":"High-level lifecycle filter for sessions used by search/list request DTOs.\n\nThese values are derived from Auth.todo_mvp_sessions lifecycle columns (revoked_at and expires_at) and are not stored directly in the database. They provide a clear, privacy-preserving query abstraction."}],"description":"High-level lifecycle filter for sessions used by search/list request DTOs.\n\nThese values are derived from Auth.todo_mvp_sessions lifecycle columns (revoked_at and expires_at) and are not stored directly in the database. They provide a clear, privacy-preserving query abstraction."},"IEAdminStatus":{"oneOf":[{"const":"active","description":"Lifecycle status for administrator accounts.\n\nThis enumeration corresponds to the textual values stored in Actors.todo_mvp_admins.status as suggested by the Prisma schema comments (e.g., \"active\" or \"deactivated\")."},{"const":"deactivated","description":"Lifecycle status for administrator accounts.\n\nThis enumeration corresponds to the textual values stored in Actors.todo_mvp_admins.status as suggested by the Prisma schema comments (e.g., \"active\" or \"deactivated\")."}],"description":"Lifecycle status for administrator accounts.\n\nThis enumeration corresponds to the textual values stored in Actors.todo_mvp_admins.status as suggested by the Prisma schema comments (e.g., \"active\" or \"deactivated\")."},"IEAccountStatus":{"oneOf":[{"const":"active","description":"Account lifecycle status used by both member users and administrators.\n\nReference: Prisma columns Actors.todo_mvp_users.status and Actors.todo_mvp_admins.status. Suggested values \"active\" and \"deactivated\" support account lifecycle controls in the MVP."},{"const":"deactivated","description":"Account lifecycle status used by both member users and administrators.\n\nReference: Prisma columns Actors.todo_mvp_users.status and Actors.todo_mvp_admins.status. Suggested values \"active\" and \"deactivated\" support account lifecycle controls in the MVP."}],"description":"Account lifecycle status used by both member users and administrators.\n\nReference: Prisma columns Actors.todo_mvp_users.status and Actors.todo_mvp_admins.status. Suggested values \"active\" and \"deactivated\" support account lifecycle controls in the MVP."}}}}