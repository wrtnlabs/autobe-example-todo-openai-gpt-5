import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postmyAuthSystemAdminLogout } from "../../../../../providers/postmyAuthSystemAdminLogout";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

import { ITodoAppSystemAdminLogoutResult } from "../../../../../api/structures/ITodoAppSystemAdminLogoutResult";
import { ITodoAppSystemAdminLogout } from "../../../../../api/structures/ITodoAppSystemAdminLogout";

@Controller("/my/auth/systemAdmin/logout")
export class MyAuthSystemadminController {
  /**
   * Logout current admin by revoking session and refresh token per schema.
   *
   * This self-scoped endpoint targets the authenticated admin’s current
   * session. It updates the session record in todo_app_sessions by setting
   * revoked_at and optionally revoked_reason, and creates a corresponding
   * todo_app_session_revocations row (revoked_at, revoked_by, reason). If a
   * refresh token exists in todo_app_refresh_tokens for this session, it should
   * be revoked (revoked_at/revoked_reason) to prevent further use.
   *
   * The path follows the "/my/" convention because it manages the caller’s own
   * session. No private todo content is read or modified by this operation.
   *
   * This operation integrates with the broader authentication lifecycle that
   * includes login and refresh. It ensures clean termination of authenticated
   * state and supports governance via audit logging when appropriate.
   *
   * Errors may include an already revoked or expired session (expires_at) and
   * race conditions addressed by idempotent updates (setting revoked_at if
   * null). The response reports outcome details.
   *
   * All updates are limited to authentication-related tables:
   * todo_app_sessions, todo_app_refresh_tokens, and
   * todo_app_session_revocations; todo_app_users remains unchanged aside from
   * optional last_login_at updates handled elsewhere.
   *
   * @param connection
   * @param body Optional context for logout (e.g., reason).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async logout(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppSystemAdminLogout.ICreate,
  ): Promise<ITodoAppSystemAdminLogoutResult> {
    try {
      return await postmyAuthSystemAdminLogout({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
