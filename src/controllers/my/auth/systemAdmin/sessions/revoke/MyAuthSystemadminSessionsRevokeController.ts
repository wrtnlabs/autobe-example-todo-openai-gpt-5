import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postmyAuthSystemAdminSessionsRevoke } from "../../../../../../providers/postmyAuthSystemAdminSessionsRevoke";
import { SystemadminAuth } from "../../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../../decorators/payload/SystemadminPayload";

import { ITodoAppSystemAdminSessionRevocationResult } from "../../../../../../api/structures/ITodoAppSystemAdminSessionRevocationResult";
import { ITodoAppSystemAdminSessionRevocation } from "../../../../../../api/structures/ITodoAppSystemAdminSessionRevocation";

@Controller("/my/auth/systemAdmin/sessions/revoke")
export class MyAuthSystemadminSessionsRevokeController {
  /**
   * Revoke other sessions using todo_app_sessions and
   * todo_app_session_revocations.
   *
   * This endpoint acts on the authenticated systemAdmin’s sessions in
   * todo_app_sessions. It revokes sessions other than the current one by
   * setting revoked_at and optionally revoked_reason, and it creates related
   * rows in todo_app_session_revocations with revoked_at, revoked_by, and
   * optional reason. Refresh token chains in todo_app_refresh_tokens associated
   * with those sessions should also be revoked (revoked_at/revoked_reason) to
   * prevent further refresh.
   *
   * Using the "/my/" prefix, the operation clearly targets the caller’s own
   * resources. It is strictly an authentication maintenance function and does
   * not interact with private todo data.
   *
   * This operation is related to logout of the current session and complements
   * password change and reset flows which often necessitate session
   * invalidation. It respects the integrity of session history by recording
   * revocations instead of removing records.
   *
   * Errors include attempting to revoke sessions that are already revoked or
   * expired (based on expires_at), or no matching sessions to revoke. The
   * application may log audit entries via todo_app_audit_logs for governance
   * monitoring.
   *
   * The endpoint should accept parameters to select scope (e.g., revoke all
   * except current) within the request body and confirm outcomes in the
   * response.
   *
   * @param connection
   * @param body Session revocation scope and options for the current admin.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async revokeOtherSessions(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppSystemAdminSessionRevocation.ICreate,
  ): Promise<ITodoAppSystemAdminSessionRevocationResult> {
    try {
      return await postmyAuthSystemAdminSessionsRevoke({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
