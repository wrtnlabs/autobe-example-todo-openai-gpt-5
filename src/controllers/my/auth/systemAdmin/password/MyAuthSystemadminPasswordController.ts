import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putmyAuthSystemAdminPassword } from "../../../../../providers/putmyAuthSystemAdminPassword";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

import { ITodoAppSystemAdminPasswordChangeResult } from "../../../../../api/structures/ITodoAppSystemAdminPasswordChangeResult";
import { ITodoAppSystemAdminPassword } from "../../../../../api/structures/ITodoAppSystemAdminPassword";

@Controller("/my/auth/systemAdmin/password")
export class MyAuthSystemadminPasswordController {
  /**
   * Change own admin password via todo_app_users; may revoke other sessions.
   *
   * This endpoint requires an authenticated systemAdmin and operates on the
   * caller’s own row in todo_app_users. It validates the provided current
   * password against password_hash and, on success, sets a new password_hash.
   * Post-change, policy may require revoking other active sessions
   * (todo_app_sessions) and their refresh chains (todo_app_refresh_tokens) for
   * the same user; a record may be inserted into todo_app_session_revocations
   * to capture the action.
   *
   * Because it affects only the caller’s account, the path uses the "/my/"
   * prefix convention for self-targeted operations. No private todo content is
   * accessed or changed.
   *
   * The endpoint pairs with login and refresh flows and is complementary to
   * password reset when the current password is unknown. Audit trails for such
   * actions can be captured via todo_app_audit_logs.
   *
   * Validation applies to password policy and mismatch of current password. The
   * operation updates only authentication-related fields in todo_app_users.
   *
   * Errors include incorrect current password, policy violations for the new
   * password, or conflicts revoking sessions based on session state tracked in
   * todo_app_sessions.
   *
   * @param connection
   * @param body Change-password payload including current and new password
   *   fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppSystemAdminPassword.IUpdate,
  ): Promise<ITodoAppSystemAdminPasswordChangeResult> {
    try {
      return await putmyAuthSystemAdminPassword({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
