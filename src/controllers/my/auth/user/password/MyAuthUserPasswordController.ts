import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putMyAuthUserPassword } from "../../../../../providers/putMyAuthUserPassword";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";

import { ITodoMvpUser } from "../../../../../api/structures/ITodoMvpUser";
import { ITodoMvpUserPassword } from "../../../../../api/structures/ITodoMvpUserPassword";

@Controller("/my/auth/user/password")
export class MyAuthUserPasswordController {
  /**
   * Change the authenticated member’s password by updating
   * Actors.todo_mvp_users.password_hash.
   *
   * This security operation lets the authenticated member update their
   * credential by replacing the stored password_hash in Actors.todo_mvp_users.
   * The implementation verifies the current password against the existing
   * password_hash and, upon success, computes and stores a new robust hash. The
   * account’s status column (e.g., "active" or "deactivated") can be consulted
   * to ensure that only valid accounts perform this action. Standard timestamps
   * created_at and updated_at on the user record ensure lifecycle traceability;
   * this endpoint updates updated_at when the password changes.
   *
   * Because credentials change, session management policy should be considered.
   * While the Prisma schema for Auth.todo_mvp_sessions does not mandate
   * automatic revocation, providers may choose to revoke or rotate sessions by
   * updating revoked_at or regenerating session_token_hash and adjusting
   * expires_at. last_accessed_at continues to serve inactivity tracking and
   * should be updated by normal access flows.
   *
   * The endpoint must never expose password_hash or accept or return plaintext
   * credentials beyond transient processing. Email uniqueness (enforced by
   * @@unique on todo_mvp_users.email) is unaffected by password changes.
   *
   * This operation applies to the authenticated "user" role and targets only
   * the caller’s own credential, following the path convention for personal
   * resources. It complements join/login/refresh by enabling post-registration
   * credential maintenance without introducing additional fields in the
   * schema.
   *
   * Related operations: login (to obtain tokens before performing this call),
   * refresh (to maintain access after a rotation), and optional logout if
   * sessions are revoked following a password change.
   *
   * @param connection
   * @param body Request containing current and new password for credential
   *   rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoMvpUserPassword.IUpdate,
  ): Promise<ITodoMvpUser> {
    try {
      return await putMyAuthUserPassword({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
