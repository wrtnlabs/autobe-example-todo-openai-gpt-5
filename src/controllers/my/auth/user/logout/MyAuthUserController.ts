import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postMyAuthUserLogout } from "../../../../../providers/postMyAuthUserLogout";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";

import { IResult } from "../../../../../api/structures/IResult";

@Controller("/my/auth/user/logout")
export class MyAuthUserController {
  /**
   * Sign out the authenticated member by revoking the current
   * Auth.todo_mvp_sessions entry.
   *
   * This operation performs a sign-out for the authenticated member by marking
   * the active session as no longer usable. In Auth.todo_mvp_sessions,
   * revoked_at is set to a timestamp indicating the session has been explicitly
   * ended. Subsequent authorization checks should reject tokens tied to this
   * session. Updating last_accessed_at is not required for a revoked session,
   * and expires_at remains historical context.
   *
   * The user account in Actors.todo_mvp_users is unaffected by logout; no
   * changes to email, password_hash, status, created_at, or updated_at are
   * required. The endpoint must not expose credential data. It simply ensures
   * that bearer material linked via session_token_hash will no longer authorize
   * requests.
   *
   * This endpoint targets the authenticated "user" role and operates on the
   * caller’s own session, following the path convention for personal resources.
   * It complements login and refresh, providing a complete session lifecycle in
   * line with the MVP’s authentication and authorization expectations.
   *
   * If clients hold multiple sessions across devices, revoking just the current
   * session is consistent with the independent-session model described by the
   * schema relationships; each session row stands alone tied to
   * todo_mvp_user_id.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async logout(
    @UserAuth()
    user: UserPayload,
  ): Promise<IResult.ISuccess> {
    try {
      return await postMyAuthUserLogout({
        user,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
