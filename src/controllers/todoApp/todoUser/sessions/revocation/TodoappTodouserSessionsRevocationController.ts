import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { gettodoAppTodoUserSessionsSessionIdRevocation } from "../../../../../providers/gettodoAppTodoUserSessionsSessionIdRevocation";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";

import { ITodoAppSessionRevocation } from "../../../../../api/structures/ITodoAppSessionRevocation";

@Controller("/todoApp/todoUser/sessions/:sessionId/revocation")
export class TodoappTodouserSessionsRevocationController {
  /**
   * Get session revocation details (todo_app_session_revocations) for a
   * session.
   *
   * Return the revocation details for the given session from
   * todo_app_session_revocations. The schema includes id (UUID PK),
   * todo_app_session_id (unique FK to todo_app_sessions.id), revoked_at
   * (timestamp), revoked_by (actor category such as "user", "system", or
   * "admin"), reason (optional), created_at, updated_at, and deleted_at. The
   * presence of a record indicates that the session has been explicitly revoked
   * and should no longer be considered valid for authentication.
   *
   * Security considerations: even though the path omits userId, the provider
   * must validate ownership by joining the session (todo_app_sessions)
   * referenced by todo_app_session_id and ensuring its todo_app_user_id matches
   * the authenticated caller. This prevents cross-user access to revocation
   * details.
   *
   * Expected behavior: return the revocation record when it exists. If no
   * record exists for the session, respond as not found according to service
   * conventions. Validation errors should be surfaced for malformed UUIDs. This
   * operation is commonly used alongside GET
   * /users/{userId}/sessions/{sessionId} to present a complete picture of
   * session state, and PATCH /sessions/{sessionId}/refreshTokens to review the
   * associated refresh-token rotation history.
   *
   * @param connection
   * @param sessionId Target sessionâ€™s ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppSessionRevocation> {
    try {
      return await gettodoAppTodoUserSessionsSessionIdRevocation({
        todoUser,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
