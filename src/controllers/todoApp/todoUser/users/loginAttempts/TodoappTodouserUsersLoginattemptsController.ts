import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppTodoUserUsersUserIdLoginAttempts } from "../../../../../providers/patchtodoAppTodoUserUsersUserIdLoginAttempts";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";
import { gettodoAppTodoUserUsersUserIdLoginAttemptsLoginAttemptId } from "../../../../../providers/gettodoAppTodoUserUsersUserIdLoginAttemptsLoginAttemptId";

import { IPageITodoAppLoginAttempt } from "../../../../../api/structures/IPageITodoAppLoginAttempt";
import { ITodoAppLoginAttempt } from "../../../../../api/structures/ITodoAppLoginAttempt";

@Controller("/todoApp/todoUser/users/:userId/loginAttempts")
export class TodoappTodouserUsersLoginattemptsController {
  /**
   * Search login attempts (todo_app_login_attempts) for a specific user with
   * pagination and filters.
   *
   * Retrieve a filtered, paginated list of authentication attempts linked to a
   * user. In the Prisma schema, todo_app_login_attempts captures per-attempt
   * outcomes with columns such as id, optional todo_app_user_id (FK to
   * todo_app_users.id when the email maps to an account), email (as entered),
   * success, ip, optional user_agent, optional failure_reason, occurred_at,
   * created_at, updated_at, and a deleted_at marker. These records support
   * brute-force protection, abuse detection, and security analytics.
   *
   * Security and permissions: Only the authenticated owner should access their
   * own login attempts. Implementations must ensure the caller is the same
   * principal identified by {userId}. Administrators typically do not require
   * routine access to private per-attempt details. Apply appropriate rate
   * limiting to reduce enumeration risks.
   *
   * Entity relationships and filters: When todo_app_user_id is present, filter
   * by equality to {userId}. Depending on policy, systems may also correlate
   * attempts by the user’s current email value, but the canonical filter is the
   * FK match. The response excludes logically deleted items (deleted_at set)
   * from standard results. Typical filters include time windows over
   * occurred_at, success state, IP address, user agent, and free-text search
   * over failure_reason.
   *
   * Validation and error handling: The request body
   * (ITodoAppLoginAttempt.IRequest) defines pagination, sorting, and optional
   * filters. Reject unsupported page sizes or invalid sort keys in provider
   * logic. Common errors include invalid UUID formats for {userId} and
   * authorization failures when a user requests data for another user.
   *
   * @param connection
   * @param userId Owner user identifier (todo_app_users.id)
   * @param body Search, filtering, and pagination parameters for login attempts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppLoginAttempt.IRequest,
  ): Promise<IPageITodoAppLoginAttempt.ISummary> {
    try {
      return await patchtodoAppTodoUserUsersUserIdLoginAttempts({
        todoUser,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get one login attempt (todo_app_login_attempts) for a user by id.
   *
   * Fetch detailed information about a single login attempt. The Prisma model
   * todo_app_login_attempts includes id, optional todo_app_user_id (FK to
   * todo_app_users.id), email (as entered), success, ip, optional user_agent,
   * optional failure_reason, occurred_at, created_at, updated_at, and a
   * deleted_at marker. This record is security-sensitive and is primarily
   * intended for a user reviewing their own account activity.
   *
   * Security and permissions: Enforce ownership by requiring that
   * todo_app_login_attempts.todo_app_user_id equals {userId}. Deny access
   * without confirming existence when a user targets another user’s data. Apply
   * rate limiting to mitigate probing. Records flagged as deleted (deleted_at
   * set) should not be returned in normal circumstances.
   *
   * Expected behavior and errors: Returns a single resource when both {userId}
   * and {loginAttemptId} identify an owned record. Return not found if the
   * identifiers are invalid, do not match, or if the record is not accessible
   * to the caller. This operation is read-only.
   *
   * @param connection
   * @param userId Owner user identifier (todo_app_users.id)
   * @param loginAttemptId Login attempt identifier (todo_app_login_attempts.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":loginAttemptId")
  public async at(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("loginAttemptId")
    loginAttemptId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppLoginAttempt> {
    try {
      return await gettodoAppTodoUserUsersUserIdLoginAttemptsLoginAttemptId({
        todoUser,
        userId,
        loginAttemptId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
