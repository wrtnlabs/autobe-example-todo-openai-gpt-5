import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppTodoUserUsersUserIdPasswordResets } from "../../../../../providers/patchtodoAppTodoUserUsersUserIdPasswordResets";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";
import { gettodoAppTodoUserUsersUserIdPasswordResetsPasswordResetId } from "../../../../../providers/gettodoAppTodoUserUsersUserIdPasswordResetsPasswordResetId";

import { IPageITodoAppPasswordReset } from "../../../../../api/structures/IPageITodoAppPasswordReset";
import { ITodoAppPasswordReset } from "../../../../../api/structures/ITodoAppPasswordReset";

@Controller("/todoApp/todoUser/users/:userId/passwordResets")
export class TodoappTodouserUsersPasswordresetsController {
  /**
   * List/search password resets (todo_app_password_resets) for a user.
   *
   * Return a paginated list of password reset records that belong to the
   * specified user. The underlying Prisma model todo_app_password_resets
   * includes: id (UUID), todo_app_user_id (nullable FK to todo_app_users.id for
   * privacy-preserving requests), email, token (deprecated in comments),
   * token_hash (preferred), requested_at, expires_at, consumed_at,
   * requested_by_ip, created_at, updated_at, and deleted_at. In alignment with
   * the schema comments, implementations should avoid exposing sensitive token
   * values and rely on hashed representations server-side; list responses
   * should present non-sensitive metadata such as email, timestamps, and status
   * derived from consumed_at/expired comparisons.
   *
   * Security and permissions: Access is restricted to the owner (todoUser). The
   * provider must ensure the path userId corresponds to the authenticated user
   * and filter the list to entries where
   * todo_app_password_resets.todo_app_user_id equals that userId when present,
   * and where appropriate align on privacy behavior for email-only requests.
   * Requests from other accounts must be denied without revealing whether
   * records exist.
   *
   * Pagination and filtering: The request body (ITodoAppPasswordReset.IRequest)
   * should support common list behaviors noted in business
   * requirements—pagination (default page size often 20 within 1–100 range),
   * sorting by requested_at or expires_at, and optional search over
   * non-sensitive fields (e.g., email domain). Exclude rows considered removed
   * from normal access (records where deleted_at is not null). Handle empty
   * result sets gracefully.
   *
   * @param connection
   * @param userId Target user’s ID (UUID) whose password reset records are
   *   queried
   * @param body Filtering, sorting, and pagination criteria for listing
   *   password reset records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppPasswordReset.IRequest,
  ): Promise<IPageITodoAppPasswordReset.ISummary> {
    try {
      return await patchtodoAppTodoUserUsersUserIdPasswordResets({
        todoUser,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific password reset (todo_app_password_resets) for a user.
   *
   * Fetch detailed metadata for one password reset record owned by the
   * specified user. In Prisma, todo_app_password_resets defines: id (UUID),
   * optional todo_app_user_id (FK), email, token (deprecated), token_hash
   * (preferred), requested_at, expires_at, consumed_at, requested_by_ip,
   * created_at, updated_at, and deleted_at. Consistent with the schema’s
   * guidance, implementations must avoid exposing raw token values; responses
   * should focus on safe metadata such as email, timestamps, and lifecycle
   * status inferred from consumed_at and expiration.
   *
   * Security model: Only the owner (todoUser) may access their record. The
   * provider must verify ownership by checking that the record either
   * references the user via todo_app_user_id or otherwise corresponds to an
   * allowed privacy-preserving access pattern aligned with policy. If the
   * record is not owned by the user, the service must deny access without
   * acknowledging existence.
   *
   * Behavior and errors: This is a read-only retrieval. Records treated as
   * removed from normal access (deleted_at set) should not be returned in
   * standard flows. If no matching record is found for the owner, return a
   * not-found response pattern.
   *
   * @param connection
   * @param userId Owner user’s ID (UUID)
   * @param passwordResetId Password reset record ID (UUID) to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":passwordResetId")
  public async at(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("passwordResetId")
    passwordResetId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppPasswordReset> {
    try {
      return await gettodoAppTodoUserUsersUserIdPasswordResetsPasswordResetId({
        todoUser,
        userId,
        passwordResetId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
