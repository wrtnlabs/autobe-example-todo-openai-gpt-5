import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppTodoUserTodosTodoIdActivities } from "../../../../../providers/patchtodoAppTodoUserTodosTodoIdActivities";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";
import { gettodoAppTodoUserTodosTodoIdActivitiesActivityId } from "../../../../../providers/gettodoAppTodoUserTodosTodoIdActivitiesActivityId";

import { IPageITodoAppTodoActivity } from "../../../../../api/structures/IPageITodoAppTodoActivity";
import { ITodoAppTodoActivity } from "../../../../../api/structures/ITodoAppTodoActivity";

@Controller("/todoApp/todoUser/todos/:todoId/activities")
export class TodoappTodouserTodosActivitiesController {
  /**
   * List Todo activity history from todo_app_todo_activities for a specific
   * Todo.
   *
   * Purpose and overview: Returns activity history for the Todo identified by
   * todoId. The todo_app_todo_activities model stores audit trail fields
   * including activity_type, details, changed_fields, previous_status,
   * next_status, and occurred_at. It also maintains nullable relations to the
   * Todo and the actor user to preserve history even if parents are later
   * purged. This endpoint enables end users to review what happened to their
   * Todo over time.
   *
   * Security considerations: Only the Todo owner (role todoUser) may access
   * activities for their item. The provider must validate ownership via the
   * parent todo_app_todos.todo_app_user_id. Attempts to read another user’s
   * activities must be denied without revealing whether the resource exists.
   *
   * DB relationships and behavior: Activities reference todo_app_todos via
   * todo_app_todo_id (nullable for history preservation) and todo_app_users via
   * todo_app_user_id (nullable). Providers should filter results to the
   * specified Todo and apply pagination and sorting as requested. Typical
   * defaults sort by occurred_at descending. The underlying schema includes
   * text-search indexes (e.g., on details) to support keyword filtering if
   * exposed in IRequest.
   *
   * Validation and errors: If todoId is not a valid UUID or does not resolve to
   * a Todo owned by the caller, the request must be rejected. The endpoint is
   * read-only and does not modify activity records. Related endpoints include
   * GET /todoApp/todoUser/todos/{todoId}/activities/{activityId} for fetching a
   * single activity record.
   *
   * @param connection
   * @param todoId Identifier of the parent todo
   * @param body Search, filter, sort, and pagination parameters for activity
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppTodoActivity.IRequest,
  ): Promise<IPageITodoAppTodoActivity.ISummary> {
    try {
      return await patchtodoAppTodoUserTodosTodoIdActivities({
        todoUser,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single Todo activity by ID from todo_app_todo_activities.
   *
   * Purpose and overview: Fetches a detailed audit entry for the Todo’s
   * activity history from todo_app_todo_activities. Activity records capture
   * domain actions such as 'create', 'update', 'complete', 'reopen', and
   * 'delete' with timestamps and optional descriptive details. The model’s FKs
   * to the Todo and the actor are nullable to preserve history even after
   * parent deletions.
   *
   * Security and permissions: Only the owner of the parent Todo may read its
   * activities. Providers must ensure the todo_id belongs to the authenticated
   * user (via todo_app_todos.todo_app_user_id). If the activity does not belong
   * to the specified Todo, or the Todo is not owned by the caller, the request
   * should be denied without disclosing existence.
   *
   * Behavior and error handling: On success, return the full activity document
   * (ITodoAppTodoActivity). If activityId or todoId is not a valid UUID, or the
   * record is not found under the specified parent with proper ownership,
   * return an appropriate error. This is a read-only endpoint; it does not
   * alter activity records.
   *
   * Related endpoints: PATCH /todoApp/todoUser/todos/{todoId}/activities
   * provides paginated search; DELETE /todoApp/todoUser/todos/{todoId} records
   * a 'delete' activity upon successful deletion.
   *
   * @param connection
   * @param todoId Identifier of the parent todo
   * @param activityId Identifier of the activity record to fetch
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":activityId")
  public async at(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedParam("activityId")
    activityId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppTodoActivity> {
    try {
      return await gettodoAppTodoUserTodosTodoIdActivitiesActivityId({
        todoUser,
        todoId,
        activityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
