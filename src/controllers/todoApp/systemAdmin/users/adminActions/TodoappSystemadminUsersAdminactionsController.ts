import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminUsersUserIdAdminActions } from "../../../../../providers/patchtodoAppSystemAdminUsersUserIdAdminActions";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

import { IPageITodoAppAdminAction } from "../../../../../api/structures/IPageITodoAppAdminAction";
import { ITodoAppAdminAction } from "../../../../../api/structures/ITodoAppAdminAction";

@Controller("/todoApp/systemAdmin/users/:userId/adminActions")
export class TodoappSystemadminUsersAdminactionsController {
  /**
   * Search administrative actions (todo_app_admin_actions) affecting a specific
   * user (admin-only).
   *
   * List administrative action records scoped to the user identified by
   * {userId} from the Prisma table todo_app_admin_actions. The schema describes
   * each record with admin_user_id (administrator actor), optional
   * target_user_id (the affected user), action key, reason and notes, success
   * flag, optional idempotency_key, and timestamps. This endpoint enables
   * governance reviews to understand what administrative operations have been
   * performed that involve the specified user as a target.
   *
   * Given the sensitivity, access is restricted to systemAdmin. The endpoint
   * supports pagination, filtering (e.g., by action, success, time ranges via
   * created_at), text search across reason/notes (as indexed by trigrams), and
   * sorting (commonly by created_at descending). Private Todo text is not
   * stored in this table and therefore not exposed by this API.
   *
   * Relationally, records reference todo_app_users both for the admin actor and
   * the optional target user. Validation includes verifying the path userId as
   * a valid UUID and enforcing pagination/sorting constraints. This operation
   * complements the audit logs endpoint and KPI/metrics endpoints, providing a
   * complete administrative audit surface for the user.
   *
   * @param connection
   * @param userId Target user's UUID used to scope administrative actions where
   *   the user is affected.
   * @param body Search, filter (e.g., action, success, date range), sort, and
   *   pagination parameters for admin actions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppAdminAction.IRequest,
  ): Promise<IPageITodoAppAdminAction> {
    try {
      return await patchtodoAppSystemAdminUsersUserIdAdminActions({
        systemAdmin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
