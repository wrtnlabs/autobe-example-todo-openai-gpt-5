import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminUsersUserIdSystemAdmins } from "../../../../../providers/patchtodoAppSystemAdminUsersUserIdSystemAdmins";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { gettodoAppSystemAdminUsersUserIdSystemAdminsSystemAdminId } from "../../../../../providers/gettodoAppSystemAdminUsersUserIdSystemAdminsSystemAdminId";

import { IPageITodoAppSystemAdmin } from "../../../../../api/structures/IPageITodoAppSystemAdmin";
import { ITodoAppSystemAdmin } from "../../../../../api/structures/ITodoAppSystemAdmin";

@Controller("/todoApp/systemAdmin/users/:userId/systemAdmins")
export class TodoappSystemadminUsersSystemadminsController {
  /**
   * Search and paginate systemAdmin role assignment history for a user
   * (todo_app_systemadmins).
   *
   * Retrieve a filtered, paginated list of systemAdmin role assignment history
   * records for the specified user. The Prisma schema for todo_app_systemadmins
   * describes a history of grant/revoke events for governance audits, not
   * user-editable and managed by administrators. Fields include id (UUID),
   * todo_app_user_id (FK to todo_app_users.id), granted_at, optional revoked_at
   * for end of assignment, created_at, updated_at, and a logical deletion
   * timestamp in deleted_at used for retention workflows.
   *
   * Security and permissions: Access is restricted to administrative users. The
   * provider must verify that the caller has systemAdmin privileges and enforce
   * isolation by constraining results to todo_app_user_id = {userId}.
   * Non-administrative users must not be allowed to enumerate another user’s
   * administrative role history.
   *
   * Database behavior and filters: Queries commonly order by granted_at
   * descending. Filters may target current active assignments (revoked_at is
   * null), or limit by granted_at/revoked_at date ranges to support audit
   * scope. Implementations typically exclude logically removed rows where
   * deleted_at is set. The schema’s indexes on (todo_app_user_id, granted_at)
   * and (granted_at, created_at) facilitate these access patterns.
   *
   * Validation and business logic: The endpoint is read-only and must not
   * mutate role assignments. The request body supports pagination (page,
   * pageSize), sorting (e.g., by granted_at), and filters like active-only or
   * bounded time windows.
   *
   * Related operations: Use GET /users/{userId}/systemAdmins/{systemAdminId} to
   * retrieve a single assignment record. Providers may pre-validate the parent
   * user exists via a user retrieval endpoint. Handle authorization errors for
   * insufficient privileges and return empty results when no matching records
   * exist.
   *
   * @param connection
   * @param userId Owner user’s ID whose systemAdmin role history is being
   *   listed.
   * @param body Search, filter, and pagination parameters for listing
   *   systemAdmin role assignments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppSystemAdmin.IRequest,
  ): Promise<IPageITodoAppSystemAdmin.ISummary> {
    try {
      return await patchtodoAppSystemAdminUsersUserIdSystemAdmins({
        systemAdmin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get one systemAdmin role assignment record for a user
   * (todo_app_systemadmins).
   *
   * Return a single historical systemAdmin role assignment entry from
   * todo_app_systemadmins for the specified user. Per the schema, this table
   * stores grant/revoke events over time for governance audits, is not
   * user-editable, and is managed by administrators. Fields include id (UUID),
   * todo_app_user_id (FK to todo_app_users.id), granted_at, optional
   * revoked_at, created_at, updated_at, and a logical deletion timestamp
   * deleted_at managed for retention.
   *
   * Security: Only administrative callers may access this detail view. The
   * provider must ensure the caller has systemAdmin privileges and that the
   * requested record’s todo_app_user_id equals {userId}. If the record does not
   * belong to the specified user or does not exist, respond with not-found
   * semantics without leaking cross-user details.
   *
   * Behavior and errors: This is a read-only operation. Implementations
   * generally exclude logically removed rows where deleted_at is set. Validate
   * UUID formats for both path parameters. For collection retrieval, use PATCH
   * /users/{userId}/systemAdmins.
   *
   * This endpoint is intended for administrative audits and governance
   * workflows that require precise visibility into when systemAdmin rights were
   * granted or revoked for a given account.
   *
   * @param connection
   * @param userId Owner user’s ID whose systemAdmin assignment record is
   *   queried.
   * @param systemAdminId Identifier of the systemAdmin role assignment record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemAdminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppSystemAdmin> {
    try {
      return await gettodoAppSystemAdminUsersUserIdSystemAdminsSystemAdminId({
        systemAdmin,
        userId,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
