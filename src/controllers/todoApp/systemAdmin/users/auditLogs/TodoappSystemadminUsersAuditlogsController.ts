import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminUsersUserIdAuditLogs } from "../../../../../providers/patchtodoAppSystemAdminUsersUserIdAuditLogs";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

import { IPageITodoAppAuditLog } from "../../../../../api/structures/IPageITodoAppAuditLog";
import { ITodoAppAuditLog } from "../../../../../api/structures/ITodoAppAuditLog";

@Controller("/todoApp/systemAdmin/users/:userId/auditLogs")
export class TodoappSystemadminUsersAuditlogsController {
  /**
   * Search audit logs (todo_app_audit_logs) for a specific user by path userId
   * (admin-only).
   *
   * Retrieve audit trail entries related to the user identified by {userId}
   * from the Prisma table todo_app_audit_logs. As documented in the schema,
   * each audit record includes actor_user_id (required), optional
   * target_user_id, a business action key (action), optional
   * resource_type/resource_id, success flag, and client context (ip,
   * user_agent) along with created_at. The endpoint should filter audit records
   * where the specified user is the actor and/or the target, depending on the
   * administrative query intent.
   *
   * Security considerations are paramount: audit logs are sensitive and
   * primarily for governance. In alignment with the requirements, access is
   * restricted to systemAdmin and should not expose private Todo content. The
   * endpoint supports pagination, search over action/resource fields,
   * time-range filtering (e.g., by created_at), success-state filtering, and
   * sorting (commonly by created_at descending).
   *
   * From a relational perspective, the records reference todo_app_users for
   * actor and target and may relate logically to other entities via
   * resource_type/resource_id without directly embedding their content.
   * Validation rules include enforcing a valid UUID for the path userId and
   * ensuring pagination limits remain within administrative policy. This
   * endpoint pairs with other administrative audit views and complements
   * KPI/metrics endpoints for a holistic operational picture.
   *
   * @param connection
   * @param userId Target user's UUID to scope audit log retrieval (actor and/or
   *   target).
   * @param body Search, filter (e.g., date range, action, success), sort, and
   *   pagination parameters for audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoAppAuditLog.IRequest,
  ): Promise<IPageITodoAppAuditLog> {
    try {
      return await patchtodoAppSystemAdminUsersUserIdAuditLogs({
        systemAdmin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
