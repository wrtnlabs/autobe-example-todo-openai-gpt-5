import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminUsers } from "../../../../providers/patchtodoAppSystemAdminUsers";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gettodoAppSystemAdminUsersUserId } from "../../../../providers/gettodoAppSystemAdminUsersUserId";

import { IPageITodoAppUser } from "../../../../api/structures/IPageITodoAppUser";
import { ITodoAppUser } from "../../../../api/structures/ITodoAppUser";

@Controller("/todoApp/systemAdmin/users")
export class TodoappSystemadminUsersController {
  /**
   * Search and paginate users (todo_app_users) for administration.
   *
   * Retrieve a filtered, paginated list of user accounts. The underlying Prisma
   * model todo_app_users stores core authentication/account fields: id (UUID),
   * email (unique), password_hash, status (e.g., pending_verification, active,
   * suspended, deactivated), email_verified, verified_at, last_login_at,
   * created_at, updated_at, and deleted_at. As described in the schema
   * comments, this table is central to access control and privacy boundaries
   * and is the parent for related profile and preference records.
   *
   * Security: Access to system-wide user listings must be restricted to the
   * systemAdmin role. This endpoint is for governance and operational views,
   * not for exposing private todo content. Summary response models MUST
   * explicitly exclude sensitive fields such as password_hash and any
   * token-related values. Business logic should ensure that logically removed
   * accounts (deleted_at set) are excluded unless explicitly requested by an
   * administrative filter.
   *
   * Filtering and sorting: Implement flexible criteria aligned to the
   * schemaâ€”email substring search using trigram indexes, exact or set-based
   * status filtering, booleans like email_verified, and time-range filters for
   * created_at and last_login_at. The operation should support pagination
   * (page, pageSize) with defaults aligned to business policy (commonly 20) and
   * sorting by created_at (default desc) or other permissible columns.
   * Validation should enforce reasonable page size bounds and ignore
   * unsupported fields.
   *
   * Related operations include retrieving a single user by ID for detailed
   * administrative review or updating account status via separate admin
   * workflows. On errors, return clear messages for invalid filters,
   * out-of-range pagination, or missing permissions.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination parameters for users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppUser.IRequest,
  ): Promise<IPageITodoAppUser.ISummary> {
    try {
      return await patchtodoAppSystemAdminUsers({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a user (todo_app_users) by ID.
   *
   * Get detailed information about a user account identified by UUID. The
   * Prisma table todo_app_users contains authentication-centric fields: email,
   * password_hash (never exposed in responses), status, email_verified,
   * verified_at, last_login_at, created_at, updated_at, and deleted_at. This
   * endpoint should return a representation that excludes sensitive secrets
   * while capturing business-relevant fields like status and verification
   * timestamps.
   *
   * Security: Only systemAdmin actors should be permitted to retrieve arbitrary
   * user records. Implementations must ensure that ownership checks are applied
   * for non-admin contexts (not applicable to this administrative endpoint). If
   * the target record has been logically removed (deleted_at set), return a
   * not-found outcome to avoid exposing retired identities.
   *
   * Relations and behavior: While the main entity is todo_app_users,
   * implementations may optionally enrich with adjacent information such as
   * user profile or preferences in read models; however, the canonical source
   * remains the users table. On errors, provide not-found for unknown ids, and
   * avoid disclosing whether a deleted account existed historically.
   *
   * @param connection
   * @param userId User's UUID to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppUser> {
    try {
      return await gettodoAppSystemAdminUsersUserId({
        systemAdmin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
