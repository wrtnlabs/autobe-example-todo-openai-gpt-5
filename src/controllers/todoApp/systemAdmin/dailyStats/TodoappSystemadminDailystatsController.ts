import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminDailyStats } from "../../../../providers/patchtodoAppSystemAdminDailyStats";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gettodoAppSystemAdminDailyStatsDailyStatId } from "../../../../providers/gettodoAppSystemAdminDailyStatsDailyStatId";

import { IPageITodoAppDailyStat } from "../../../../api/structures/IPageITodoAppDailyStat";
import { ITodoAppDailyStat } from "../../../../api/structures/ITodoAppDailyStat";

@Controller("/todoApp/systemAdmin/dailyStats")
export class TodoappSystemadminDailystatsController {
  /**
   * Search and paginate daily stats (mv_todo_app_daily_stats).
   *
   * This operation returns a paginated list of daily statistics from
   * mv_todo_app_daily_stats. Per the Prisma schema description, each row is a
   * read-optimized, denormalized snapshot for a calendar date (stats_date) that
   * includes todos_created, todos_completed, active_users, and a computed
   * completion_ratio, as well as refreshed_at timestamps indicating when the
   * materialized data was last refreshed. The rows also include created_at and
   * updated_at metadata used by the materialized cache layer and an optional
   * deleted_at that indicates an archived row in the cache.
   *
   * The endpoint is read-only and intended for administrative analytics and
   * dashboards. Because daily rollups can disclose service usage patterns,
   * access is restricted to the systemAdmin role. The request body
   * (ITodoAppDailyStat.IRequest) supports filtering by date ranges and sorting,
   * in addition to standard pagination controls. Implementations should exclude
   * rows where deleted_at is set from normal responses to maintain an accurate
   * active view.
   *
   * This endpoint is typically used with GET
   * /todoApp/systemAdmin/dailyStats/{dailyStatId} for detail retrieval of a
   * specific daily statistic row. Administrators first narrow down dates and
   * criteria via this search, and then use the detail endpoint to inspect a
   * single row’s metrics and refresh metadata.
   *
   * @param connection
   * @param body Search filters, date-range, sorting, and pagination for daily
   *   statistics.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppDailyStat.IRequest,
  ): Promise<IPageITodoAppDailyStat.ISummary> {
    try {
      return await patchtodoAppSystemAdminDailyStats({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a single daily stat (mv_todo_app_daily_stats) by ID.
   *
   * This operation fetches one row from mv_todo_app_daily_stats by its primary
   * key id (UUID). The view stores per-day rollups with fields such as
   * stats_date, todos_created, todos_completed, active_users, completion_ratio,
   * and refreshed_at, along with created_at and updated_at metadata. The model
   * is read-only and optimized for analytics; it does not expose any private
   * todo content.
   *
   * Access is limited to users with the systemAdmin role, as daily-level
   * activity and ratios can reveal operational usage. If the id does not match
   * an existing or active row (e.g., a row with deleted_at set is excluded),
   * the implementation should respond with not found behavior according to the
   * application’s conventions.
   *
   * Use in combination with PATCH /todoApp/systemAdmin/dailyStats to discover
   * candidate rows, then GET /todoApp/systemAdmin/dailyStats/{dailyStatId} to
   * inspect a particular day’s metrics and refresh information in detail.
   *
   * @param connection
   * @param dailyStatId Identifier of the daily statistics row (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dailyStatId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("dailyStatId")
    dailyStatId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppDailyStat> {
    try {
      return await gettodoAppSystemAdminDailyStatsDailyStatId({
        systemAdmin,
        dailyStatId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
