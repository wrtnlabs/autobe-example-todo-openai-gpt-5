import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoAppSystemAdminKpiCounters } from "../../../../providers/patchtodoAppSystemAdminKpiCounters";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gettodoAppSystemAdminKpiCountersKpiCounterId } from "../../../../providers/gettodoAppSystemAdminKpiCountersKpiCounterId";

import { IPageITodoAppKpiCounter } from "../../../../api/structures/IPageITodoAppKpiCounter";
import { ITodoAppKpiCounter } from "../../../../api/structures/ITodoAppKpiCounter";

@Controller("/todoApp/systemAdmin/kpiCounters")
export class TodoappSystemadminKpicountersController {
  /**
   * Search KPI window snapshots from Prisma table mv_todo_app_kpi_counters
   * (admin-only).
   *
   * Retrieve KPI counter windows for administrative insight from the Prisma
   * table mv_todo_app_kpi_counters. According to the schema comments, this
   * materialized view contains read-optimized, denormalized indicators over
   * sliding or fixed windows with fields including window_start, window_end,
   * todos_created, todos_completed, active_users, and optionally
   * avg_time_to_complete_hours and p95_completion_time_hours. These rows are
   * refreshed from base sources like todo_app_aggregated_metrics and are
   * designed for monitoring dashboards rather than transactional use.
   *
   * Security and authorization align with the business requirements stating
   * that aggregated service metrics are accessible to administrators, not
   * routine end users. Therefore, only systemAdmin should invoke this endpoint.
   * The payload must not expose private Todo text; only numeric counts and
   * high-level indicators are returned. Because the underlying table is
   * read-only, no creation, update, or deletion is allowed through this API.
   *
   * From a data relationship perspective, mv_todo_app_kpi_counters is derived
   * from non-PII sources such as aggregated metrics and event streams,
   * preserving historical KPI snapshots. Typical validation includes ensuring a
   * valid chronological range (window_start < window_end) when provided, and
   * limiting page size to administrator-configured bounds. Errors are returned
   * for invalid time ranges or unsupported sort keys. Related endpoints include
   * the detail retrieval GET /todoApp/systemAdmin/kpiCounters/{kpiCounterId}
   * for fetching a single snapshot row by its identifier.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination parameters for KPI window
   *   snapshots (e.g., window range, sort, page).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ITodoAppKpiCounter.IRequest,
  ): Promise<IPageITodoAppKpiCounter> {
    try {
      return await patchtodoAppSystemAdminKpiCounters({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single KPI window snapshot from Prisma table mv_todo_app_kpi_counters
   * by ID (admin-only).
   *
   * Return a single KPI counter window row from mv_todo_app_kpi_counters by its
   * identifier. Per the Prisma schema, each row captures metrics for a defined
   * window with fields like window_start, window_end, todos_created,
   * todos_completed, active_users, and optional latency aggregates. This
   * endpoint is intended for administrative review where a specific KPI record
   * needs inspection.
   *
   * Access is restricted to systemAdmin per the business requirements for
   * aggregated service metrics visibility. The endpoint is purely read-only
   * against the materialized view and does not alter any underlying data.
   * Expected validation includes checking that the provided identifier is a
   * valid UUID and exists. If no row is found for the given id, the API should
   * return a not-found response without exposing internal implementation
   * details.
   *
   * This detail retrieval complements the collection search at PATCH
   * /todoApp/systemAdmin/kpiCounters, allowing dashboards to drill into a
   * single KPI window when needed.
   *
   * @param connection
   * @param kpiCounterId Identifier of the KPI window snapshot row to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":kpiCounterId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("kpiCounterId")
    kpiCounterId: string & tags.Format<"uuid">,
  ): Promise<ITodoAppKpiCounter> {
    try {
      return await gettodoAppSystemAdminKpiCountersKpiCounterId({
        systemAdmin,
        kpiCounterId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
