import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoMvpUserUsersUserId } from "../../../../providers/getTodoMvpUserUsersUserId";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";

import { ITodoMvpUser } from "../../../../api/structures/ITodoMvpUser";

@Controller("/todoMvp/user/users/:userId")
export class TodomvpUserUsersController {
  /**
   * Get a user (todo_mvp_users) by ID.
   *
   * This endpoint returns one user record from the Prisma model todo_mvp_users
   * using the provided userId. The schema defines fields including id, email
   * (unique within users), password_hash (never exposed to clients), status
   * (e.g., "active" or "deactivated" for lifecycle control), and timestamps
   * (created_at, updated_at, and deleted_at for account lifecycle workflows).
   * Relations include arrays to todo_mvp_sessions, todo_mvp_todos, and
   * todo_mvp_audit_events, which are not directly returned here but inform
   * ownership and activity elsewhere in the system.
   *
   * Security and permissions: The caller must be authenticated. Implementations
   * should enforce owner-only access for standard user contexts, ensuring a
   * user can retrieve only their own record. Administrative reads of user
   * profiles, if enabled by policy, should be implemented with appropriate
   * guardrails and auditing.
   *
   * Validation and behavior: The path parameter userId must be a valid UUID. On
   * success, the response returns ITodoMvpUser, excluding sensitive fields
   * (e.g., password_hash remains server-side). If the user does not exist or is
   * not accessible, the server should provide a not found outcome. This
   * endpoint can be used alongside session and Todo operations to present a
   * coherent account view.
   *
   * @param connection
   * @param userId Identifier of the user to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoMvpUser> {
    try {
      return await getTodoMvpUserUsersUserId({
        user,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
