import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoMvpAdminComplianceRemovalRecords } from "../../../../providers/patchTodoMvpAdminComplianceRemovalRecords";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getTodoMvpAdminComplianceRemovalRecordsComplianceRemovalRecordId } from "../../../../providers/getTodoMvpAdminComplianceRemovalRecordsComplianceRemovalRecordId";

import { IPageITodoMvpComplianceRemovalRecord } from "../../../../api/structures/IPageITodoMvpComplianceRemovalRecord";
import { ITodoMvpComplianceRemovalRecord } from "../../../../api/structures/ITodoMvpComplianceRemovalRecord";

@Controller("/todoMvp/admin/complianceRemovalRecords")
export class TodomvpAdminComplianceremovalrecordsController {
  /**
   * List/search compliance removal records from
   * todo_mvp_compliance_removal_records (admin).
   *
   * Return compliance removal records kept in
   * todo_mvp_compliance_removal_records. The schema defines id (UUID primary
   * key), optional todo_mvp_admin_id (acting admin), optional todo_mvp_todo_id
   * (removed Todo reference), reason_code (e.g., "policy_violation",
   * "legal_request", "user_request_via_admin"), optional notes (must not
   * contain Todo content), action_effective_at, created_at, updated_at, and
   * optional deleted_at for lifecycle/retention control.
   *
   * Security and permissions: Only administrators may access this endpoint. The
   * dataset supports oversight and compliance workflows and must not reveal
   * user Todo content, which is not present in the model by design.
   *
   * Query behavior and validation: The request body
   * (ITodoMvpComplianceRemovalRecord.IRequest) should allow pagination,
   * filtering by acting admin, by removed Todo reference, by reason_code, and
   * by action_effective_at ranges, as well as sorting (e.g., created_at or
   * action_effective_at). The response returns a paginated list container
   * (IPageITodoMvpComplianceRemovalRecord). Validate UUID formats and constrain
   * sort fields to supported columns.
   *
   * Related operations: No write APIs are exposed for these records in
   * accordance with system-generated data principles. Records are created by
   * administrative workflows within provider logic.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for compliance
   *   removal records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoMvpComplianceRemovalRecord.IRequest,
  ): Promise<IPageITodoMvpComplianceRemovalRecord> {
    try {
      return await patchTodoMvpAdminComplianceRemovalRecords({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a compliance removal record (todo_mvp_compliance_removal_records) by
   * ID.
   *
   * This endpoint returns a single administrative compliance removal record
   * identified by its ID. The underlying Prisma model
   * todo_mvp_compliance_removal_records is documented as a “Minimal,
   * privacy-preserving record” that captures when an administrator removes a
   * Todo for policy or legal reasons. Fields include reason_code for a
   * high-level cause, optional notes that must not contain user Todo content,
   * and action_effective_at to indicate when the removal took effect for the
   * user. References to the acting administrator (todo_mvp_admin_id) and the
   * removed Todo (todo_mvp_todo_id) are nullable to preserve the record’s
   * integrity even after entity deletion. The model also records created_at and
   * updated_at timestamps, with deleted_at used for retention and lifecycle
   * control.
   *
   * Security and permissions: Access is restricted to administrative actors.
   * The record is intended for oversight and compliance verification; it must
   * not reveal Todo content. Implementations should verify that the caller has
   * administrative privileges and, where applicable, limit visibility to the
   * minimum required set of fields for operational needs.
   *
   * Entity relationships: The record may relate to todo_mvp_admins (actorAdmin)
   * and todo_mvp_todos (removedTodo) via nullable foreign keys. Because these
   * references may be null (for example, after the Todo is removed), clients
   * must not assume presence of related entity details and should rely on the
   * record’s own fields for compliance proofs.
   *
   * Validation and behavior: The path parameter complianceRemovalRecordId must
   * be a valid UUID. If the record does not exist or is not accessible under
   * current policy, the server should respond with an appropriate not found
   * outcome. Since this is a read-only operation, no request body is required.
   * This operation may be used alongside audit event retrieval to corroborate
   * broader timelines (e.g., todo_mvp_audit_events with event_type such as
   * "todo_deleted").
   *
   * @param connection
   * @param complianceRemovalRecordId Identifier of the compliance removal
   *   record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceRemovalRecordId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("complianceRemovalRecordId")
    complianceRemovalRecordId: string & tags.Format<"uuid">,
  ): Promise<ITodoMvpComplianceRemovalRecord> {
    try {
      return await getTodoMvpAdminComplianceRemovalRecordsComplianceRemovalRecordId(
        {
          admin,
          complianceRemovalRecordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
