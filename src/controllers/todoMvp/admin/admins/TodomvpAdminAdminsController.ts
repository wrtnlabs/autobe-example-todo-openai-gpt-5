import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoMvpAdminAdminsAdminId } from "../../../../providers/getTodoMvpAdminAdminsAdminId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ITodoMvpAdmin } from "../../../../api/structures/ITodoMvpAdmin";

@Controller("/todoMvp/admin/admins/:adminId")
export class TodomvpAdminAdminsController {
  /**
   * Get administrator detail from Prisma table todo_mvp_admins by ID.
   *
   * Fetch an administrator account from the todo_mvp_admins table using its id
   * path parameter. The Prisma schema defines administrators with a unique
   * email, hashed credentials (password_hash), lifecycle status, and timestamp
   * fields (created_at, updated_at). A deleted_at timestamp indicates the
   * record is no longer in active use and typical reads may exclude such
   * records depending on provider policy. Administrators are modeled separately
   * from todo_mvp_users to maintain clear authorization boundaries and to
   * support limited oversight capabilities as described in the requirements.
   *
   * Security and permissions: this operation is restricted to authenticated
   * administrative actors. Providers must verify that the requester has the
   * appropriate administrative role before revealing administrator metadata.
   * The response must never include sensitive secrets such as password_hash.
   * Access to records considered inactive by lifecycle state may be restricted
   * based on business policy.
   *
   * Database relationships: todo_mvp_admins connects to session records
   * (todo_mvp_sessions), audit entries (todo_mvp_audit_events), and compliance
   * removal records (todo_mvp_compliance_removal_records). These relations
   * enable operational oversight and accountability without exposing user
   * content. Indexes facilitate queries by status and creation time for
   * administrative tools.
   *
   * Expected behavior and errors: when the adminId is not a valid UUID or the
   * record does not exist or is not accessible due to lifecycle state,
   * providers should return a not-found outcome consistent with platform
   * conventions. Unauthorized requests must be denied. This detail retrieval is
   * typically used alongside administrative list/search endpoints (not shown
   * here) within management interfaces.
   *
   * @param connection
   * @param adminId Unique identifier of the administrator to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<ITodoMvpAdmin> {
    try {
      return await getTodoMvpAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
