import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTodoUserEmailVerify } from "../../../../../providers/postauthTodoUserEmailVerify";

import { ITodoAppEmailVerification } from "../../../../../api/structures/ITodoAppEmailVerification";
import { ITodoAppTodoUserEmailVerification } from "../../../../../api/structures/ITodoAppTodoUserEmailVerification";

@Controller("/auth/todoUser/email/verify")
export class AuthTodouserEmailVerifyController {
  /**
   * Verify email using todo_app_email_verifications and update todo_app_users
   * verification fields.
   *
   * Purpose and functionality: Confirms email ownership by validating a token
   * stored as todo_app_email_verifications.token_hash with expiry enforced by
   * expires_at. On success, updates the user’s todo_app_users.email_verified to
   * true and stamps verified_at. This supports policies that require
   * verification prior to login.
   *
   * Implementation details: Looks up the record by the provided token (mapped
   * to token_hash), ensures not expired (expires_at) and not already consumed
   * (consumed_at null), then sets consumed_at and optionally consumed_by_ip.
   * Updates the linked user’s lifecycle, potentially transitioning
   * todo_app_users.status from a pending state to an active state as allowed by
   * governance.
   *
   * Role-specific integration: Applies to the todoUser pathway. No role guard
   * is required for token consumption; identity is proven by the verification
   * token itself.
   *
   * Security considerations: The raw token should not be stored; only
   * token_hash is persisted. Multiple failed attempts may be reflected by
   * failure_count in todo_app_email_verifications. The endpoint should avoid
   * leaking whether a given email exists beyond token possession.
   *
   * Related operations: Registration issues or schedules a verification entry
   * in todo_app_email_verifications. Login may enforce that
   * todo_app_users.email_verified is true depending on policy.
   *
   * @param connection
   * @param body Verification payload carrying the email verification token.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ITodoAppTodoUserEmailVerification.IConsume,
  ): Promise<ITodoAppEmailVerification> {
    try {
      return await postauthTodoUserEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
