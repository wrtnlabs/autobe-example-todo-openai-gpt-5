import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTodoUserSessionsRevokeOthers } from "../../../../../providers/postauthTodoUserSessionsRevokeOthers";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";

import { ITodoAppSession } from "../../../../../api/structures/ITodoAppSession";

@Controller("/auth/todoUser/sessions/revokeOthers")
export class AuthTodouserSessionsRevokeothersController {
  /**
   * Revoke other sessions for the authenticated todoUser by updating
   * todo_app_sessions and related refresh tokens.
   *
   * Purpose and functionality: Security operation for a todoUser to end active
   * sessions on other devices/browsers. Iterates through todo_app_sessions for
   * the user, excluding the current session, and sets revoked_at with a
   * consistent revoked_reason (e.g., "user_revoke_others"). Inserts one
   * todo_app_session_revocations record per revoked session.
   *
   * Implementation details: For each affected session, also mark related
   * todo_app_refresh_tokens as revoked_at with an appropriate revoked_reason.
   * The endpoint returns success after best-effort revocation.
   *
   * Role-specific integration: Requires an authenticated todoUser; applies only
   * to their own sessions.
   *
   * Security considerations: Ensure the current session remains valid unless
   * policy dictates otherwise. Avoid disclosing details of other sessions to
   * the caller beyond acknowledgment of revocation.
   *
   * Related operations: Pair with change password for comprehensive account
   * security, and with logout for ending the current device session.
   *
   * @param connection
   * @param body Optional payload to filter which sessions to revoke; when
   *   empty, revokes all others.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async revokeOtherSessions(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedBody()
    body: ITodoAppSession.IRevokeOthers,
  ): Promise<void> {
    try {
      return await postauthTodoUserSessionsRevokeOthers({
        todoUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
