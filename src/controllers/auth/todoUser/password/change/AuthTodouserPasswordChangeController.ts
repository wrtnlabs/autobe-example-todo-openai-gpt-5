import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putauthTodoUserPasswordChange } from "../../../../../providers/putauthTodoUserPasswordChange";
import { TodouserAuth } from "../../../../../decorators/TodouserAuth";
import { TodouserPayload } from "../../../../../decorators/payload/TodouserPayload";

import { ITodoAppPasswordChange } from "../../../../../api/structures/ITodoAppPasswordChange";
import { ITodoAppTodoUserPassword } from "../../../../../api/structures/ITodoAppTodoUserPassword";

@Controller("/auth/todoUser/password/change")
export class AuthTodouserPasswordChangeController {
  /**
   * Change password for authenticated todoUser by updating
   * todo_app_users.password_hash and revoking other sessions.
   *
   * Purpose and functionality: Authenticated password change for a todoUser.
   * Verifies the provided current credential against
   * todo_app_users.password_hash before updating to a new hash. Updates
   * todo_app_users.updated_at as appropriate.
   *
   * Implementation details: On success, creates revocations for other sessions
   * in todo_app_sessions (setting revoked_at/revoked_reason and adding a single
   * todo_app_session_revocations row per session as per unique constraint) and
   * revokes outstanding todo_app_refresh_tokens by setting revoked_at. The
   * current session may remain or also be rotated depending on policy.
   *
   * Role-specific integration: Requires an authenticated todoUser; access is
   * controlled through the role guard, not public token possession.
   *
   * Security considerations: Enforce strong password policy before updating the
   * hash. Avoid disclosing whether the current password matched beyond a
   * generic failure response. Consider appending an audit record in
   * todo_app_audit_logs with action="change_password".
   *
   * Related operations: Users may use logout or revoke other sessions endpoints
   * to proactively manage sessions; login and refresh continue to operate
   * normally with the new credential.
   *
   * @param connection
   * @param body Change password payload including current and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @TodouserAuth()
    todoUser: TodouserPayload,
    @TypedBody()
    body: ITodoAppTodoUserPassword.IChange,
  ): Promise<ITodoAppPasswordChange> {
    try {
      return await putauthTodoUserPasswordChange({
        todoUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
