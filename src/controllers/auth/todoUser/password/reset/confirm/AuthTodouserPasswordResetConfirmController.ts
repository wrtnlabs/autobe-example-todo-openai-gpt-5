import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTodoUserPasswordResetConfirm } from "../../../../../../providers/postauthTodoUserPasswordResetConfirm";

import { ITodoAppPasswordReset } from "../../../../../../api/structures/ITodoAppPasswordReset";
import { ITodoAppTodoUserPasswordReset } from "../../../../../../api/structures/ITodoAppTodoUserPasswordReset";

@Controller("/auth/todoUser/password/reset/confirm")
export class AuthTodouserPasswordResetConfirmController {
  /**
   * Confirm password reset using todo_app_password_resets; update
   * todo_app_users.password_hash and revoke sessions.
   *
   * Purpose and functionality: Confirms a password reset using the one-time
   * token stored in todo_app_password_resets. Validates expiry (expires_at) and
   * ensures the token has not been used (consumed_at is null). On success,
   * updates the associated userâ€™s todo_app_users.password_hash with a new hash
   * and stamps consumed_at.
   *
   * Implementation details: For security, any active todo_app_sessions for the
   * user should be revoked (setting revoked_at and optionally inserting a
   * todo_app_session_revocations row) and all relevant todo_app_refresh_tokens
   * should be marked revoked_at with revoked_reason reflecting the reset. This
   * forces re-authentication using the new credential.
   *
   * Role-specific integration: This is a public endpoint; identity is proven by
   * possession of a valid reset token.
   *
   * Security considerations: Do not disclose whether the email exists; operate
   * solely based on the token. Ensure strong password policy validation before
   * updating todo_app_users.password_hash.
   *
   * Related operations: After completion, the user may proceed to login. Failed
   * or expired tokens should lead to a new request via the reset request
   * endpoint.
   *
   * @param connection
   * @param body Reset confirmation payload carrying token and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: ITodoAppTodoUserPasswordReset.IConfirm,
  ): Promise<ITodoAppPasswordReset.ICompleted> {
    try {
      return await postauthTodoUserPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
