import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTodoUserPasswordResetRequest } from "../../../../../../providers/postauthTodoUserPasswordResetRequest";

import { ITodoAppPasswordReset } from "../../../../../../api/structures/ITodoAppPasswordReset";
import { ITodoAppTodoUserPasswordReset } from "../../../../../../api/structures/ITodoAppTodoUserPasswordReset";

@Controller("/auth/todoUser/password/reset/request")
export class AuthTodouserPasswordResetRequestController {
  /**
   * Request password reset by inserting into todo_app_password_resets with
   * privacy-preserving behavior.
   *
   * Purpose and functionality: Starts the password reset process without
   * revealing account existence. Inserts a row into todo_app_password_resets
   * with email, requested_at, expires_at, and token_hash (token is not stored
   * in plaintext). If the email maps to an account, todo_app_user_id is
   * populated; otherwise it remains null, preserving privacy.
   *
   * Implementation details: Generates a secure token, stores token_hash and
   * expiry in todo_app_password_resets, and may capture requested_by_ip. No
   * immediate change is made to todo_app_users; completion occurs via the
   * confirm endpoint.
   *
   * Role-specific integration: Publicly accessible to guest or signed-out
   * members; not guarded by role.
   *
   * Security considerations: The response should be an acknowledgment without
   * indicating whether email exists. Rate limiting can be supported using
   * todo_app_ip_rate_counters or todo_app_user_rate_counters as policy
   * dictates.
   *
   * Related operations: The confirm endpoint consumes the token and updates the
   * userâ€™s todo_app_users.password_hash. Login attempts may subsequently
   * succeed using the new credential.
   *
   * @param connection
   * @param body Password reset request payload carrying the email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ITodoAppTodoUserPasswordReset.IRequest,
  ): Promise<ITodoAppPasswordReset.IRequested> {
    try {
      return await postauthTodoUserPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
