import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminPasswordResetRequest } from "../../../../../../providers/postauthSystemAdminPasswordResetRequest";

import { ITodoAppSystemAdminPasswordResetRequestResult } from "../../../../../../api/structures/ITodoAppSystemAdminPasswordResetRequestResult";
import { ITodoAppSystemAdminPasswordResetRequest } from "../../../../../../api/structures/ITodoAppSystemAdminPasswordResetRequest";

@Controller("/auth/systemAdmin/password/reset/request")
export class AuthSystemadminPasswordResetRequestController {
  /**
   * Record password reset request for admin in todo_app_password_resets.
   *
   * This endpoint accepts an email and creates a password reset request in
   * todo_app_password_resets. The schema supports privacy-preserving flows by
   * allowing todo_app_user_id to be null; therefore, responses should not
   * disclose whether the email maps to an existing account.
   *
   * A reset token row is created with token_hash, requested_at, expires_at, and
   * optional requested_by_ip for auditability. No changes are made to
   * todo_app_users at this stage. The endpoint does not access private todo
   * content.
   *
   * This operation pairs with the reset confirmation endpoint that will
   * validate the token and update the userâ€™s password_hash. It is also related
   * to login and account status controls in the todo_app_users table.
   *
   * Errors include excessive requests that may be mitigated through rate
   * limiting (e.g., via todo_app_rate_limits-related counters) and invalid
   * email formats per business validation.
   *
   * All behavior aligns with schema fields; no plaintext tokens or passwords
   * are stored in database records.
   *
   * @param connection
   * @param body Password reset request payload for an admin (email only).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ITodoAppSystemAdminPasswordResetRequest.ICreate,
  ): Promise<ITodoAppSystemAdminPasswordResetRequestResult> {
    try {
      return await postauthSystemAdminPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
