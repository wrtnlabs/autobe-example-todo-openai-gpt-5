import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminPasswordResetConfirm } from "../../../../../../providers/postauthSystemAdminPasswordResetConfirm";

import { ITodoAppSystemAdminPasswordResetConfirmResult } from "../../../../../../api/structures/ITodoAppSystemAdminPasswordResetConfirmResult";
import { ITodoAppSystemAdminPasswordResetConfirm } from "../../../../../../api/structures/ITodoAppSystemAdminPasswordResetConfirm";

@Controller("/auth/systemAdmin/password/reset/confirm")
export class AuthSystemadminPasswordResetConfirmController {
  /**
   * Confirm password reset using todo_app_password_resets and update
   * todo_app_users.password_hash.
   *
   * This endpoint validates a reset token tracked in todo_app_password_resets
   * using token_hash and expiry constraints (expires_at). On success, the
   * userâ€™s todo_app_users.password_hash is updated, and the reset token record
   * is marked used by setting consumed_at. It does not expose whether the email
   * belonged to an account during the request phase.
   *
   * Following a password change, existing refresh/session artifacts can be
   * invalidated by revoking sessions in todo_app_sessions and their chains in
   * todo_app_refresh_tokens according to policy. The application may also
   * record a revocation event in todo_app_session_revocations for
   * auditability.
   *
   * This operation is closely related to login (which should now require the
   * new password) and to session revocation routines. It does not interact with
   * private todo entities.
   *
   * Errors include expired or already-consumed tokens, or policy violations for
   * new password strength. All activities should be recorded as business/audit
   * events as appropriate but are driven by the fields detailed in the schema.
   *
   * The implementation must avoid storing plaintext passwords, strictly
   * updating password_hash in todo_app_users.
   *
   * @param connection
   * @param body Password reset confirmation payload with token and new
   *   password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: ITodoAppSystemAdminPasswordResetConfirm.ICreate,
  ): Promise<ITodoAppSystemAdminPasswordResetConfirmResult> {
    try {
      return await postauthSystemAdminPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
