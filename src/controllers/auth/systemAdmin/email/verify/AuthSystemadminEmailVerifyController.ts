import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminEmailVerify } from "../../../../../providers/postauthSystemAdminEmailVerify";

import { ITodoAppSystemAdminEmailVerificationResult } from "../../../../../api/structures/ITodoAppSystemAdminEmailVerificationResult";
import { ITodoAppSystemAdminEmailVerification } from "../../../../../api/structures/ITodoAppSystemAdminEmailVerification";

@Controller("/auth/systemAdmin/email/verify")
export class AuthSystemadminEmailVerifyController {
  /**
   * Verify admin email via todo_app_email_verifications and update
   * todo_app_users.
   *
   * This endpoint consumes a verification token tracked in
   * todo_app_email_verifications, which includes token_hash, target_email,
   * expires_at, and consumed_at. Upon successful verification within expiry,
   * the service updates the user’s todo_app_users row by setting email_verified
   * to true and verified_at to the verification time.
   *
   * Because verification is a pre-auth step for many flows, this endpoint is
   * public and does not require an authenticated session. It strictly operates
   * on email verification artifacts, not on private todo content.
   *
   * The token record in todo_app_email_verifications is marked consumed by
   * setting consumed_at, and may also be correlated with client context like
   * consumed_by_ip for auditability per the schema.
   *
   * This operation is related to registration (join) and login. If an account’s
   * status or email verification is required by policy before login is allowed,
   * this endpoint completes that prerequisite.
   *
   * Errors include invalid or expired tokens (validated using expires_at),
   * already consumed tokens (consumed_at), or mismatched target_email. No
   * changes are made to unrelated entities.
   *
   * @param connection
   * @param body Email verification token consumption payload.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async verifyEmail(
    @TypedBody()
    body: ITodoAppSystemAdminEmailVerification.ICreate,
  ): Promise<ITodoAppSystemAdminEmailVerificationResult> {
    try {
      return await postauthSystemAdminEmailVerify({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
