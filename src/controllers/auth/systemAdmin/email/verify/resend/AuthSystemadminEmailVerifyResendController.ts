import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminEmailVerifyResend } from "../../../../../../providers/postauthSystemAdminEmailVerifyResend";

import { ITodoAppSystemAdminEmailVerificationResendResult } from "../../../../../../api/structures/ITodoAppSystemAdminEmailVerificationResendResult";
import { ITodoAppSystemAdminEmailVerificationResend } from "../../../../../../api/structures/ITodoAppSystemAdminEmailVerificationResend";

@Controller("/auth/systemAdmin/email/verify/resend")
export class AuthSystemadminEmailVerifyResendController {
  /**
   * Resend admin verification email using todo_app_email_verifications.
   *
   * This endpoint initiates an email verification resend by inserting a new row
   * into todo_app_email_verifications for the target user, setting token_hash,
   * target_email, sent_at, and expires_at based on policy. It does not alter
   * existing todo_app_users fields besides potentially leaving status as-is.
   *
   * Resend is typically allowed before email_verified becomes true in
   * todo_app_users. The system ensures previous tokens can remain tracked while
   * a new token is issued, preserving history and rate-limiting risk.
   *
   * This endpoint is public from an authentication standpoint but should
   * enforce controls like rate limits (potentially via todo_app_rate_limits and
   * counters) to prevent abuse.
   *
   * It is closely related to join and verify email, forming a complete
   * verification workflow. The endpoint does not access private todo content.
   *
   * Errors include attempts to resend for accounts that are already verified or
   * lack of a corresponding account, which should be handled in a
   * privacy-preserving manner.
   *
   * @param connection
   * @param body Resend verification request payload.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resendVerificationEmail(
    @TypedBody()
    body: ITodoAppSystemAdminEmailVerificationResend.ICreate,
  ): Promise<ITodoAppSystemAdminEmailVerificationResendResult> {
    try {
      return await postauthSystemAdminEmailVerifyResend({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
