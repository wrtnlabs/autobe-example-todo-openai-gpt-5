import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestVisitorEmailVerifyResend } from "../../../../../../providers/postauthGuestVisitorEmailVerifyResend";

import { ITodoAppEmailVerification } from "../../../../../../api/structures/ITodoAppEmailVerification";

@Controller("/auth/guestVisitor/email/verify/resend")
export class AuthGuestvisitorEmailVerifyResendController {
  /**
   * Insert new todo_app_email_verifications row and trigger delivery for
   * verification.
   *
   * This operation generates a new verification entry in
   * todo_app_email_verifications for the provided email address or user
   * context. The record sets target_email, token_hash (derived from an opaque
   * token), sent_at, and expires_at based on policy. For repeated failures,
   * failure_count can support rate-limiting and diagnostics as indicated by the
   * schema fields.
   *
   * No session is required to use this endpoint, and responses remain generic
   * so as not to reveal whether a matching account exists. The underlying
   * todo_app_users record will be updated later by the verification
   * confirmation endpoint to set email_verified and verified_at.
   *
   * Security considerations include applying rate limits and ensuring that
   * token values are generated with sufficient entropy and persisted only as
   * token_hash. The endpoint does not modify todo_app_users directly and avoids
   * exposing sensitive internal details.
   *
   * This operation is typically used after the guest join flow when a
   * verification email failed to arrive or expired, and it pairs with the
   * verification confirmation endpoint. It is independent of session state.
   *
   * Errors include invalid input and policy-based throttling for excessive
   * requests.
   *
   * @param connection
   * @param body Resend verification request payload (email or user hint per
   *   policy).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resendVerification(
    @TypedBody()
    body: ITodoAppEmailVerification.IResendRequest,
  ): Promise<ITodoAppEmailVerification.ISummary> {
    try {
      return await postauthGuestVisitorEmailVerifyResend({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
