import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestVisitorPasswordResetRequest } from "../../../../../../providers/postauthGuestVisitorPasswordResetRequest";

import { ITodoAppPasswordReset } from "../../../../../../api/structures/ITodoAppPasswordReset";

@Controller("/auth/guestVisitor/password/reset/request")
export class AuthGuestvisitorPasswordResetRequestController {
  /**
   * Create a todo_app_password_resets record to begin reset without revealing
   * account existence.
   *
   * This operation creates a password reset request represented by
   * todo_app_password_resets. The record stores the provided email, a generated
   * token_hash (derived from an opaque token that is never persisted in
   * plaintext), requested_at for audit trail, expires_at to bound validity, and
   * optional context such as requested_by_ip. When the email maps to an
   * existing account, todo_app_user_id may be set per schema; otherwise it
   * remains null for privacy.
   *
   * No authentication is required for this initiation, and the endpoint must
   * not reveal whether a user account exists for the submitted email,
   * consistent with the privacy-preserving intent of the schema. Subsequent
   * verification steps will use the stored token_hash and expiry constraints.
   * The operation does not modify todo_app_users; it only records a reset
   * intent and triggers delivery of instructions out-of-band.
   *
   * Security considerations include enforcing reasonable rate limits at the
   * business layer and ensuring the token values are generated with sufficient
   * entropy and stored only as token_hash. The endpoint records only metadata
   * specified by the schema and avoids sensitive content in status messages.
   *
   * This request should be followed by the password reset confirmation endpoint
   * that consumes the token and updates the credential on todo_app_users. It
   * can be used regardless of whether the account is currently a guestVisitor
   * or another role, as it targets the email address and not a session.
   *
   * Errors are limited to input validation and process acceptance; responses
   * should be uniform to avoid disclosing account existence, aligning to the
   * fields and purpose of todo_app_password_resets.
   *
   * @param connection
   * @param body Password reset initiation payload (email and optional client
   *   metadata).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ITodoAppPasswordReset.IRequest,
  ): Promise<ITodoAppPasswordReset.ISummary> {
    try {
      return await postauthGuestVisitorPasswordResetRequest({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
