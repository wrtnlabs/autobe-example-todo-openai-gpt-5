import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestVisitorPasswordResetConfirm } from "../../../../../../providers/postauthGuestVisitorPasswordResetConfirm";

import { ITodoAppPasswordReset } from "../../../../../../api/structures/ITodoAppPasswordReset";

@Controller("/auth/guestVisitor/password/reset/confirm")
export class AuthGuestvisitorPasswordResetConfirmController {
  /**
   * Consume todo_app_password_resets and apply new
   * todo_app_users.password_hash.
   *
   * This operation completes the password reset workflow by validating a reset
   * token against todo_app_password_resets (matching token_hash, within
   * expires_at) and marking it consumed via consumed_at. Upon successful
   * validation, the user's credential is updated by setting a new password_hash
   * on todo_app_users and updating updated_at. Implementations may also update
   * last_login_at if automatic sign-in is performed, but this is
   * policy-dependent and not required by the schema.
   *
   * The operation is unauthenticated and must avoid leaking information about
   * whether a token corresponds to a specific account beyond the
   * success/failure of the reset itself. The schema provides email and optional
   * todo_app_user_id to associate the request, but messages remain
   * privacy-preserving.
   *
   * Security constraints include enforcing token single-use semantics via
   * consumed_at, honoring expires_at, and ensuring that only password_hash is
   * persisted (no plaintext). If the process also establishes a session,
   * todo_app_sessions may be inserted with issued_at, expires_at, ip, and
   * user_agent; otherwise, the user will authenticate later using standard
   * flows.
   *
   * This endpoint follows the reset initiation operation and is related to
   * verification and refresh operations for subsequent sign-in continuity.
   * Errors include invalid or expired tokens and input validation for the new
   * credential.
   *
   * On success, the response returns a summary reflecting completion details
   * without exposing raw tokens or secrets, aligning to fields available in
   * todo_app_password_resets and the updated todo_app_users record.
   *
   * @param connection
   * @param body Password reset confirmation payload (token and new credential).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @TypedBody()
    body: ITodoAppPasswordReset.IConfirm,
  ): Promise<ITodoAppPasswordReset.ISummary> {
    try {
      return await postauthGuestVisitorPasswordResetConfirm({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
