import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoMvpSession } from "../../../../structures/ITodoMvpSession";
import { IPageITodoMvpSession } from "../../../../structures/IPageITodoMvpSession";

/**
 * Search and paginate sessions (todo_mvp_sessions) with filters and sorting.
 *
 * This operation returns a paginated list of session records from the Prisma
 * model todo_mvp_sessions. The schema describes sessions as system-managed
 * artifacts that represent authenticated states for users or admins. Key fields
 * include session_token_hash (unique identifier for the session, not the raw
 * token), timestamps for lifecycle control (created_at, updated_at,
 * last_accessed_at, expires_at), and revoked_at to indicate explicit sign-out.
 * Foreign keys todo_mvp_user_id or todo_mvp_admin_id are nullable to
 * accommodate distinct actor types, with relationships to todo_mvp_users and
 * todo_mvp_admins respectively.
 *
 * Security and permissions: Access is limited to authenticated actors.
 * Implementations must scope results to the caller’s identity: a user should
 * only see sessions tied to their own account; administrators may see their own
 * sessions and, where policy allows, run oversight queries. To minimize
 * endpoint proliferation, this documentation targets authenticated users by
 * default; broader administrative queries should be implemented with additional
 * policy guards if needed.
 *
 * Filtering, pagination, and sorting: The request body
 * (ITodoMvpSession.IRequest) should support owner scoping (e.g., ownerId),
 * actor type (user/admin) where relevant, lifecycle filters (e.g., active vs.
 * revoked by checking revoked_at and expires_at relative to now), and temporal
 * ranges (created_at, last_accessed_at). Pagination parameters (page, pageSize)
 * and sorting options (e.g., created_at desc, last_accessed_at desc, expires_at
 * asc/desc) are recommended. The response returns a paginated container
 * (IPageITodoMvpSession) with pagination metadata and an array of session
 * entities.
 *
 * Related operations: Use GET /sessions/{sessionId} for a single session view.
 * Implementations often link to sign-out flows that set revoked_at; those are
 * not part of this read operation and should be provided separately if required
 * by product scope.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, and sorting options for
 *   session retrieval
 * @path /todoMvp/user/sessions
 * @accessor api.functional.todoMvp.user.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, and sorting options for session
     * retrieval
     */
    body: ITodoMvpSession.IRequest;
  };
  export type Body = ITodoMvpSession.IRequest;
  export type Response = IPageITodoMvpSession;

  export const METADATA = {
    method: "PATCH",
    path: "/todoMvp/user/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoMvp/user/sessions";
  export const random = (): IPageITodoMvpSession =>
    typia.random<IPageITodoMvpSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a session (todo_mvp_sessions) by ID.
 *
 * This endpoint reads one record from the Prisma model todo_mvp_sessions based
 * on the supplied sessionId. The model’s commentary highlights that sessions
 * are system-managed artifacts supporting authentication and authorization,
 * with a unique session_token_hash for secure lookup that never exposes
 * plaintext tokens. Timestamps include created_at and updated_at for audit
 * relevance, last_accessed_at for inactivity management, expires_at for
 * absolute TTL, and revoked_at when a sign-out occurs.
 *
 * Security and permissions: The caller must be authenticated and authorized to
 * view the requested session. A user may read only their own session records;
 * administrative access to others’ sessions, if allowed by policy, should be
 * enforced by provider logic and is out of scope for this documentation. No
 * request body is required.
 *
 * Relationships: The session may be associated with either todo_mvp_users
 * (todo_mvp_user_id) or todo_mvp_admins (todo_mvp_admin_id). As these
 * associations are nullable, client code should not assume both are present.
 * The operation returns a single ITodoMvpSession object on success.
 *
 * @param props.connection
 * @param props.sessionId Identifier of the session to retrieve
 * @path /todoMvp/user/sessions/:sessionId
 * @accessor api.functional.todoMvp.user.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the session to retrieve */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoMvpSession;

  export const METADATA = {
    method: "GET",
    path: "/todoMvp/user/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoMvp/user/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ITodoMvpSession => typia.random<ITodoMvpSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
