import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoMvpUser } from "../../../../structures/ITodoMvpUser";

/**
 * Get a user (todo_mvp_users) by ID.
 *
 * This endpoint returns one user record from the Prisma model todo_mvp_users
 * using the provided userId. The schema defines fields including id, email
 * (unique within users), password_hash (never exposed to clients), status
 * (e.g., "active" or "deactivated" for lifecycle control), and timestamps
 * (created_at, updated_at, and deleted_at for account lifecycle workflows).
 * Relations include arrays to todo_mvp_sessions, todo_mvp_todos, and
 * todo_mvp_audit_events, which are not directly returned here but inform
 * ownership and activity elsewhere in the system.
 *
 * Security and permissions: The caller must be authenticated. Implementations
 * should enforce owner-only access for standard user contexts, ensuring a user
 * can retrieve only their own record. Administrative reads of user profiles, if
 * enabled by policy, should be implemented with appropriate guardrails and
 * auditing.
 *
 * Validation and behavior: The path parameter userId must be a valid UUID. On
 * success, the response returns ITodoMvpUser, excluding sensitive fields (e.g.,
 * password_hash remains server-side). If the user does not exist or is not
 * accessible, the server should provide a not found outcome. This endpoint can
 * be used alongside session and Todo operations to present a coherent account
 * view.
 *
 * @param props.connection
 * @param props.userId Identifier of the user to retrieve
 * @path /todoMvp/user/users/:userId
 * @accessor api.functional.todoMvp.user.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the user to retrieve */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoMvpUser;

  export const METADATA = {
    method: "GET",
    path: "/todoMvp/user/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoMvp/user/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoMvpUser => typia.random<ITodoMvpUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
