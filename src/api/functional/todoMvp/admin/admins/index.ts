import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoMvpAdmin } from "../../../../structures/ITodoMvpAdmin";

/**
 * Get administrator detail from Prisma table todo_mvp_admins by ID.
 *
 * Fetch an administrator account from the todo_mvp_admins table using its id
 * path parameter. The Prisma schema defines administrators with a unique email,
 * hashed credentials (password_hash), lifecycle status, and timestamp fields
 * (created_at, updated_at). A deleted_at timestamp indicates the record is no
 * longer in active use and typical reads may exclude such records depending on
 * provider policy. Administrators are modeled separately from todo_mvp_users to
 * maintain clear authorization boundaries and to support limited oversight
 * capabilities as described in the requirements.
 *
 * Security and permissions: this operation is restricted to authenticated
 * administrative actors. Providers must verify that the requester has the
 * appropriate administrative role before revealing administrator metadata. The
 * response must never include sensitive secrets such as password_hash. Access
 * to records considered inactive by lifecycle state may be restricted based on
 * business policy.
 *
 * Database relationships: todo_mvp_admins connects to session records
 * (todo_mvp_sessions), audit entries (todo_mvp_audit_events), and compliance
 * removal records (todo_mvp_compliance_removal_records). These relations enable
 * operational oversight and accountability without exposing user content.
 * Indexes facilitate queries by status and creation time for administrative
 * tools.
 *
 * Expected behavior and errors: when the adminId is not a valid UUID or the
 * record does not exist or is not accessible due to lifecycle state, providers
 * should return a not-found outcome consistent with platform conventions.
 * Unauthorized requests must be denied. This detail retrieval is typically used
 * alongside administrative list/search endpoints (not shown here) within
 * management interfaces.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the administrator to retrieve
 * @path /todoMvp/admin/admins/:adminId
 * @accessor api.functional.todoMvp.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the administrator to retrieve */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoMvpAdmin;

  export const METADATA = {
    method: "GET",
    path: "/todoMvp/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoMvp/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): ITodoMvpAdmin => typia.random<ITodoMvpAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
