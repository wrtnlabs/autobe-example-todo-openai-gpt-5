import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoMvpUserPassword } from "../../../../../structures/ITodoMvpUserPassword";
import { ITodoMvpUser } from "../../../../../structures/ITodoMvpUser";

/**
 * Change the authenticated member’s password by updating
 * Actors.todo_mvp_users.password_hash.
 *
 * This security operation lets the authenticated member update their credential
 * by replacing the stored password_hash in Actors.todo_mvp_users. The
 * implementation verifies the current password against the existing
 * password_hash and, upon success, computes and stores a new robust hash. The
 * account’s status column (e.g., "active" or "deactivated") can be consulted to
 * ensure that only valid accounts perform this action. Standard timestamps
 * created_at and updated_at on the user record ensure lifecycle traceability;
 * this endpoint updates updated_at when the password changes.
 *
 * Because credentials change, session management policy should be considered.
 * While the Prisma schema for Auth.todo_mvp_sessions does not mandate automatic
 * revocation, providers may choose to revoke or rotate sessions by updating
 * revoked_at or regenerating session_token_hash and adjusting expires_at.
 * last_accessed_at continues to serve inactivity tracking and should be updated
 * by normal access flows.
 *
 * The endpoint must never expose password_hash or accept or return plaintext
 * credentials beyond transient processing. Email uniqueness (enforced by
 * @@unique on todo_mvp_users.email) is unaffected by password changes.
 *
 * This operation applies to the authenticated "user" role and targets only the
 * caller’s own credential, following the path convention for personal
 * resources. It complements join/login/refresh by enabling post-registration
 * credential maintenance without introducing additional fields in the schema.
 *
 * Related operations: login (to obtain tokens before performing this call),
 * refresh (to maintain access after a rotation), and optional logout if
 * sessions are revoked following a password change.
 *
 * @param props.connection
 * @param props.body Request containing current and new password for credential
 *   rotation.
 * @path /my/auth/user/password
 * @accessor api.functional.my.auth.user.password.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<updatePassword.Response> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /** Request containing current and new password for credential rotation. */
    body: ITodoMvpUserPassword.IUpdate;
  };
  export type Body = ITodoMvpUserPassword.IUpdate;
  export type Response = ITodoMvpUser;

  export const METADATA = {
    method: "PUT",
    path: "/my/auth/user/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/auth/user/password";
  export const random = (): ITodoMvpUser => typia.random<ITodoMvpUser>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
