import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IResult } from "../../../../structures/IResult";
export * as password from "./password/index";

/**
 * Sign out the authenticated member by revoking the current
 * Auth.todo_mvp_sessions entry.
 *
 * This operation performs a sign-out for the authenticated member by marking
 * the active session as no longer usable. In Auth.todo_mvp_sessions, revoked_at
 * is set to a timestamp indicating the session has been explicitly ended.
 * Subsequent authorization checks should reject tokens tied to this session.
 * Updating last_accessed_at is not required for a revoked session, and
 * expires_at remains historical context.
 *
 * The user account in Actors.todo_mvp_users is unaffected by logout; no changes
 * to email, password_hash, status, created_at, or updated_at are required. The
 * endpoint must not expose credential data. It simply ensures that bearer
 * material linked via session_token_hash will no longer authorize requests.
 *
 * This endpoint targets the authenticated "user" role and operates on the
 * caller’s own session, following the path convention for personal resources.
 * It complements login and refresh, providing a complete session lifecycle in
 * line with the MVP’s authentication and authorization expectations.
 *
 * If clients hold multiple sessions across devices, revoking just the current
 * session is consistent with the independent-session model described by the
 * schema relationships; each session row stands alone tied to
 * todo_mvp_user_id.
 *
 * @param props.connection
 * @path /my/auth/user/logout
 * @accessor api.functional.my.auth.user.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(
  connection: IConnection,
): Promise<logout.Response> {
  return true === connection.simulate
    ? logout.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
      );
}
export namespace logout {
  export type Response = IResult.ISuccess;

  export const METADATA = {
    method: "POST",
    path: "/my/auth/user/logout",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/auth/user/logout";
  export const random = (): IResult.ISuccess =>
    typia.random<IResult.ISuccess>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
