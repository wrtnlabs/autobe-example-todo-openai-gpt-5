import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminSessionRevocation } from "../../../../../../structures/ITodoAppSystemAdminSessionRevocation";
import { ITodoAppSystemAdminSessionRevocationResult } from "../../../../../../structures/ITodoAppSystemAdminSessionRevocationResult";

/**
 * Revoke other sessions using todo_app_sessions and
 * todo_app_session_revocations.
 *
 * This endpoint acts on the authenticated systemAdmin’s sessions in
 * todo_app_sessions. It revokes sessions other than the current one by setting
 * revoked_at and optionally revoked_reason, and it creates related rows in
 * todo_app_session_revocations with revoked_at, revoked_by, and optional
 * reason. Refresh token chains in todo_app_refresh_tokens associated with those
 * sessions should also be revoked (revoked_at/revoked_reason) to prevent
 * further refresh.
 *
 * Using the "/my/" prefix, the operation clearly targets the caller’s own
 * resources. It is strictly an authentication maintenance function and does not
 * interact with private todo data.
 *
 * This operation is related to logout of the current session and complements
 * password change and reset flows which often necessitate session invalidation.
 * It respects the integrity of session history by recording revocations instead
 * of removing records.
 *
 * Errors include attempting to revoke sessions that are already revoked or
 * expired (based on expires_at), or no matching sessions to revoke. The
 * application may log audit entries via todo_app_audit_logs for governance
 * monitoring.
 *
 * The endpoint should accept parameters to select scope (e.g., revoke all
 * except current) within the request body and confirm outcomes in the
 * response.
 *
 * @param props.connection
 * @param props.body Session revocation scope and options for the current admin.
 * @path /my/auth/systemAdmin/sessions/revoke
 * @accessor api.functional.my.auth.systemAdmin.sessions.revoke.revokeOtherSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeOtherSessions(
  connection: IConnection,
  props: revokeOtherSessions.Props,
): Promise<revokeOtherSessions.Response> {
  return true === connection.simulate
    ? revokeOtherSessions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeOtherSessions.METADATA,
          path: revokeOtherSessions.path(),
          status: null,
        },
        props.body,
      );
}
export namespace revokeOtherSessions {
  export type Props = {
    /** Session revocation scope and options for the current admin. */
    body: ITodoAppSystemAdminSessionRevocation.ICreate;
  };
  export type Body = ITodoAppSystemAdminSessionRevocation.ICreate;
  export type Response = ITodoAppSystemAdminSessionRevocationResult;

  export const METADATA = {
    method: "POST",
    path: "/my/auth/systemAdmin/sessions/revoke",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/auth/systemAdmin/sessions/revoke";
  export const random = (): ITodoAppSystemAdminSessionRevocationResult =>
    typia.random<ITodoAppSystemAdminSessionRevocationResult>();
  export const simulate = (
    connection: IConnection,
    props: revokeOtherSessions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeOtherSessions.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
