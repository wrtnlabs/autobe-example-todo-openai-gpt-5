import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminLogout } from "../../../../structures/ITodoAppSystemAdminLogout";
import { ITodoAppSystemAdminLogoutResult } from "../../../../structures/ITodoAppSystemAdminLogoutResult";
export * as password from "./password/index";
export * as sessions from "./sessions/index";

/**
 * Logout current admin by revoking session and refresh token per schema.
 *
 * This self-scoped endpoint targets the authenticated admin’s current session.
 * It updates the session record in todo_app_sessions by setting revoked_at and
 * optionally revoked_reason, and creates a corresponding
 * todo_app_session_revocations row (revoked_at, revoked_by, reason). If a
 * refresh token exists in todo_app_refresh_tokens for this session, it should
 * be revoked (revoked_at/revoked_reason) to prevent further use.
 *
 * The path follows the "/my/" convention because it manages the caller’s own
 * session. No private todo content is read or modified by this operation.
 *
 * This operation integrates with the broader authentication lifecycle that
 * includes login and refresh. It ensures clean termination of authenticated
 * state and supports governance via audit logging when appropriate.
 *
 * Errors may include an already revoked or expired session (expires_at) and
 * race conditions addressed by idempotent updates (setting revoked_at if null).
 * The response reports outcome details.
 *
 * All updates are limited to authentication-related tables: todo_app_sessions,
 * todo_app_refresh_tokens, and todo_app_session_revocations; todo_app_users
 * remains unchanged aside from optional last_login_at updates handled
 * elsewhere.
 *
 * @param props.connection
 * @param props.body Optional context for logout (e.g., reason).
 * @path /my/auth/systemAdmin/logout
 * @accessor api.functional.my.auth.systemAdmin.logout
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function logout(
  connection: IConnection,
  props: logout.Props,
): Promise<logout.Response> {
  return true === connection.simulate
    ? logout.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...logout.METADATA,
          path: logout.path(),
          status: null,
        },
        props.body,
      );
}
export namespace logout {
  export type Props = {
    /** Optional context for logout (e.g., reason). */
    body: ITodoAppSystemAdminLogout.ICreate;
  };
  export type Body = ITodoAppSystemAdminLogout.ICreate;
  export type Response = ITodoAppSystemAdminLogoutResult;

  export const METADATA = {
    method: "POST",
    path: "/my/auth/systemAdmin/logout",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/auth/systemAdmin/logout";
  export const random = (): ITodoAppSystemAdminLogoutResult =>
    typia.random<ITodoAppSystemAdminLogoutResult>();
  export const simulate = (
    connection: IConnection,
    props: logout.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: logout.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
