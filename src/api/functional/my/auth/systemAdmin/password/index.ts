import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminPassword } from "../../../../../structures/ITodoAppSystemAdminPassword";
import { ITodoAppSystemAdminPasswordChangeResult } from "../../../../../structures/ITodoAppSystemAdminPasswordChangeResult";

/**
 * Change own admin password via todo_app_users; may revoke other sessions.
 *
 * This endpoint requires an authenticated systemAdmin and operates on the
 * caller’s own row in todo_app_users. It validates the provided current
 * password against password_hash and, on success, sets a new password_hash.
 * Post-change, policy may require revoking other active sessions
 * (todo_app_sessions) and their refresh chains (todo_app_refresh_tokens) for
 * the same user; a record may be inserted into todo_app_session_revocations to
 * capture the action.
 *
 * Because it affects only the caller’s account, the path uses the "/my/" prefix
 * convention for self-targeted operations. No private todo content is accessed
 * or changed.
 *
 * The endpoint pairs with login and refresh flows and is complementary to
 * password reset when the current password is unknown. Audit trails for such
 * actions can be captured via todo_app_audit_logs.
 *
 * Validation applies to password policy and mismatch of current password. The
 * operation updates only authentication-related fields in todo_app_users.
 *
 * Errors include incorrect current password, policy violations for the new
 * password, or conflicts revoking sessions based on session state tracked in
 * todo_app_sessions.
 *
 * @param props.connection
 * @param props.body Change-password payload including current and new password
 *   fields.
 * @path /my/auth/systemAdmin/password
 * @accessor api.functional.my.auth.systemAdmin.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Change-password payload including current and new password fields. */
    body: ITodoAppSystemAdminPassword.IUpdate;
  };
  export type Body = ITodoAppSystemAdminPassword.IUpdate;
  export type Response = ITodoAppSystemAdminPasswordChangeResult;

  export const METADATA = {
    method: "PUT",
    path: "/my/auth/systemAdmin/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/my/auth/systemAdmin/password";
  export const random = (): ITodoAppSystemAdminPasswordChangeResult =>
    typia.random<ITodoAppSystemAdminPasswordChangeResult>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
