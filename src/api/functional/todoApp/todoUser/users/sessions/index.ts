import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSession } from "../../../../../structures/ITodoAppSession";
import { IPageITodoAppSession } from "../../../../../structures/IPageITodoAppSession";

/**
 * Search a user’s sessions from Prisma table todo_app_sessions with filtering
 * and pagination.
 *
 * Retrieve a filtered, sorted, and paginated list of sessions for the specified
 * user from the todo_app_sessions table. Each record represents a sign-in
 * session and includes attributes such as id (UUID primary key),
 * todo_app_user_id (owner reference), ip (last seen or creation IP),
 * user_agent, issued_at, expires_at, revoked_at, revoked_reason, created_at,
 * and updated_at. The table also has a session_token column that is unique and
 * security-sensitive; client responses must not include raw tokens.
 *
 * This operation is intended for authenticated users reviewing their own active
 * and historical sessions to monitor account security and manage sign-ins
 * across devices. Authorization must ensure that the path userId matches the
 * caller’s identity. Use todo_app_sessions.todo_app_user_id to enforce
 * ownership checks so that users can never list sessions belonging to others.
 *
 * The request body (ITodoAppSession.IRequest) should support common filters
 * derived from the schema columns, such as status filters (e.g., active where
 * revoked_at is null and expires_at is in the future; expired where expires_at
 * is in the past; revoked where revoked_at is not null), time range filters
 * over issued_at/expires_at, client metadata filters (ip, user_agent
 * substrings), and pagination/sorting parameters (default sort by issued_at
 * descending). Results should exclude rows considered logically removed by
 * business policy when deleted_at is not null.
 *
 * If the user does not exist or the caller lacks permission to access the
 * specified userId, the provider should deny access without revealing whether
 * the resource exists. If filters are invalid (e.g., malformed date ranges),
 * the provider should return validation errors that identify the rule in
 * business terms. Related operations include: GET
 * /users/{userId}/sessions/{sessionId} for a specific session detail, GET
 * /sessions/{sessionId}/revocation for any associated revocation record, and
 * PATCH /sessions/{sessionId}/refreshTokens to review the refresh-token chain
 * for a session.
 *
 * @param props.connection
 * @param props.userId Owner user’s ID whose sessions are being queried
 * @param props.body Search, filter, sort, and paginate parameters for user
 *   sessions
 * @path /todoApp/todoUser/users/:userId/sessions
 * @accessor api.functional.todoApp.todoUser.users.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Owner user’s ID whose sessions are being queried */
    userId: string & tags.Format<"uuid">;

    /** Search, filter, sort, and paginate parameters for user sessions */
    body: ITodoAppSession.IRequest;
  };
  export type Body = ITodoAppSession.IRequest;
  export type Response = IPageITodoAppSession.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/todoUser/users/:userId/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/todoUser/users/${encodeURIComponent(props.userId ?? "null")}/sessions`;
  export const random = (): IPageITodoAppSession.ISummary =>
    typia.random<IPageITodoAppSession.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific session (todo_app_sessions) for the given user.
 *
 * Fetch a single session record from todo_app_sessions identified by sessionId
 * and scoped by userId. The schema defines fields including id (UUID),
 * todo_app_user_id (FK to todo_app_users.id), session_token (unique secret,
 * never returned to clients), ip, user_agent, issued_at, expires_at,
 * revoked_at, revoked_reason, created_at, updated_at, and deleted_at.
 * Implementations must avoid exposing raw session_token, and may provide safe
 * metadata only.
 *
 * Security and authorization: the caller must be authenticated as the owner
 * indicated by userId, and the provider must verify that the session’s
 * todo_app_user_id equals the path userId. If the session does not belong to
 * the user or is not found, the provider should deny access without indicating
 * whether the resource exists. This behavior aligns with the account security
 * practices described in the requirements.
 *
 * Expected behavior and errors: return the single session entity when found. If
 * the record is flagged as logically removed by business policy (non-null
 * deleted_at), omit it from normal responses. If the session is expired
 * (expires_at < now) or revoked (revoked_at not null), those states should be
 * reflected in the response fields but do not by themselves prevent retrieval.
 * Validation errors should be returned for malformed UUIDs. Related endpoints:
 * PATCH /users/{userId}/sessions (list/search), GET
 * /sessions/{sessionId}/revocation (view revocation details for the session),
 * PATCH /sessions/{sessionId}/refreshTokens (inspect refresh-token chain).
 *
 * @param props.connection
 * @param props.userId Owner user’s ID
 * @param props.sessionId Target session’s ID
 * @path /todoApp/todoUser/users/:userId/sessions/:sessionId
 * @accessor api.functional.todoApp.todoUser.users.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Owner user’s ID */
    userId: string & tags.Format<"uuid">;

    /** Target session’s ID */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppSession;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/todoUser/users/:userId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/todoUser/users/${encodeURIComponent(props.userId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): ITodoAppSession => typia.random<ITodoAppSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
