import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoActivity } from "../../../../../structures/ITodoAppTodoActivity";
import { IPageITodoAppTodoActivity } from "../../../../../structures/IPageITodoAppTodoActivity";

/**
 * List Todo activity history from todo_app_todo_activities for a specific Todo.
 *
 * Purpose and overview: Returns activity history for the Todo identified by
 * todoId. The todo_app_todo_activities model stores audit trail fields
 * including activity_type, details, changed_fields, previous_status,
 * next_status, and occurred_at. It also maintains nullable relations to the
 * Todo and the actor user to preserve history even if parents are later purged.
 * This endpoint enables end users to review what happened to their Todo over
 * time.
 *
 * Security considerations: Only the Todo owner (role todoUser) may access
 * activities for their item. The provider must validate ownership via the
 * parent todo_app_todos.todo_app_user_id. Attempts to read another user’s
 * activities must be denied without revealing whether the resource exists.
 *
 * DB relationships and behavior: Activities reference todo_app_todos via
 * todo_app_todo_id (nullable for history preservation) and todo_app_users via
 * todo_app_user_id (nullable). Providers should filter results to the specified
 * Todo and apply pagination and sorting as requested. Typical defaults sort by
 * occurred_at descending. The underlying schema includes text-search indexes
 * (e.g., on details) to support keyword filtering if exposed in IRequest.
 *
 * Validation and errors: If todoId is not a valid UUID or does not resolve to a
 * Todo owned by the caller, the request must be rejected. The endpoint is
 * read-only and does not modify activity records. Related endpoints include GET
 * /todoApp/todoUser/todos/{todoId}/activities/{activityId} for fetching a
 * single activity record.
 *
 * @param props.connection
 * @param props.todoId Identifier of the parent todo
 * @param props.body Search, filter, sort, and pagination parameters for
 *   activity listing
 * @path /todoApp/todoUser/todos/:todoId/activities
 * @accessor api.functional.todoApp.todoUser.todos.activities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the parent todo */
    todoId: string & tags.Format<"uuid">;

    /** Search, filter, sort, and pagination parameters for activity listing */
    body: ITodoAppTodoActivity.IRequest;
  };
  export type Body = ITodoAppTodoActivity.IRequest;
  export type Response = IPageITodoAppTodoActivity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/todoUser/todos/:todoId/activities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/todoUser/todos/${encodeURIComponent(props.todoId ?? "null")}/activities`;
  export const random = (): IPageITodoAppTodoActivity.ISummary =>
    typia.random<IPageITodoAppTodoActivity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single Todo activity by ID from todo_app_todo_activities.
 *
 * Purpose and overview: Fetches a detailed audit entry for the Todo’s activity
 * history from todo_app_todo_activities. Activity records capture domain
 * actions such as 'create', 'update', 'complete', 'reopen', and 'delete' with
 * timestamps and optional descriptive details. The model’s FKs to the Todo and
 * the actor are nullable to preserve history even after parent deletions.
 *
 * Security and permissions: Only the owner of the parent Todo may read its
 * activities. Providers must ensure the todo_id belongs to the authenticated
 * user (via todo_app_todos.todo_app_user_id). If the activity does not belong
 * to the specified Todo, or the Todo is not owned by the caller, the request
 * should be denied without disclosing existence.
 *
 * Behavior and error handling: On success, return the full activity document
 * (ITodoAppTodoActivity). If activityId or todoId is not a valid UUID, or the
 * record is not found under the specified parent with proper ownership, return
 * an appropriate error. This is a read-only endpoint; it does not alter
 * activity records.
 *
 * Related endpoints: PATCH /todoApp/todoUser/todos/{todoId}/activities provides
 * paginated search; DELETE /todoApp/todoUser/todos/{todoId} records a 'delete'
 * activity upon successful deletion.
 *
 * @param props.connection
 * @param props.todoId Identifier of the parent todo
 * @param props.activityId Identifier of the activity record to fetch
 * @path /todoApp/todoUser/todos/:todoId/activities/:activityId
 * @accessor api.functional.todoApp.todoUser.todos.activities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the parent todo */
    todoId: string & tags.Format<"uuid">;

    /** Identifier of the activity record to fetch */
    activityId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppTodoActivity;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/todoUser/todos/:todoId/activities/:activityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/todoUser/todos/${encodeURIComponent(props.todoId ?? "null")}/activities/${encodeURIComponent(props.activityId ?? "null")}`;
  export const random = (): ITodoAppTodoActivity =>
    typia.random<ITodoAppTodoActivity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.param("activityId")(() => typia.assert(props.activityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
