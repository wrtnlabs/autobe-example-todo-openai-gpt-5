import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppPrivacyConsent } from "../../../../structures/ITodoAppPrivacyConsent";
import { IPageITodoAppPrivacyConsent } from "../../../../structures/IPageITodoAppPrivacyConsent";

/**
 * List and search privacy consents (todo_app_privacy_consents) with pagination
 * and filters.
 *
 * Retrieve a filtered, sorted, and paginated list of privacy consent records
 * for the current user from the todo_app_privacy_consents table. The table
 * stores user consent history by purpose with fields including purpose_code,
 * purpose_name, granted (boolean), granted_at, revoked_at, expires_at,
 * policy_version, source, ip, and user_agent, plus standard
 * created_at/updated_at and an optional deleted_at for retention workflows. Use
 * this endpoint to audit current and historical consent states without exposing
 * private todo content.
 *
 * Security and permissions: access is restricted to authenticated end users
 * acting on their own records (role "todoUser"). The implementation must apply
 * ownership filtering on todo_app_privacy_consents.todo_app_user_id to ensure
 * cross-user isolation. Administrators should not use this endpoint to view
 * private consent details; separate admin auditing, if required by policy,
 * should operate on aggregated or operational data without exposing private
 * content.
 *
 * Relationship to database entities: each result row corresponds to a record in
 * todo_app_privacy_consents. The list is append-mostly over time as consents
 * are granted and revoked by creating new rows. Consumers typically care about
 * the most recent effective grant for each purpose, but this endpoint exposes
 * the full history enabling clients to compute present status or show
 * timelines.
 *
 * Validation and business logic: the request body
 * (ITodoAppPrivacyConsent.IRequest) may include filters for purpose_code,
 * granted (true/false), date ranges on granted_at/revoked_at/expires_at,
 * free-text search over purpose_name, pagination (page, pageSize with business
 * defaults such as 20 and allowed range 1–100), and sorting fields (e.g.,
 * granted_at desc by default). Empty or whitespace-only search keywords should
 * be ignored. Implementers should ensure rate limiting per fairness policies
 * and return only the caller’s own records.
 *
 * Related operations: use GET /privacyConsents/{privacyConsentId} to retrieve a
 * single consent record by its identifier when the client needs complete
 * details. This collection search is intended for list pages, timelines, and
 * settings views where multiple consents are displayed.
 *
 * Error handling: return validation errors for unsupported sort keys,
 * out-of-range page sizes, or malformed date filters; deny access if the user
 * is not authenticated. Records with deleted_at not null are typically excluded
 * from normal results unless the request explicitly asks for archival data via
 * business policy.
 *
 * @param props.connection
 * @param props.body Search, filter, sort, and pagination parameters for privacy
 *   consent listing
 * @path /todoApp/todoUser/privacyConsents
 * @accessor api.functional.todoApp.todoUser.privacyConsents.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sort, and pagination parameters for privacy consent
     * listing
     */
    body: ITodoAppPrivacyConsent.IRequest;
  };
  export type Body = ITodoAppPrivacyConsent.IRequest;
  export type Response = IPageITodoAppPrivacyConsent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/todoUser/privacyConsents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/todoUser/privacyConsents";
  export const random = (): IPageITodoAppPrivacyConsent.ISummary =>
    typia.random<IPageITodoAppPrivacyConsent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single privacy consent (todo_app_privacy_consents) by ID.
 *
 * This operation retrieves one privacy consent record from
 * todo_app_privacy_consents by its primary key. The table models consent
 * history per user and purpose with fields such as purpose_code, purpose_name,
 * granted, granted_at, revoked_at, expires_at, policy_version, source, ip, and
 * user_agent. It also includes created_at, updated_at, and an optional
 * deleted_at used for retention or redaction under policy.
 *
 * Security and permissions: only authenticated end users (role "todoUser") may
 * access their own consent records. The provider must verify ownership by
 * comparing the record’s todo_app_user_id to the caller’s identity and deny
 * access without revealing existence if the record belongs to a different user.
 * Administrators should not use this endpoint for routine operations, as
 * private consent details are not intended for administrative browsing.
 *
 * Entity relationship context: a consent record is independent of todos and
 * represents a single event in the consent timeline for a given purpose.
 * Clients may use this read to show detailed consent information in settings
 * screens, including timestamps, policy_version, and capture source.
 *
 * Error handling and behavior: if privacyConsentId does not exist or refers to
 * a record that the user does not own, return an authorization-safe denial.
 * Records with a non-null deleted_at are considered archived and normally not
 * returned unless business policy permits. Validation must ensure
 * privacyConsentId is a UUID.
 *
 * @param props.connection
 * @param props.privacyConsentId Unique identifier of the privacy consent record
 * @path /todoApp/todoUser/privacyConsents/:privacyConsentId
 * @accessor api.functional.todoApp.todoUser.privacyConsents.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the privacy consent record */
    privacyConsentId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppPrivacyConsent;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/todoUser/privacyConsents/:privacyConsentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/todoUser/privacyConsents/${encodeURIComponent(props.privacyConsentId ?? "null")}`;
  export const random = (): ITodoAppPrivacyConsent =>
    typia.random<ITodoAppPrivacyConsent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("privacyConsentId")(() =>
        typia.assert(props.privacyConsentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
