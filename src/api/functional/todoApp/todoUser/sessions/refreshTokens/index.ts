import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppRefreshToken } from "../../../../../structures/ITodoAppRefreshToken";
import { IPageITodoAppRefreshToken } from "../../../../../structures/IPageITodoAppRefreshToken";

/**
 * Search refresh tokens (todo_app_refresh_tokens) for a session with
 * pagination.
 *
 * Retrieve refresh tokens for the specified session from
 * todo_app_refresh_tokens. The schema includes id (UUID PK),
 * todo_app_session_id (FK to todo_app_sessions.id), parent_id (self-referential
 * chain), token (opaque; deprecated for security), token_hash (unique lookup
 * hash), issued_at, expires_at, rotated_at, revoked_at, revoked_reason,
 * created_at, updated_at, and deleted_at. Client responses must not expose
 * token or token_hash values; instead, return safe metadata such as timestamps
 * and rotation/revocation status.
 *
 * Security and authorization: although the path does not include userId, the
 * provider must enforce ownership by verifying that the session referenced by
 * the path parameter belongs to the authenticated user (via
 * todo_app_sessions.todo_app_user_id). This prevents cross-user inspection of
 * token chains.
 *
 * The request body (ITodoAppRefreshToken.IRequest) should support filters on
 * temporal fields (issued_at/expires_at), rotation/revocation status
 * (rotated_at, revoked_at), and chain navigation via parent_id when focusing on
 * a branch. Sorting should typically default to issued_at descending. Results
 * should exclude logically removed rows when deleted_at is not null per
 * business policy. Related endpoints: GET /users/{userId}/sessions/{sessionId}
 * (session detail), GET /sessions/{sessionId}/revocation (revocation info), and
 * PATCH /users/{userId}/sessions (search sessions).
 *
 * @param props.connection
 * @param props.sessionId Session whose refresh tokens are being queried
 * @param props.body Search, filter, sort, and paginate parameters for refresh
 *   tokens
 * @path /todoApp/todoUser/sessions/:sessionId/refreshTokens
 * @accessor api.functional.todoApp.todoUser.sessions.refreshTokens.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Session whose refresh tokens are being queried */
    sessionId: string & tags.Format<"uuid">;

    /** Search, filter, sort, and paginate parameters for refresh tokens */
    body: ITodoAppRefreshToken.IRequest;
  };
  export type Body = ITodoAppRefreshToken.IRequest;
  export type Response = IPageITodoAppRefreshToken.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/todoUser/sessions/:sessionId/refreshTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/todoUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}/refreshTokens`;
  export const random = (): IPageITodoAppRefreshToken.ISummary =>
    typia.random<IPageITodoAppRefreshToken.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a refresh token from todo_app_refresh_tokens by session and token
 * identifiers.
 *
 * Fetch a specific refresh token associated with an authentication session. In
 * the Prisma schema, todo_app_refresh_tokens stores long-lived authentication
 * artifacts with rotation history and revocation metadata. Columns include id,
 * todo_app_session_id (FK to todo_app_sessions.id), optional parent_id for
 * rotation chains, token and token_hash, issued_at, expires_at, rotated_at,
 * revoked_at, revoked_reason, created_at, updated_at, and a deleted_at marker
 * column used to exclude records from normal flows when set.
 *
 * Security and permissions: Only the authenticated owner of the session (the
 * same user who owns todo_app_sessions.todo_app_user_id) should be able to read
 * this record. Administrators should not need routine access to refresh token
 * contents. Providers must never expose raw secrets in logs, and downstream
 * DTOs must omit or redact sensitive columns (token, token_hash) per policy.
 *
 * Entity relationships and constraints: The record references a parent session
 * via todo_app_session_id with onDelete: Cascade in the schema. Implementations
 * must confirm that the refreshTokenId exists and belongs to the specified
 * sessionId; otherwise, respond as not found. If revoked_at is present, the
 * token has been revoked; if rotated_at is present, the token has been
 * superseded by a child token in the rotation chain. The deleted_at marker
 * indicates records that are no longer active and should typically be excluded
 * from standard retrievals.
 *
 * Validation and behavior: This operation returns a single resource. It does
 * not paginate or filter. Typical errors include invalid UUID formats,
 * nonexistent identifiers, or a mismatch between sessionId and refreshTokenId.
 * Related operations include session detail retrieval and listing a sessionâ€™s
 * refresh tokens if provided elsewhere.
 *
 * @param props.connection
 * @param props.sessionId Identifier of the parent session
 *   (todo_app_sessions.id)
 * @param props.refreshTokenId Identifier of the refresh token
 *   (todo_app_refresh_tokens.id)
 * @path /todoApp/todoUser/sessions/:sessionId/refreshTokens/:refreshTokenId
 * @accessor api.functional.todoApp.todoUser.sessions.refreshTokens.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the parent session (todo_app_sessions.id) */
    sessionId: string & tags.Format<"uuid">;

    /** Identifier of the refresh token (todo_app_refresh_tokens.id) */
    refreshTokenId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppRefreshToken;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/todoUser/sessions/:sessionId/refreshTokens/:refreshTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/todoUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}/refreshTokens/${encodeURIComponent(props.refreshTokenId ?? "null")}`;
  export const random = (): ITodoAppRefreshToken =>
    typia.random<ITodoAppRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.param("refreshTokenId")(() => typia.assert(props.refreshTokenId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
