import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSessionRevocation } from "../../../../../structures/ITodoAppSessionRevocation";

/**
 * Get session revocation details (todo_app_session_revocations) for a session.
 *
 * Return the revocation details for the given session from
 * todo_app_session_revocations. The schema includes id (UUID PK),
 * todo_app_session_id (unique FK to todo_app_sessions.id), revoked_at
 * (timestamp), revoked_by (actor category such as "user", "system", or
 * "admin"), reason (optional), created_at, updated_at, and deleted_at. The
 * presence of a record indicates that the session has been explicitly revoked
 * and should no longer be considered valid for authentication.
 *
 * Security considerations: even though the path omits userId, the provider must
 * validate ownership by joining the session (todo_app_sessions) referenced by
 * todo_app_session_id and ensuring its todo_app_user_id matches the
 * authenticated caller. This prevents cross-user access to revocation details.
 *
 * Expected behavior: return the revocation record when it exists. If no record
 * exists for the session, respond as not found according to service
 * conventions. Validation errors should be surfaced for malformed UUIDs. This
 * operation is commonly used alongside GET /users/{userId}/sessions/{sessionId}
 * to present a complete picture of session state, and PATCH
 * /sessions/{sessionId}/refreshTokens to review the associated refresh-token
 * rotation history.
 *
 * @param props.connection
 * @param props.sessionId Target session’s ID
 * @path /todoApp/todoUser/sessions/:sessionId/revocation
 * @accessor api.functional.todoApp.todoUser.sessions.revocation.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target session’s ID */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppSessionRevocation;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/todoUser/sessions/:sessionId/revocation",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/todoUser/sessions/${encodeURIComponent(props.sessionId ?? "null")}/revocation`;
  export const random = (): ITodoAppSessionRevocation =>
    typia.random<ITodoAppSessionRevocation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
