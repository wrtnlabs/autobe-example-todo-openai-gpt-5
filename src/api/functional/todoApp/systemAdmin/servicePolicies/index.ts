import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppServicePolicy } from "../../../../structures/ITodoAppServicePolicy";
import { IPageITodoAppServicePolicy } from "../../../../structures/IPageITodoAppServicePolicy";
export * as serviceConfigurations from "./serviceConfigurations/index";
export * as featureFlags from "./featureFlags/index";

/**
 * Create a new service policy (todo_app_service_policies).
 *
 * This operation inserts a new row into todo_app_service_policies to define an
 * administrative policy governing application behavior. The model’s salient
 * fields include id (primary key, generated), optional todo_app_user_id
 * referencing the administrative actor, namespace (logical grouping), code
 * (globally unique policy code), name, optional description, value (raw
 * string), value_type (type hint such as string, int, double, boolean,
 * datetime, uri), active (boolean), optional effectivity timestamps
 * effective_from/effective_to, and created_at/updated_at timestamps maintained
 * by the system. Referential relationships include optional linkage from
 * policies to todo_app_service_configurations and todo_app_feature_flags that
 * may reference this policy.
 *
 * Security: Only administrators may create policies, so this endpoint requires
 * systemAdmin authorization. Provider logic must enforce the unique code
 * constraint and validate that value and value_type are coherent. When
 * effectivity windows are provided, the start and end timestamps should be
 * validated for consistency.
 *
 * Expected behavior and error handling: On success, return the newly created
 * policy. If the code is not unique or required fields are missing, return a
 * validation failure. If the request attempts to set fields outside the schema
 * (e.g., unsupported value_type), return an input error. Downstream systems
 * that reference policies by code should treat creation as immediately
 * available once confirmed.
 *
 * Related operations: listing/searching policies and fetching a policy by ID.
 * Policies may later be updated or archived by separate administrative
 * endpoints according to governance workflows.
 *
 * @param props.connection
 * @param props.body Creation payload for a new service policy, including code,
 *   namespace, and value/value_type
 * @path /todoApp/systemAdmin/servicePolicies
 * @accessor api.functional.todoApp.systemAdmin.servicePolicies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation payload for a new service policy, including code, namespace,
     * and value/value_type
     */
    body: ITodoAppServicePolicy.ICreate;
  };
  export type Body = ITodoAppServicePolicy.ICreate;
  export type Response = ITodoAppServicePolicy;

  export const METADATA = {
    method: "POST",
    path: "/todoApp/systemAdmin/servicePolicies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/systemAdmin/servicePolicies";
  export const random = (): ITodoAppServicePolicy =>
    typia.random<ITodoAppServicePolicy>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search service policies (todo_app_service_policies) with filters and
 * pagination.
 *
 * This operation returns a paginated collection of service policy summaries
 * from todo_app_service_policies. The model defines administrative policy
 * objects with fields including id (primary key), todo_app_user_id
 * (administrator owner/creator), namespace, code (globally unique identifier),
 * name, optional description, value (raw string), value_type (type hint),
 * active (boolean), effective_from and effective_to (optional business
 * effectivity window), and created_at/updated_at timestamps, with a logical
 * deletion timestamp used to exclude archived records from normal listings.
 * Indexes support lookups across activity state, namespace, temporal windows,
 * and text search on name/description, enabling efficient administrative
 * queries.
 *
 * Security considerations: policies are administrative assets and should only
 * be listed by authorized administrators. Therefore, this endpoint requires
 * systemAdmin privileges. Even within administrative contexts, the response
 * should avoid exposing secrets from other sub‑systems; however, policy values
 * are already modeled as raw strings with value_type hints and are not
 * inherently secret unless business rules dictate otherwise.
 *
 * Validation and business rules include honoring the globally unique code
 * constraint, filtering based on active state and effectivity windows, and
 * supporting pagination parameters (page, pageSize) within expected ranges.
 * Sorting should allow fields such as created_at, updated_at, code, name, or
 * effective_from in ascending or descending order. Related operations typically
 * include policy detail retrieval (GET /servicePolicies/{policyId}) and policy
 * creation or update endpoints.
 *
 * Error handling should cover invalid filter combinations (e.g., malformed
 * datetime ranges), out‑of‑bounds pagination, and requests from non‑authorized
 * actors. Records with a logical deletion timestamp should be excluded from
 * standard results.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, and sorting parameters for
 *   service policies
 * @path /todoApp/systemAdmin/servicePolicies
 * @accessor api.functional.todoApp.systemAdmin.servicePolicies.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, and sorting parameters for service
     * policies
     */
    body: ITodoAppServicePolicy.IRequest;
  };
  export type Body = ITodoAppServicePolicy.IRequest;
  export type Response = IPageITodoAppServicePolicy.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/servicePolicies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/systemAdmin/servicePolicies";
  export const random = (): IPageITodoAppServicePolicy.ISummary =>
    typia.random<IPageITodoAppServicePolicy.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific service policy (todo_app_service_policies) by ID.
 *
 * This endpoint fetches one policy record from todo_app_service_policies using
 * the provided policyId. The model documents business policies that govern
 * application behavior, rate limits, retention, or other constraints. Key
 * fields include id (primary key), optional todo_app_user_id (administrator
 * ownership), namespace (logical grouping), code (globally unique policy code),
 * name, optional description, value (raw string), value_type (type hint for
 * interpretation), active (boolean), effective_from/effective_to (optional
 * effectivity window), and created_at/updated_at timestamps. A logical deletion
 * timestamp is present to identify archived records that should not appear in
 * normal flows.
 *
 * Security and permissions: Access is intended for administrators, as policies
 * are governance artifacts. The provider should confirm systemAdmin
 * authorization and handle records that are inactive or archived according to
 * administrative visibility rules.
 *
 * Validation and expected behavior: The operation returns the single policy if
 * it exists and is eligible for display; otherwise, it should respond that it
 * was not found. This endpoint complements other administrative operations such
 * as listing/searching policies and creating or updating policies. When
 * integrating with dependent resources, clients typically resolve policies by
 * code in business logic, while this endpoint provides ID‑based retrieval for
 * precise administration tasks.
 *
 * @param props.connection
 * @param props.policyId Identifier of the target service policy
 * @path /todoApp/systemAdmin/servicePolicies/:policyId
 * @accessor api.functional.todoApp.systemAdmin.servicePolicies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the target service policy */
    policyId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppServicePolicy;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/systemAdmin/servicePolicies/:policyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/servicePolicies/${encodeURIComponent(props.policyId ?? "null")}`;
  export const random = (): ITodoAppServicePolicy =>
    typia.random<ITodoAppServicePolicy>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("policyId")(() => typia.assert(props.policyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a service policy (todo_app_service_policies) by id.
 *
 * This endpoint updates a single policy stored in the todo_app_service_policies
 * table, which “governs application behavior, rate limits, retention, and other
 * constraints.” The model includes columns like id (UUID PK), namespace, code
 * (globally unique), name, description, value (raw string), value_type (type
 * hint), active (boolean), effective_from, effective_to, created_at,
 * updated_at, and deleted_at. The request body should carry only the fields
 * intended to be updated according to business validation (e.g., code
 * uniqueness, proper value_type usage). The provider should set updated_at upon
 * successful write.
 *
 * Security and permissions: Only administrative actors should be able to modify
 * policies. This operation requires a systemAdmin role and should verify the
 * requester’s authorization. Because policies can control critical behaviors,
 * providers should also consider creating audit entries via internal mechanisms
 * (e.g., admin action logs) without exposing audit tables through this API.
 *
 * Entity relationships: Policies may be referenced by
 * todo_app_service_configurations and todo_app_feature_flags through optional
 * FKs. Changing active/effective windows or code must respect the unique [code]
 * constraint and any dependent application logic that resolves policies by
 * code.
 *
 * Validation and business rules: Enforce the @@unique([code]) constraint,
 * ensure value_type is recognized by the application, and verify that
 * effective_from is earlier than effective_to when both are present. Attempts
 * to update immutable identifiers (id) must be rejected. The endpoint path uses
 * policyId which maps to the id column.
 *
 * Related operations: Retrieval and listing of configurations under a policy
 * are available in the serviceConfigurations endpoints. When changing policy
 * activation, downstream readers of configurations or flags may adjust behavior
 * accordingly.
 *
 * Error handling: Return validation errors for uniqueness violations or invalid
 * values; return not-found when policyId does not match any current record
 * (including records marked deleted by deleted_at if your read policy excludes
 * them).
 *
 * @param props.connection
 * @param props.policyId Target policy’s UUID (todo_app_service_policies.id)
 * @param props.body Fields to update for the service policy
 * @path /todoApp/systemAdmin/servicePolicies/:policyId
 * @accessor api.functional.todoApp.systemAdmin.servicePolicies.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target policy’s UUID (todo_app_service_policies.id) */
    policyId: string & tags.Format<"uuid">;

    /** Fields to update for the service policy */
    body: ITodoAppServicePolicy.IUpdate;
  };
  export type Body = ITodoAppServicePolicy.IUpdate;
  export type Response = ITodoAppServicePolicy;

  export const METADATA = {
    method: "PUT",
    path: "/todoApp/systemAdmin/servicePolicies/:policyId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/systemAdmin/servicePolicies/${encodeURIComponent(props.policyId ?? "null")}`;
  export const random = (): ITodoAppServicePolicy =>
    typia.random<ITodoAppServicePolicy>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("policyId")(() => typia.assert(props.policyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a service policy (todo_app_service_policies) by id.
 *
 * This endpoint deletes a policy from the todo_app_service_policies table,
 * which stores “business policies governing application behavior, rate limits,
 * retention, and other constraints.” The table includes a deleted_at timestamp
 * indicating logical deletion capability. Implementers should mark the policy
 * as deleted by setting deleted_at and, if required by policy, also deactivate
 * it, ensuring it is excluded from normal reads. Permanent removal (hard
 * delete) should be considered only if explicitly required by governance
 * policy.
 *
 * Security and permissions: Restricted to systemAdmin. Administrators should
 * ensure no unintended exposure results from removing policies that are
 * currently referenced by todo_app_service_configurations or
 * todo_app_feature_flags. If a hard delete is ever used, be aware the
 * referencing relations are configured with onDelete: Cascade; a logical
 * deletion will not trigger cascades, so application logic must handle
 * visibility.
 *
 * Relationships and constraints: Policies can be linked from configurations and
 * feature flags. Deleting a policy should be blocked when doing so would
 * violate active operational constraints, or a safety check should warn/require
 * confirmation in provider logic.
 *
 * Error handling: Return not-found if the policy does not exist or is already
 * marked deleted under the service’s read policy. The operation returns no
 * content on success. Audit of administrative deletions is recommended via
 * internal logging systems.
 *
 * @param props.connection
 * @param props.policyId Target policy’s UUID (todo_app_service_policies.id)
 * @path /todoApp/systemAdmin/servicePolicies/:policyId
 * @accessor api.functional.todoApp.systemAdmin.servicePolicies.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target policy’s UUID (todo_app_service_policies.id) */
    policyId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoApp/systemAdmin/servicePolicies/:policyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/servicePolicies/${encodeURIComponent(props.policyId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("policyId")(() => typia.assert(props.policyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
