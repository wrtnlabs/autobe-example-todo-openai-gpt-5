import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAggregatedMetric } from "../../../../structures/ITodoAppAggregatedMetric";
import { IPageITodoAppAggregatedMetric } from "../../../../structures/IPageITodoAppAggregatedMetric";

/**
 * Search and paginate aggregated metrics (todo_app_aggregated_metrics).
 *
 * This operation returns a paginated list of historical aggregated metric
 * snapshots stored in the todo_app_aggregated_metrics table. As documented in
 * the Prisma schema, each row represents a metric value (value with unit) over
 * a defined time window (period_start to period_end) and includes a metric_key
 * and granularity (e.g., hour/day/week/month). Optional foreign keys
 * todo_app_user_id and todo_app_event_type_id allow scoping the snapshot to a
 * particular user or event type. This endpoint is intended for observability
 * and KPI dashboards and is strictly read-only.
 *
 * Access is restricted to authorized administrators because aggregated
 * performance and usage metrics can reveal sensitive operational patterns. The
 * endpoint does not expose private todo content; it only returns numeric values
 * and identifying references per the schema. Authorization is expressed at the
 * endpoint level via the systemAdmin role, with additional checks performed in
 * business logic as needed.
 *
 * The response includes pagination, and clients can filter by metric_key,
 * granularity, and time window using the request body
 * (ITodoAppAggregatedMetric.IRequest). Consumers can also filter by optional
 * dimensions (todo_app_user_id, todo_app_event_type_id). For efficient querying
 * and search, the model defines indexes on period_start/period_end, metric_key,
 * user/event dimensions, and trigram search on metric_key. Records where
 * deleted_at is set should be treated as archived and excluded by default.
 * Related tables include todo_app_event_types and todo_app_users, referenced by
 * optional foreign keys to provide dimensional context.
 *
 * This operation is typically used together with GET
 * /todoApp/systemAdmin/aggregatedMetrics/{aggregatedMetricId} for detail
 * retrieval. Clients should first narrow the list through this search endpoint
 * and then use the detail endpoint to fetch a specific snapshot by its
 * identifier.
 *
 * @param props.connection
 * @param props.body Search, filtering, and pagination parameters for aggregated
 *   metrics.
 * @path /todoApp/systemAdmin/aggregatedMetrics
 * @accessor api.functional.todoApp.systemAdmin.aggregatedMetrics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filtering, and pagination parameters for aggregated metrics. */
    body: ITodoAppAggregatedMetric.IRequest;
  };
  export type Body = ITodoAppAggregatedMetric.IRequest;
  export type Response = IPageITodoAppAggregatedMetric.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/aggregatedMetrics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/systemAdmin/aggregatedMetrics";
  export const random = (): IPageITodoAppAggregatedMetric.ISummary =>
    typia.random<IPageITodoAppAggregatedMetric.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a single aggregated metric (todo_app_aggregated_metrics) by
 * ID.
 *
 * This operation fetches a single record from todo_app_aggregated_metrics using
 * its primary key id (UUID). Each row represents an aggregated metric with
 * fields including metric_key, granularity, period_start, period_end, value,
 * unit, and optional dimensions todo_app_user_id and todo_app_event_type_id, as
 * described in the Prisma schema comments. The record also contains created_at
 * and updated_at timestamps for lineage and an optional deleted_at that
 * indicates archival.
 *
 * Security considerations: access is restricted to administrative users with
 * the systemAdmin role because operational metrics can reveal sensitive service
 * characteristics. The endpoint does not return private todo text or user
 * credentialsâ€”only the numeric metric snapshot and dimension identifiers. If
 * the requested id does not exist or corresponds to a record considered
 * archived (deleted_at not null), the implementation should return a not found
 * response as appropriate.
 *
 * Use this endpoint after discovering candidate records via PATCH
 * /todoApp/systemAdmin/aggregatedMetrics. It is optimized for detail inspection
 * of a single metric snapshot, helping administrators trace or validate KPI
 * computations at a precise time window.
 *
 * @param props.connection
 * @param props.aggregatedMetricId Identifier of the aggregated metric snapshot
 *   (UUID).
 * @path /todoApp/systemAdmin/aggregatedMetrics/:aggregatedMetricId
 * @accessor api.functional.todoApp.systemAdmin.aggregatedMetrics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the aggregated metric snapshot (UUID). */
    aggregatedMetricId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppAggregatedMetric;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/systemAdmin/aggregatedMetrics/:aggregatedMetricId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/aggregatedMetrics/${encodeURIComponent(props.aggregatedMetricId ?? "null")}`;
  export const random = (): ITodoAppAggregatedMetric =>
    typia.random<ITodoAppAggregatedMetric>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("aggregatedMetricId")(() =>
        typia.assert(props.aggregatedMetricId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
