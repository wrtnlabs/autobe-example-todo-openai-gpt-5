import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAdminAction } from "../../../../structures/ITodoAppAdminAction";
import { IPageITodoAppAdminAction } from "../../../../structures/IPageITodoAppAdminAction";

/**
 * Search and retrieve paginated administrative actions (todo_app_admin_actions)
 * for governance review.
 *
 * Retrieve a filtered and paginated collection of administrative action history
 * from the todo_app_admin_actions table. The Prisma schema describes this model
 * as “Historical records of privileged administrative operations performed by
 * system administrators. Captures who acted, optional target user, the
 * administrative action, stated reason, and operational notes. Does not store
 * private todo content. Supports governance reviews and incident response. Uses
 * restrictive/set-null deletes on FKs to preserve history.” Fields include
 * admin_user_id (administrator actor), target_user_id (optional), action
 * (administrative action key), reason and notes (human-readable context),
 * success (boolean outcome), idempotency_key (optional uniqueness guard), and
 * timestamps (created_at, updated_at).
 *
 * Security and permissions: Access to this endpoint is restricted to users with
 * the systemAdmin role. These records may reveal sensitive governance activity
 * and must not be exposed to regular members. Implementations should also apply
 * audit logging for viewing sensitive records when appropriate.
 *
 * Database relationships: Each record references the administrator actor via
 * todo_app_users (admin_user_id) and optionally a target user (target_user_id).
 * The list operation must never join or expose private Todo content; it focuses
 * solely on administrative actions metadata as defined in the schema comments.
 *
 * Validation and business logic: The request body supports filters such as
 * admin_user_id, target_user_id, action (exact or partial match), success,
 * creation time window (created_at from/to), and free-text search over
 * reason/notes consistent with GIN trigram indexes noted in the schema.
 * Pagination parameters include page, pageSize (1–100), and sort options by
 * created_at or action. The service should cap page sizes to the configured
 * maximum and apply default ordering by created_at descending if unspecified.
 *
 * Related operations: Use this PATCH /adminActions endpoint to find candidate
 * records; use GET /adminActions/{adminActionId} for detailed inspection of a
 * specific administrative action. Error handling should return clear messages
 * for invalid filters (e.g., malformed UUIDs, out-of-range page sizes) and must
 * not leak information about users outside authorized scope.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for
 *   administrative actions search.
 * @path /todoApp/systemAdmin/adminActions
 * @accessor api.functional.todoApp.systemAdmin.adminActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination parameters for administrative
     * actions search.
     */
    body: ITodoAppAdminAction.IRequest;
  };
  export type Body = ITodoAppAdminAction.IRequest;
  export type Response = IPageITodoAppAdminAction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/systemAdmin/adminActions";
  export const random = (): IPageITodoAppAdminAction.ISummary =>
    typia.random<IPageITodoAppAdminAction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of one administrative action (todo_app_admin_actions) by ID.
 *
 * This operation returns the detailed administrative action entry identified by
 * adminActionId from the todo_app_admin_actions table. Per the Prisma schema
 * description, this model stores privileged administrative operations with
 * references to the administrator actor (admin_user_id) and an optional target
 * user (target_user_id), the action key, human-readable reason and notes,
 * success boolean, optional idempotency_key, and creation/update timestamps.
 *
 * Security and permissions: Only systemAdmin users are authorized to access
 * this endpoint. The response must include only the fields defined by the model
 * and avoid revealing private Todo content. Access to identities referenced by
 * admin_user_id or target_user_id should respect account lifecycle policies.
 *
 * Entity relationships: The record links to todo_app_users for both the
 * administrator actor and (optionally) the target user. Implementations may
 * expand or reference related user display information via authorized joins,
 * but must ensure privacy rules are upheld as documented.
 *
 * Validation and errors: The adminActionId path parameter must be a valid UUID
 * corresponding to an existing record. If the record is not found or the caller
 * lacks permission, the service should return an appropriate
 * not-found/forbidden response without disclosing sensitive internal details.
 * This detail endpoint complements the list/search operation PATCH
 * /adminActions.
 *
 * @param props.connection
 * @param props.adminActionId Unique identifier of the administrative action to
 *   retrieve.
 * @path /todoApp/systemAdmin/adminActions/:adminActionId
 * @accessor api.functional.todoApp.systemAdmin.adminActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the administrative action to retrieve. */
    adminActionId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppAdminAction;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/systemAdmin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ITodoAppAdminAction =>
    typia.random<ITodoAppAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
