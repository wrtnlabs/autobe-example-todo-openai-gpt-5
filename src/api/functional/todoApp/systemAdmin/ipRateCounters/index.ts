import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppIpRateCounter } from "../../../../structures/ITodoAppIpRateCounter";
import { IPageITodoAppIpRateCounter } from "../../../../structures/IPageITodoAppIpRateCounter";

/**
 * Search IP rate counters (todo_app_ip_rate_counters) with pagination and
 * filters.
 *
 * Retrieve a filtered, paginated list of IP rate counter records from the
 * todo_app_ip_rate_counters table. The schema describes this table as
 * aggregating requests per IP for a given rate limit policy window. Core fields
 * include id (UUID), todo_app_rate_limit_id (FK to todo_app_rate_limits), ip
 * (string IP address), window_started_at, window_ends_at, count,
 * last_action_at, blocked_until, and system timestamps (created_at,
 * updated_at). The table is system-managed and is intended for abuse mitigation
 * and diagnostics where user identity may be absent or unreliable.
 *
 * Security and access: Because IP counters reveal operational telemetry and
 * potentially sensitive infrastructure insights, access should be restricted to
 * system administrators. End users do not manage these records. Providers
 * should by default exclude records flagged for archival via deleted_at, unless
 * explicitly operating in an audit context.
 *
 * Filtering, sorting, and pagination: The request body
 * (ITodoAppIpRateCounter.IRequest) can express filters such as policy
 * association (todo_app_rate_limit_id), partial/normalized IP matching, window
 * time range (window_started_at/window_ends_at), presence of a current block
 * (blocked_until > now), and count thresholds. Sorting may include most recent
 * last_action_at, descending count, or window boundaries. Pagination parameters
 * should include page number/size within business defaults (e.g., typical 1â€“100
 * per page), returning a paged response of summaries optimized for list
 * rendering.
 *
 * Error handling and related operations: If filters reference a nonexistent
 * policy, the result is simply an empty page. This list endpoint is commonly
 * used with the detail retrieval GET /ipRateCounters/{ipRateCounterId} to drill
 * into a specific record. As a read-only operation, it performs no side
 * effects.
 *
 * @param props.connection
 * @param props.body Search criteria, sorting, and pagination for IP rate
 *   counters.
 * @path /todoApp/systemAdmin/ipRateCounters
 * @accessor api.functional.todoApp.systemAdmin.ipRateCounters.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria, sorting, and pagination for IP rate counters. */
    body: ITodoAppIpRateCounter.IRequest;
  };
  export type Body = ITodoAppIpRateCounter.IRequest;
  export type Response = IPageITodoAppIpRateCounter.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/ipRateCounters",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoApp/systemAdmin/ipRateCounters";
  export const random = (): IPageITodoAppIpRateCounter.ISummary =>
    typia.random<IPageITodoAppIpRateCounter.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single IP rate counter (todo_app_ip_rate_counters) by ID.
 *
 * Fetch detailed information for one IP rate counter from
 * todo_app_ip_rate_counters. Per the schema, this table tracks counts per IP
 * for a configured rate limit policy and window, including fields: id (UUID),
 * todo_app_rate_limit_id (FK to todo_app_rate_limits), ip, window_started_at,
 * window_ends_at, count, last_action_at, blocked_until, and creation/update
 * timestamps. These records are updated by system processes that enforce rate
 * limits and are not user-editable.
 *
 * Security and authorization: The endpoint is intended for system
 * administrators to troubleshoot throttling, investigate abuse patterns, or
 * verify policy effectiveness. Access should be restricted accordingly.
 * Implementations typically exclude records with deleted_at set from normal
 * reads to avoid showing archived entries, unless an audit mode is explicitly
 * enabled.
 *
 * Validation and behavior: The provider should locate the counter by
 * ipRateCounterId. Common uses include checking whether blocked_until is set
 * (indicating an active throttle), reviewing counts within the current window
 * (window_started_at/window_ends_at), and correlating the policy via
 * todo_app_rate_limit_id. Nonexistent IDs should yield a not-found outcome. As
 * a read-only operation, no side effects occur.
 *
 * @param props.connection
 * @param props.ipRateCounterId Identifier of the IP rate counter to retrieve.
 * @path /todoApp/systemAdmin/ipRateCounters/:ipRateCounterId
 * @accessor api.functional.todoApp.systemAdmin.ipRateCounters.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the IP rate counter to retrieve. */
    ipRateCounterId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppIpRateCounter;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/systemAdmin/ipRateCounters/:ipRateCounterId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/ipRateCounters/${encodeURIComponent(props.ipRateCounterId ?? "null")}`;
  export const random = (): ITodoAppIpRateCounter =>
    typia.random<ITodoAppIpRateCounter>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ipRateCounterId")(() =>
        typia.assert(props.ipRateCounterId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
