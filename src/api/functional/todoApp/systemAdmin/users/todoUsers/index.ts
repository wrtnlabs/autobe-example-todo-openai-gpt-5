import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoUser } from "../../../../../structures/ITodoAppTodoUser";
import { IPageITodoAppTodoUser } from "../../../../../structures/IPageITodoAppTodoUser";

/**
 * Search and paginate todoUser role assignment history for a user
 * (todo_app_todousers).
 *
 * Retrieve a filtered, paginated list of role assignment history records for
 * the todoUser role for the specified user. According to the Prisma schema
 * comment for todo_app_todousers, this table stores multiple grant/revoke
 * events over time to preserve audit history, is not user-editable, and is
 * maintained by governance workflows. Each row contains id (UUID),
 * todo_app_user_id, granted_at, optional revoked_at when the assignment ended,
 * created_at, updated_at, and a logical deletion timestamp in deleted_at
 * intended for retention workflows.
 *
 * Security and permissions: Access to role assignment history is restricted to
 * administrative governance. Only system administrators should call this
 * endpoint. The provider must also enforce cross-user isolation by verifying
 * that the path parameter userId corresponds to the targeted account and that
 * the caller has the systemAdmin permission. Non-administrative users must not
 * be able to enumerate another user’s role history.
 *
 * Database relationships and behavior: Results are constrained to rows where
 * todo_app_user_id = {userId}. The design supports multiple historical rows;
 * queries typically order by granted_at (descending) to show most recent role
 * changes first. Filtering may include whether the assignment is currently
 * active (revoked_at is null), as well as granted_at and revoked_at date ranges
 * based on audit needs. Implementations commonly exclude logically removed rows
 * where deleted_at is set. The table is indexed on (todo_app_user_id,
 * granted_at) and (granted_at, created_at) to optimize these access patterns.
 *
 * Validation and business rules: This endpoint is read-only. It must not
 * attempt to create, update, or remove role assignments as these records are
 * system-managed audit history. The request body allows search and pagination
 * parameters (page, pageSize within a 1–100 range), sorting fields such as
 * granted_at or revoked_at, and filters for active-only or specific time
 * windows.
 *
 * Related operations and dependencies: Providers may first validate that the
 * parent user exists via a separate user retrieval operation before executing
 * the list. For detail retrieval of a single assignment, use GET
 * /users/{userId}/todoUsers/{todoUserId}. Error handling should return an
 * authorization error for callers lacking administrative privileges, and a
 * not-found or empty result when the parent user has no matching records.
 *
 * @param props.connection
 * @param props.userId Owner user’s ID whose todoUser role history is being
 *   listed.
 * @param props.body Search, filter, and pagination parameters for listing
 *   todoUser role assignments.
 * @path /todoApp/systemAdmin/users/:userId/todoUsers
 * @accessor api.functional.todoApp.systemAdmin.users.todoUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Owner user’s ID whose todoUser role history is being listed. */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination parameters for listing todoUser role
     * assignments.
     */
    body: ITodoAppTodoUser.IRequest;
  };
  export type Body = ITodoAppTodoUser.IRequest;
  export type Response = IPageITodoAppTodoUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/users/:userId/todoUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/systemAdmin/users/${encodeURIComponent(props.userId ?? "null")}/todoUsers`;
  export const random = (): IPageITodoAppTodoUser.ISummary =>
    typia.random<IPageITodoAppTodoUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get one todoUser role assignment record for a user (todo_app_todousers).
 *
 * This operation returns one historical role assignment entry from
 * todo_app_todousers for the specified user. The schema describes
 * todo_app_todousers as a role assignment history table supporting multiple
 * grant/revoke cycles for auditability, with fields including id (UUID),
 * todo_app_user_id (FK to todo_app_users.id), granted_at, optional revoked_at,
 * created_at, updated_at, and a logical deletion timestamp deleted_at used for
 * retention workflows.
 *
 * Security considerations: Only system administrators may access detailed role
 * assignment history. The provider must check that the caller has
 * administrative permissions and that the requested record belongs to the user
 * identified by {userId}. If the record’s todo_app_user_id does not match the
 * path, return not-found without revealing cross-user details.
 *
 * Entity relationship: The record links to todo_app_users via todo_app_user_id.
 * It is read-only and not user-editable, consistent with the schema comment
 * that governance workflows manage these assignments. Implementations typically
 * exclude logically removed rows where deleted_at is set.
 *
 * Error handling: Return authorization errors for insufficient permissions,
 * not-found when the record does not exist or is not associated with the
 * specified user, and input validation errors for malformed UUIDs. For listing
 * and searching multiple entries instead, use PATCH /users/{userId}/todoUsers.
 *
 * @param props.connection
 * @param props.userId Owner user’s ID whose todoUser assignment record is
 *   queried.
 * @param props.todoUserId Identifier of the todoUser role assignment record.
 * @path /todoApp/systemAdmin/users/:userId/todoUsers/:todoUserId
 * @accessor api.functional.todoApp.systemAdmin.users.todoUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Owner user’s ID whose todoUser assignment record is queried. */
    userId: string & tags.Format<"uuid">;

    /** Identifier of the todoUser role assignment record. */
    todoUserId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoAppTodoUser;

  export const METADATA = {
    method: "GET",
    path: "/todoApp/systemAdmin/users/:userId/todoUsers/:todoUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoApp/systemAdmin/users/${encodeURIComponent(props.userId ?? "null")}/todoUsers/${encodeURIComponent(props.todoUserId ?? "null")}`;
  export const random = (): ITodoAppTodoUser =>
    typia.random<ITodoAppTodoUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("todoUserId")(() => typia.assert(props.todoUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
