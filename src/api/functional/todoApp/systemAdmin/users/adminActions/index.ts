import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAdminAction } from "../../../../../structures/ITodoAppAdminAction";
import { IPageITodoAppAdminAction } from "../../../../../structures/IPageITodoAppAdminAction";

/**
 * Search administrative actions (todo_app_admin_actions) affecting a specific
 * user (admin-only).
 *
 * List administrative action records scoped to the user identified by {userId}
 * from the Prisma table todo_app_admin_actions. The schema describes each
 * record with admin_user_id (administrator actor), optional target_user_id (the
 * affected user), action key, reason and notes, success flag, optional
 * idempotency_key, and timestamps. This endpoint enables governance reviews to
 * understand what administrative operations have been performed that involve
 * the specified user as a target.
 *
 * Given the sensitivity, access is restricted to systemAdmin. The endpoint
 * supports pagination, filtering (e.g., by action, success, time ranges via
 * created_at), text search across reason/notes (as indexed by trigrams), and
 * sorting (commonly by created_at descending). Private Todo text is not stored
 * in this table and therefore not exposed by this API.
 *
 * Relationally, records reference todo_app_users both for the admin actor and
 * the optional target user. Validation includes verifying the path userId as a
 * valid UUID and enforcing pagination/sorting constraints. This operation
 * complements the audit logs endpoint and KPI/metrics endpoints, providing a
 * complete administrative audit surface for the user.
 *
 * @param props.connection
 * @param props.userId Target user's UUID used to scope administrative actions
 *   where the user is affected.
 * @param props.body Search, filter (e.g., action, success, date range), sort,
 *   and pagination parameters for admin actions.
 * @path /todoApp/systemAdmin/users/:userId/adminActions
 * @accessor api.functional.todoApp.systemAdmin.users.adminActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Target user's UUID used to scope administrative actions where the
     * user is affected.
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filter (e.g., action, success, date range), sort, and
     * pagination parameters for admin actions.
     */
    body: ITodoAppAdminAction.IRequest;
  };
  export type Body = ITodoAppAdminAction.IRequest;
  export type Response = IPageITodoAppAdminAction;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/users/:userId/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/systemAdmin/users/${encodeURIComponent(props.userId ?? "null")}/adminActions`;
  export const random = (): IPageITodoAppAdminAction =>
    typia.random<IPageITodoAppAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
