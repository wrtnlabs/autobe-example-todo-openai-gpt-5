import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppAuditLog } from "../../../../../structures/ITodoAppAuditLog";
import { IPageITodoAppAuditLog } from "../../../../../structures/IPageITodoAppAuditLog";

/**
 * Search audit logs (todo_app_audit_logs) for a specific user by path userId
 * (admin-only).
 *
 * Retrieve audit trail entries related to the user identified by {userId} from
 * the Prisma table todo_app_audit_logs. As documented in the schema, each audit
 * record includes actor_user_id (required), optional target_user_id, a business
 * action key (action), optional resource_type/resource_id, success flag, and
 * client context (ip, user_agent) along with created_at. The endpoint should
 * filter audit records where the specified user is the actor and/or the target,
 * depending on the administrative query intent.
 *
 * Security considerations are paramount: audit logs are sensitive and primarily
 * for governance. In alignment with the requirements, access is restricted to
 * systemAdmin and should not expose private Todo content. The endpoint supports
 * pagination, search over action/resource fields, time-range filtering (e.g.,
 * by created_at), success-state filtering, and sorting (commonly by created_at
 * descending).
 *
 * From a relational perspective, the records reference todo_app_users for actor
 * and target and may relate logically to other entities via
 * resource_type/resource_id without directly embedding their content.
 * Validation rules include enforcing a valid UUID for the path userId and
 * ensuring pagination limits remain within administrative policy. This endpoint
 * pairs with other administrative audit views and complements KPI/metrics
 * endpoints for a holistic operational picture.
 *
 * @param props.connection
 * @param props.userId Target user's UUID to scope audit log retrieval (actor
 *   and/or target).
 * @param props.body Search, filter (e.g., date range, action, success), sort,
 *   and pagination parameters for audit logs.
 * @path /todoApp/systemAdmin/users/:userId/auditLogs
 * @accessor api.functional.todoApp.systemAdmin.users.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Target user's UUID to scope audit log retrieval (actor and/or
     * target).
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filter (e.g., date range, action, success), sort, and
     * pagination parameters for audit logs.
     */
    body: ITodoAppAuditLog.IRequest;
  };
  export type Body = ITodoAppAuditLog.IRequest;
  export type Response = IPageITodoAppAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/todoApp/systemAdmin/users/:userId/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoApp/systemAdmin/users/${encodeURIComponent(props.userId ?? "null")}/auditLogs`;
  export const random = (): IPageITodoAppAuditLog =>
    typia.random<IPageITodoAppAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
