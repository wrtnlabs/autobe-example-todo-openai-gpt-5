import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoUserEmailVerification } from "../../../../../structures/ITodoAppTodoUserEmailVerification";
import { ITodoAppEmailVerification } from "../../../../../structures/ITodoAppEmailVerification";

/**
 * Verify email using todo_app_email_verifications and update todo_app_users
 * verification fields.
 *
 * Purpose and functionality: Confirms email ownership by validating a token
 * stored as todo_app_email_verifications.token_hash with expiry enforced by
 * expires_at. On success, updates the user’s todo_app_users.email_verified to
 * true and stamps verified_at. This supports policies that require verification
 * prior to login.
 *
 * Implementation details: Looks up the record by the provided token (mapped to
 * token_hash), ensures not expired (expires_at) and not already consumed
 * (consumed_at null), then sets consumed_at and optionally consumed_by_ip.
 * Updates the linked user’s lifecycle, potentially transitioning
 * todo_app_users.status from a pending state to an active state as allowed by
 * governance.
 *
 * Role-specific integration: Applies to the todoUser pathway. No role guard is
 * required for token consumption; identity is proven by the verification token
 * itself.
 *
 * Security considerations: The raw token should not be stored; only token_hash
 * is persisted. Multiple failed attempts may be reflected by failure_count in
 * todo_app_email_verifications. The endpoint should avoid leaking whether a
 * given email exists beyond token possession.
 *
 * Related operations: Registration issues or schedules a verification entry in
 * todo_app_email_verifications. Login may enforce that
 * todo_app_users.email_verified is true depending on policy.
 *
 * @param props.connection
 * @param props.body Verification payload carrying the email verification token.
 * @path /auth/todoUser/email/verify
 * @accessor api.functional.auth.todoUser.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification payload carrying the email verification token. */
    body: ITodoAppTodoUserEmailVerification.IConsume;
  };
  export type Body = ITodoAppTodoUserEmailVerification.IConsume;
  export type Response = ITodoAppEmailVerification;

  export const METADATA = {
    method: "POST",
    path: "/auth/todoUser/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoUser/email/verify";
  export const random = (): ITodoAppEmailVerification =>
    typia.random<ITodoAppEmailVerification>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
