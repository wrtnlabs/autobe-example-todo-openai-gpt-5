import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSession } from "../../../../../structures/ITodoAppSession";

/**
 * Revoke other sessions for the authenticated todoUser by updating
 * todo_app_sessions and related refresh tokens.
 *
 * Purpose and functionality: Security operation for a todoUser to end active
 * sessions on other devices/browsers. Iterates through todo_app_sessions for
 * the user, excluding the current session, and sets revoked_at with a
 * consistent revoked_reason (e.g., "user_revoke_others"). Inserts one
 * todo_app_session_revocations record per revoked session.
 *
 * Implementation details: For each affected session, also mark related
 * todo_app_refresh_tokens as revoked_at with an appropriate revoked_reason. The
 * endpoint returns success after best-effort revocation.
 *
 * Role-specific integration: Requires an authenticated todoUser; applies only
 * to their own sessions.
 *
 * Security considerations: Ensure the current session remains valid unless
 * policy dictates otherwise. Avoid disclosing details of other sessions to the
 * caller beyond acknowledgment of revocation.
 *
 * Related operations: Pair with change password for comprehensive account
 * security, and with logout for ending the current device session.
 *
 * @param props.connection
 * @param props.body Optional payload to filter which sessions to revoke; when
 *   empty, revokes all others.
 * @path /auth/todoUser/sessions/revokeOthers
 * @accessor api.functional.auth.todoUser.sessions.revokeOthers.revokeOtherSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeOtherSessions(
  connection: IConnection,
  props: revokeOtherSessions.Props,
): Promise<void> {
  return true === connection.simulate
    ? revokeOtherSessions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeOtherSessions.METADATA,
          path: revokeOtherSessions.path(),
          status: null,
        },
        props.body,
      );
}
export namespace revokeOtherSessions {
  export type Props = {
    /**
     * Optional payload to filter which sessions to revoke; when empty,
     * revokes all others.
     */
    body: ITodoAppSession.IRevokeOthers;
  };
  export type Body = ITodoAppSession.IRevokeOthers;

  export const METADATA = {
    method: "POST",
    path: "/auth/todoUser/sessions/revokeOthers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoUser/sessions/revokeOthers";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: revokeOtherSessions.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeOtherSessions.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
