import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoUserPassword } from "../../../../../structures/ITodoAppTodoUserPassword";
import { ITodoAppPasswordChange } from "../../../../../structures/ITodoAppPasswordChange";

/**
 * Change password for authenticated todoUser by updating
 * todo_app_users.password_hash and revoking other sessions.
 *
 * Purpose and functionality: Authenticated password change for a todoUser.
 * Verifies the provided current credential against todo_app_users.password_hash
 * before updating to a new hash. Updates todo_app_users.updated_at as
 * appropriate.
 *
 * Implementation details: On success, creates revocations for other sessions in
 * todo_app_sessions (setting revoked_at/revoked_reason and adding a single
 * todo_app_session_revocations row per session as per unique constraint) and
 * revokes outstanding todo_app_refresh_tokens by setting revoked_at. The
 * current session may remain or also be rotated depending on policy.
 *
 * Role-specific integration: Requires an authenticated todoUser; access is
 * controlled through the role guard, not public token possession.
 *
 * Security considerations: Enforce strong password policy before updating the
 * hash. Avoid disclosing whether the current password matched beyond a generic
 * failure response. Consider appending an audit record in todo_app_audit_logs
 * with action="change_password".
 *
 * Related operations: Users may use logout or revoke other sessions endpoints
 * to proactively manage sessions; login and refresh continue to operate
 * normally with the new credential.
 *
 * @param props.connection
 * @param props.body Change password payload including current and new password.
 * @path /auth/todoUser/password/change
 * @accessor api.functional.auth.todoUser.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Change password payload including current and new password. */
    body: ITodoAppTodoUserPassword.IChange;
  };
  export type Body = ITodoAppTodoUserPassword.IChange;
  export type Response = ITodoAppPasswordChange;

  export const METADATA = {
    method: "PUT",
    path: "/auth/todoUser/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoUser/password/change";
  export const random = (): ITodoAppPasswordChange =>
    typia.random<ITodoAppPasswordChange>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
