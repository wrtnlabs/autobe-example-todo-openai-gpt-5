import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoUserPasswordReset } from "../../../../../../structures/ITodoAppTodoUserPasswordReset";
import { ITodoAppPasswordReset } from "../../../../../../structures/ITodoAppPasswordReset";

/**
 * Confirm password reset using todo_app_password_resets; update
 * todo_app_users.password_hash and revoke sessions.
 *
 * Purpose and functionality: Confirms a password reset using the one-time token
 * stored in todo_app_password_resets. Validates expiry (expires_at) and ensures
 * the token has not been used (consumed_at is null). On success, updates the
 * associated userâ€™s todo_app_users.password_hash with a new hash and stamps
 * consumed_at.
 *
 * Implementation details: For security, any active todo_app_sessions for the
 * user should be revoked (setting revoked_at and optionally inserting a
 * todo_app_session_revocations row) and all relevant todo_app_refresh_tokens
 * should be marked revoked_at with revoked_reason reflecting the reset. This
 * forces re-authentication using the new credential.
 *
 * Role-specific integration: This is a public endpoint; identity is proven by
 * possession of a valid reset token.
 *
 * Security considerations: Do not disclose whether the email exists; operate
 * solely based on the token. Ensure strong password policy validation before
 * updating todo_app_users.password_hash.
 *
 * Related operations: After completion, the user may proceed to login. Failed
 * or expired tokens should lead to a new request via the reset request
 * endpoint.
 *
 * @param props.connection
 * @param props.body Reset confirmation payload carrying token and new password.
 * @path /auth/todoUser/password/reset/confirm
 * @accessor api.functional.auth.todoUser.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Reset confirmation payload carrying token and new password. */
    body: ITodoAppTodoUserPasswordReset.IConfirm;
  };
  export type Body = ITodoAppTodoUserPasswordReset.IConfirm;
  export type Response = ITodoAppPasswordReset.ICompleted;

  export const METADATA = {
    method: "POST",
    path: "/auth/todoUser/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoUser/password/reset/confirm";
  export const random = (): ITodoAppPasswordReset.ICompleted =>
    typia.random<ITodoAppPasswordReset.ICompleted>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
