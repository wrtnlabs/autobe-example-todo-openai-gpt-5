import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppTodoUserPasswordReset } from "../../../../../../structures/ITodoAppTodoUserPasswordReset";
import { ITodoAppPasswordReset } from "../../../../../../structures/ITodoAppPasswordReset";

/**
 * Request password reset by inserting into todo_app_password_resets with
 * privacy-preserving behavior.
 *
 * Purpose and functionality: Starts the password reset process without
 * revealing account existence. Inserts a row into todo_app_password_resets with
 * email, requested_at, expires_at, and token_hash (token is not stored in
 * plaintext). If the email maps to an account, todo_app_user_id is populated;
 * otherwise it remains null, preserving privacy.
 *
 * Implementation details: Generates a secure token, stores token_hash and
 * expiry in todo_app_password_resets, and may capture requested_by_ip. No
 * immediate change is made to todo_app_users; completion occurs via the confirm
 * endpoint.
 *
 * Role-specific integration: Publicly accessible to guest or signed-out
 * members; not guarded by role.
 *
 * Security considerations: The response should be an acknowledgment without
 * indicating whether email exists. Rate limiting can be supported using
 * todo_app_ip_rate_counters or todo_app_user_rate_counters as policy dictates.
 *
 * Related operations: The confirm endpoint consumes the token and updates the
 * userâ€™s todo_app_users.password_hash. Login attempts may subsequently succeed
 * using the new credential.
 *
 * @param props.connection
 * @param props.body Password reset request payload carrying the email address.
 * @path /auth/todoUser/password/reset/request
 * @accessor api.functional.auth.todoUser.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request payload carrying the email address. */
    body: ITodoAppTodoUserPasswordReset.IRequest;
  };
  export type Body = ITodoAppTodoUserPasswordReset.IRequest;
  export type Response = ITodoAppPasswordReset.IRequested;

  export const METADATA = {
    method: "POST",
    path: "/auth/todoUser/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/todoUser/password/reset/request";
  export const random = (): ITodoAppPasswordReset.IRequested =>
    typia.random<ITodoAppPasswordReset.IRequested>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
