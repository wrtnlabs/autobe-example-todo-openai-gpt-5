import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppPasswordReset } from "../../../../../../structures/ITodoAppPasswordReset";

/**
 * Create a todo_app_password_resets record to begin reset without revealing
 * account existence.
 *
 * This operation creates a password reset request represented by
 * todo_app_password_resets. The record stores the provided email, a generated
 * token_hash (derived from an opaque token that is never persisted in
 * plaintext), requested_at for audit trail, expires_at to bound validity, and
 * optional context such as requested_by_ip. When the email maps to an existing
 * account, todo_app_user_id may be set per schema; otherwise it remains null
 * for privacy.
 *
 * No authentication is required for this initiation, and the endpoint must not
 * reveal whether a user account exists for the submitted email, consistent with
 * the privacy-preserving intent of the schema. Subsequent verification steps
 * will use the stored token_hash and expiry constraints. The operation does not
 * modify todo_app_users; it only records a reset intent and triggers delivery
 * of instructions out-of-band.
 *
 * Security considerations include enforcing reasonable rate limits at the
 * business layer and ensuring the token values are generated with sufficient
 * entropy and stored only as token_hash. The endpoint records only metadata
 * specified by the schema and avoids sensitive content in status messages.
 *
 * This request should be followed by the password reset confirmation endpoint
 * that consumes the token and updates the credential on todo_app_users. It can
 * be used regardless of whether the account is currently a guestVisitor or
 * another role, as it targets the email address and not a session.
 *
 * Errors are limited to input validation and process acceptance; responses
 * should be uniform to avoid disclosing account existence, aligning to the
 * fields and purpose of todo_app_password_resets.
 *
 * @param props.connection
 * @param props.body Password reset initiation payload (email and optional
 *   client metadata).
 * @path /auth/guestVisitor/password/reset/request
 * @accessor api.functional.auth.guestVisitor.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /**
     * Password reset initiation payload (email and optional client
     * metadata).
     */
    body: ITodoAppPasswordReset.IRequest;
  };
  export type Body = ITodoAppPasswordReset.IRequest;
  export type Response = ITodoAppPasswordReset.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/guestVisitor/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guestVisitor/password/reset/request";
  export const random = (): ITodoAppPasswordReset.ISummary =>
    typia.random<ITodoAppPasswordReset.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
