import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppPasswordReset } from "../../../../../../structures/ITodoAppPasswordReset";

/**
 * Consume todo_app_password_resets and apply new todo_app_users.password_hash.
 *
 * This operation completes the password reset workflow by validating a reset
 * token against todo_app_password_resets (matching token_hash, within
 * expires_at) and marking it consumed via consumed_at. Upon successful
 * validation, the user's credential is updated by setting a new password_hash
 * on todo_app_users and updating updated_at. Implementations may also update
 * last_login_at if automatic sign-in is performed, but this is policy-dependent
 * and not required by the schema.
 *
 * The operation is unauthenticated and must avoid leaking information about
 * whether a token corresponds to a specific account beyond the success/failure
 * of the reset itself. The schema provides email and optional todo_app_user_id
 * to associate the request, but messages remain privacy-preserving.
 *
 * Security constraints include enforcing token single-use semantics via
 * consumed_at, honoring expires_at, and ensuring that only password_hash is
 * persisted (no plaintext). If the process also establishes a session,
 * todo_app_sessions may be inserted with issued_at, expires_at, ip, and
 * user_agent; otherwise, the user will authenticate later using standard
 * flows.
 *
 * This endpoint follows the reset initiation operation and is related to
 * verification and refresh operations for subsequent sign-in continuity. Errors
 * include invalid or expired tokens and input validation for the new
 * credential.
 *
 * On success, the response returns a summary reflecting completion details
 * without exposing raw tokens or secrets, aligning to fields available in
 * todo_app_password_resets and the updated todo_app_users record.
 *
 * @param props.connection
 * @param props.body Password reset confirmation payload (token and new
 *   credential).
 * @path /auth/guestVisitor/password/reset/confirm
 * @accessor api.functional.auth.guestVisitor.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Password reset confirmation payload (token and new credential). */
    body: ITodoAppPasswordReset.IConfirm;
  };
  export type Body = ITodoAppPasswordReset.IConfirm;
  export type Response = ITodoAppPasswordReset.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/guestVisitor/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guestVisitor/password/reset/confirm";
  export const random = (): ITodoAppPasswordReset.ISummary =>
    typia.random<ITodoAppPasswordReset.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
