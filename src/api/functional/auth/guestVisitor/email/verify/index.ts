import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppEmailVerification } from "../../../../../structures/ITodoAppEmailVerification";
export * as resend from "./resend/index";

/**
 * Consume todo_app_email_verifications to set todo_app_users.email_verified and
 * verified_at.
 *
 * This operation validates a verification token stored in
 * todo_app_email_verifications by matching token_hash within its expires_at
 * window and marking consumption using consumed_at while optionally increasing
 * failure_count for invalid attempts. When valid, the subject user’s
 * todo_app_users record is updated to set email_verified to true and
 * verified_at to the current time. If the flow is part of an email change,
 * target_email can guide which address is being confirmed per schema.
 *
 * No authentication is required, and the endpoint must avoid revealing whether
 * a given token corresponds to an existing account except through success or
 * failure of the verification. The process updates only the specific fields
 * defined in the schema and does not expose the raw token at any point.
 *
 * Security considerations include honoring the expiry semantics, ensuring
 * idempotent handling for already consumed tokens via consumed_at, and
 * maintaining minimal, consistent error messages. The operation may emit
 * business events externally using the available context such as ip and
 * user_agent if captured.
 *
 * This endpoint is commonly preceded by the guest join operation (when
 * target_email is provided) or a change‑email request. It complements the
 * resend operation which creates a fresh entry in todo_app_email_verifications
 * and re-triggers delivery.
 *
 * Errors include invalid or expired tokens and policy gating when the account
 * status does not allow verification at this time.
 *
 * @param props.connection
 * @param props.body Email verification confirmation payload (token).
 * @path /auth/guestVisitor/email/verify
 * @accessor api.functional.auth.guestVisitor.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification confirmation payload (token). */
    body: ITodoAppEmailVerification.IConfirm;
  };
  export type Body = ITodoAppEmailVerification.IConfirm;
  export type Response = ITodoAppEmailVerification.ISummary;

  export const METADATA = {
    method: "POST",
    path: "/auth/guestVisitor/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guestVisitor/email/verify";
  export const random = (): ITodoAppEmailVerification.ISummary =>
    typia.random<ITodoAppEmailVerification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
