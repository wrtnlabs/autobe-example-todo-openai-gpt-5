import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminPasswordResetRequest } from "../../../../../../structures/ITodoAppSystemAdminPasswordResetRequest";
import { ITodoAppSystemAdminPasswordResetRequestResult } from "../../../../../../structures/ITodoAppSystemAdminPasswordResetRequestResult";

/**
 * Record password reset request for admin in todo_app_password_resets.
 *
 * This endpoint accepts an email and creates a password reset request in
 * todo_app_password_resets. The schema supports privacy-preserving flows by
 * allowing todo_app_user_id to be null; therefore, responses should not
 * disclose whether the email maps to an existing account.
 *
 * A reset token row is created with token_hash, requested_at, expires_at, and
 * optional requested_by_ip for auditability. No changes are made to
 * todo_app_users at this stage. The endpoint does not access private todo
 * content.
 *
 * This operation pairs with the reset confirmation endpoint that will validate
 * the token and update the userâ€™s password_hash. It is also related to login
 * and account status controls in the todo_app_users table.
 *
 * Errors include excessive requests that may be mitigated through rate limiting
 * (e.g., via todo_app_rate_limits-related counters) and invalid email formats
 * per business validation.
 *
 * All behavior aligns with schema fields; no plaintext tokens or passwords are
 * stored in database records.
 *
 * @param props.connection
 * @param props.body Password reset request payload for an admin (email only).
 * @path /auth/systemAdmin/password/reset/request
 * @accessor api.functional.auth.systemAdmin.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request payload for an admin (email only). */
    body: ITodoAppSystemAdminPasswordResetRequest.ICreate;
  };
  export type Body = ITodoAppSystemAdminPasswordResetRequest.ICreate;
  export type Response = ITodoAppSystemAdminPasswordResetRequestResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/password/reset/request";
  export const random = (): ITodoAppSystemAdminPasswordResetRequestResult =>
    typia.random<ITodoAppSystemAdminPasswordResetRequestResult>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
