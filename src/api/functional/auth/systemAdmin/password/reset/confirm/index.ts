import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminPasswordResetConfirm } from "../../../../../../structures/ITodoAppSystemAdminPasswordResetConfirm";
import { ITodoAppSystemAdminPasswordResetConfirmResult } from "../../../../../../structures/ITodoAppSystemAdminPasswordResetConfirmResult";

/**
 * Confirm password reset using todo_app_password_resets and update
 * todo_app_users.password_hash.
 *
 * This endpoint validates a reset token tracked in todo_app_password_resets
 * using token_hash and expiry constraints (expires_at). On success, the userâ€™s
 * todo_app_users.password_hash is updated, and the reset token record is marked
 * used by setting consumed_at. It does not expose whether the email belonged to
 * an account during the request phase.
 *
 * Following a password change, existing refresh/session artifacts can be
 * invalidated by revoking sessions in todo_app_sessions and their chains in
 * todo_app_refresh_tokens according to policy. The application may also record
 * a revocation event in todo_app_session_revocations for auditability.
 *
 * This operation is closely related to login (which should now require the new
 * password) and to session revocation routines. It does not interact with
 * private todo entities.
 *
 * Errors include expired or already-consumed tokens, or policy violations for
 * new password strength. All activities should be recorded as business/audit
 * events as appropriate but are driven by the fields detailed in the schema.
 *
 * The implementation must avoid storing plaintext passwords, strictly updating
 * password_hash in todo_app_users.
 *
 * @param props.connection
 * @param props.body Password reset confirmation payload with token and new
 *   password.
 * @path /auth/systemAdmin/password/reset/confirm
 * @accessor api.functional.auth.systemAdmin.password.reset.confirm.confirmPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function confirmPasswordReset(
  connection: IConnection,
  props: confirmPasswordReset.Props,
): Promise<confirmPasswordReset.Response> {
  return true === connection.simulate
    ? confirmPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...confirmPasswordReset.METADATA,
          path: confirmPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace confirmPasswordReset {
  export type Props = {
    /** Password reset confirmation payload with token and new password. */
    body: ITodoAppSystemAdminPasswordResetConfirm.ICreate;
  };
  export type Body = ITodoAppSystemAdminPasswordResetConfirm.ICreate;
  export type Response = ITodoAppSystemAdminPasswordResetConfirmResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/password/reset/confirm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/password/reset/confirm";
  export const random = (): ITodoAppSystemAdminPasswordResetConfirmResult =>
    typia.random<ITodoAppSystemAdminPasswordResetConfirmResult>();
  export const simulate = (
    connection: IConnection,
    props: confirmPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: confirmPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
