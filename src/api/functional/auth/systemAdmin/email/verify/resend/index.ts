import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminEmailVerificationResend } from "../../../../../../structures/ITodoAppSystemAdminEmailVerificationResend";
import { ITodoAppSystemAdminEmailVerificationResendResult } from "../../../../../../structures/ITodoAppSystemAdminEmailVerificationResendResult";

/**
 * Resend admin verification email using todo_app_email_verifications.
 *
 * This endpoint initiates an email verification resend by inserting a new row
 * into todo_app_email_verifications for the target user, setting token_hash,
 * target_email, sent_at, and expires_at based on policy. It does not alter
 * existing todo_app_users fields besides potentially leaving status as-is.
 *
 * Resend is typically allowed before email_verified becomes true in
 * todo_app_users. The system ensures previous tokens can remain tracked while a
 * new token is issued, preserving history and rate-limiting risk.
 *
 * This endpoint is public from an authentication standpoint but should enforce
 * controls like rate limits (potentially via todo_app_rate_limits and counters)
 * to prevent abuse.
 *
 * It is closely related to join and verify email, forming a complete
 * verification workflow. The endpoint does not access private todo content.
 *
 * Errors include attempts to resend for accounts that are already verified or
 * lack of a corresponding account, which should be handled in a
 * privacy-preserving manner.
 *
 * @param props.connection
 * @param props.body Resend verification request payload.
 * @path /auth/systemAdmin/email/verify/resend
 * @accessor api.functional.auth.systemAdmin.email.verify.resend.resendVerificationEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resendVerificationEmail(
  connection: IConnection,
  props: resendVerificationEmail.Props,
): Promise<resendVerificationEmail.Response> {
  return true === connection.simulate
    ? resendVerificationEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resendVerificationEmail.METADATA,
          path: resendVerificationEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resendVerificationEmail {
  export type Props = {
    /** Resend verification request payload. */
    body: ITodoAppSystemAdminEmailVerificationResend.ICreate;
  };
  export type Body = ITodoAppSystemAdminEmailVerificationResend.ICreate;
  export type Response = ITodoAppSystemAdminEmailVerificationResendResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/email/verify/resend",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/email/verify/resend";
  export const random = (): ITodoAppSystemAdminEmailVerificationResendResult =>
    typia.random<ITodoAppSystemAdminEmailVerificationResendResult>();
  export const simulate = (
    connection: IConnection,
    props: resendVerificationEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resendVerificationEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
