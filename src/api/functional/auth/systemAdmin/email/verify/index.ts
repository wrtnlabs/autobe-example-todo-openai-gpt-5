import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoAppSystemAdminEmailVerification } from "../../../../../structures/ITodoAppSystemAdminEmailVerification";
import { ITodoAppSystemAdminEmailVerificationResult } from "../../../../../structures/ITodoAppSystemAdminEmailVerificationResult";
export * as resend from "./resend/index";

/**
 * Verify admin email via todo_app_email_verifications and update
 * todo_app_users.
 *
 * This endpoint consumes a verification token tracked in
 * todo_app_email_verifications, which includes token_hash, target_email,
 * expires_at, and consumed_at. Upon successful verification within expiry, the
 * service updates the user’s todo_app_users row by setting email_verified to
 * true and verified_at to the verification time.
 *
 * Because verification is a pre-auth step for many flows, this endpoint is
 * public and does not require an authenticated session. It strictly operates on
 * email verification artifacts, not on private todo content.
 *
 * The token record in todo_app_email_verifications is marked consumed by
 * setting consumed_at, and may also be correlated with client context like
 * consumed_by_ip for auditability per the schema.
 *
 * This operation is related to registration (join) and login. If an account’s
 * status or email verification is required by policy before login is allowed,
 * this endpoint completes that prerequisite.
 *
 * Errors include invalid or expired tokens (validated using expires_at),
 * already consumed tokens (consumed_at), or mismatched target_email. No changes
 * are made to unrelated entities.
 *
 * @param props.connection
 * @param props.body Email verification token consumption payload.
 * @path /auth/systemAdmin/email/verify
 * @accessor api.functional.auth.systemAdmin.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Email verification token consumption payload. */
    body: ITodoAppSystemAdminEmailVerification.ICreate;
  };
  export type Body = ITodoAppSystemAdminEmailVerification.ICreate;
  export type Response = ITodoAppSystemAdminEmailVerificationResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/email/verify";
  export const random = (): ITodoAppSystemAdminEmailVerificationResult =>
    typia.random<ITodoAppSystemAdminEmailVerificationResult>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
