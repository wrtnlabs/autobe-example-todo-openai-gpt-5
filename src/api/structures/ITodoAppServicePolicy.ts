import { tags } from "typia";

/**
 * Service Policy entity reflecting Prisma model todo_app_service_policies.
 *
 * This object describes governance policies controlling application behavior,
 * rate limits, retention, and other constraints. It directly maps to the system
 * table with the same name and includes administrative metadata.
 *
 * All properties correspond to columns in the Prisma schema; nullable columns
 * are expressed via oneOf with null.
 *
 * Security note: Although this is an administrative entity, avoid exposing
 * secrets beyond what is modeled in this table. The value field is a raw string
 * and should be interpreted using value_type at runtime.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppServicePolicy = {
  /**
   * Primary key of the policy record.
   *
   * Prisma column: todo_app_service_policies.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Administrative owner/creator reference (optional).
   *
   * Prisma column: todo_app_service_policies.todo_app_user_id
   *
   * When present, it references todo_app_users.id; can be null for
   * system-owned entries.
   */
  todo_app_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Logical grouping for the policy (e.g., "auth", "security", "privacy").
   *
   * Prisma column: todo_app_service_policies.namespace
   */
  namespace: string;

  /**
   * Globally unique policy code used by services to look up the policy.
   *
   * Prisma column: todo_app_service_policies.code
   *
   * Uniqueness: @@unique([code])
   */
  code: string;

  /**
   * Human-readable name of the policy.
   *
   * Prisma column: todo_app_service_policies.name
   */
  name: string;

  /**
   * Detailed business description and operational guidance for this policy.
   *
   * Prisma column: todo_app_service_policies.description
   */
  description?: string | null | undefined;

  /**
   * Policy value stored as raw string; consumers interpret using value_type.
   *
   * Prisma column: todo_app_service_policies.value
   */
  value: string;

  /**
   * Type hint indicating how to interpret value (e.g., "string", "int",
   * "double", "boolean", "datetime", "uri").
   *
   * Prisma column: todo_app_service_policies.value_type
   */
  value_type: string;

  /**
   * Whether this policy is currently in effect.
   *
   * Prisma column: todo_app_service_policies.active
   */
  active: boolean;

  /**
   * Optional activation start time (inclusive) for the policy in business
   * terms.
   *
   * Prisma column: todo_app_service_policies.effective_from
   */
  effective_from?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Optional end time (exclusive) after which the policy is not in effect.
   *
   * Prisma column: todo_app_service_policies.effective_to
   */
  effective_to?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp for the policy record.
   *
   * Prisma column: todo_app_service_policies.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for the policy record.
   *
   * Prisma column: todo_app_service_policies.updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp used to logically archive the policy.
   *
   * Prisma column: todo_app_service_policies.deleted_at
   *
   * Records with non-null deleted_at are excluded from normal flows.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppServicePolicy {
  /**
   * Search and pagination request for Service Policies.
   *
   * This request type aggregates common administrative filters over the
   * todo_app_service_policies table along with standard pagination and
   * sorting controls.
   *
   * Security: Do not accept or infer actor/user identifiers from this
   * payload; administrative identity must come from the authenticated
   * context.
   */
  export type IRequest = {
    /**
     * Page number (1-based).
     *
     * See IPage.IRequest.page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Page size (1â€“100).
     *
     * See IPage.IRequest.limit.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Filter by policy namespace.
     *
     * Maps to todo_app_service_policies.namespace.
     */
    namespace?: string | null | undefined;

    /**
     * Filter by exact policy code.
     *
     * Maps to todo_app_service_policies.code (unique).
     */
    code?: string | null | undefined;

    /**
     * Case-insensitive substring match against name.
     *
     * Leverages trigram index on name when available.
     */
    name_contains?: string | null | undefined;

    /**
     * Case-insensitive substring match against description.
     *
     * Leverages trigram index on description when available.
     */
    description_contains?: string | null | undefined;

    /**
     * Filter by active flag.
     *
     * Maps to todo_app_service_policies.active.
     */
    active?: boolean | null | undefined;

    /**
     * Lower bound (inclusive) for effective_from.
     *
     * Maps to todo_app_service_policies.effective_from.
     */
    effective_from_from?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Upper bound (inclusive) for effective_from.
     *
     * Maps to todo_app_service_policies.effective_from.
     */
    effective_from_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Lower bound (inclusive) for effective_to.
     *
     * Maps to todo_app_service_policies.effective_to.
     */
    effective_to_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound (inclusive) for effective_to.
     *
     * Maps to todo_app_service_policies.effective_to.
     */
    effective_to_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Primary sort key for results.
     *
     * Defaults to created_at when omitted.
     */
    sort?:
      | "created_at"
      | "updated_at"
      | "code"
      | "name"
      | "effective_from"
      | null
      | undefined;

    /**
     * Sort direction for the chosen sort field.
     *
     * Defaults to desc when omitted.
     */
    direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Creation payload for Service Policy.
   *
   * Security: Does not accept actor IDs or system-managed fields
   * (id/created_at/updated_at/deleted_at).
   */
  export type ICreate = {
    /** Logical grouping (e.g., "auth", "privacy"). */
    namespace: string;

    /** Globally unique policy code. */
    code: string;

    /** Human-readable policy name. */
    name: string;

    /** Optional description and operational guidance. */
    description?: string | null | undefined;

    /** Raw policy value interpreted by value_type. */
    value: string;

    /**
     * Hint for interpreting value (e.g., string, int, double, boolean,
     * datetime, uri).
     */
    value_type: string;

    /** Whether the policy is enabled on creation. */
    active: boolean;

    /** Optional activation start timestamp (inclusive). */
    effective_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional deactivation timestamp (exclusive). */
    effective_to?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update payload for Service Policy. All fields optional (Partial
   * semantics).
   *
   * Security: Does not accept system-managed fields or actor IDs.
   */
  export type IUpdate = {
    /** Logical grouping. */
    namespace?: string | null | undefined;

    /** Globally unique policy code. */
    code?: string | null | undefined;

    /** Display name. */
    name?: string | null | undefined;

    /** Optional description and notes. */
    description?: string | null | undefined;

    /** Raw policy value. */
    value?: string | null | undefined;

    /** Type hint for interpreting value. */
    value_type?: string | null | undefined;

    /** Enable/disable policy. */
    active?: boolean | null | undefined;

    /** Activation start (inclusive). */
    effective_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Deactivation time (exclusive). */
    effective_to?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary projection of a Service Policy for administrative list views.
   *
   * Omits raw value to reduce list payload size while preserving key
   * governance fields.
   */
  export type ISummary = {
    /** Primary key of the policy. */
    id: string & tags.Format<"uuid">;

    /** Logical grouping for the policy. */
    namespace: string;

    /** Globally unique policy code. */
    code: string;

    /** Display name of the policy. */
    name: string;

    /** Whether this policy is in effect. */
    active: boolean;

    /** Activation start (inclusive). */
    effective_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Activation end (exclusive). */
    effective_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };
}
