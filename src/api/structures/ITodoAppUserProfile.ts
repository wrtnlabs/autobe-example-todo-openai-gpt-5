import { tags } from "typia";

/**
 * User Profile entity attached 1:1 to a todo_app_users account.
 *
 * Based on Prisma table Actors.todo_app_user_profiles: stores presentational
 * attributes (full_name, nickname, avatar_uri) and lifecycle timestamps.
 * Ownership is enforced via todo_app_user_id and must NEVER be provided by
 * clients — it is derived from authentication/path context.
 *
 * Use this type for response payloads. Sensitive credentials do not exist here;
 * system fields are marked readOnly.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppUserProfile = {
  /**
   * Primary key of the user profile (UUID).
   *
   * Prisma: todo_app_user_profiles.id — Primary Key.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner user's id linking to todo_app_users.id. Read-only in API; server
   * derives ownership from authenticated context or path.
   *
   * Prisma: todo_app_user_profiles.todo_app_user_id — FK to todo_app_users
   * enforcing 1:1.
   */
  todo_app_user_id: string & tags.Format<"uuid">;

  /**
   * User's full name for display. Optional and nullable. Trim in business
   * logic; avoid control characters.
   *
   * Prisma: todo_app_user_profiles.full_name — Optional text.
   */
  full_name?: string | null | undefined;

  /**
   * Optional nickname/handle for casual display. Nullable.
   *
   * Prisma: todo_app_user_profiles.nickname — Optional text.
   */
  nickname?: string | null | undefined;

  /**
   * Optional URI of the avatar image. If present, MUST be a valid URI string.
   * Max length 80,000 characters as per schema.
   *
   * Prisma: todo_app_user_profiles.avatar_uri — VarChar(80000), optional.
   */
  avatar_uri?:
    | (string & tags.MaxLength<80000> & tags.Format<"uri">)
    | null
    | undefined;

  /**
   * Creation timestamp of the profile (RFC 3339 date-time).
   *
   * Prisma: todo_app_user_profiles.created_at — timestamptz.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the profile (RFC 3339 date-time).
   *
   * Prisma: todo_app_user_profiles.updated_at — timestamptz.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. Null indicates active record. When set, record
   * is excluded from normal flows.
   *
   * Prisma: todo_app_user_profiles.deleted_at — timestamptz, optional.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppUserProfile {
  /**
   * Create payload for user profile.
   *
   * Security: Do NOT accept ownership identifiers (todo_app_user_id). Server
   * binds ownership from authenticated user or path. System fields (id,
   * created_at, updated_at, deleted_at) are server-managed and not accepted.
   *
   * Prisma reference: Actors.todo_app_user_profiles — only user-facing fields
   * are accepted here.
   */
  export type ICreate = {
    /**
     * Optional full name to display. Trimming and validation applied
     * server-side.
     */
    full_name?: string | null | undefined;

    /** Optional nickname/handle. */
    nickname?: string | null | undefined;

    /** Optional avatar image URI. If provided, must be a valid URI string. */
    avatar_uri?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;
  };

  /**
   * Update payload for user profile.
   *
   * Security: Does NOT accept ownership (todo_app_user_id) or system-managed
   * fields (id, created_at, updated_at, deleted_at). All fields are optional;
   * nullable columns allow explicit null to clear values.
   *
   * Prisma reference: Actors.todo_app_user_profiles (full_name, nickname,
   * avatar_uri).
   */
  export type IUpdate = {
    /** Optional full name to update. Provide null to clear. */
    full_name?: string | null | undefined;

    /** Optional nickname to update. Provide null to clear. */
    nickname?: string | null | undefined;

    /**
     * Optional avatar image URI to update. Must be a valid URI when
     * provided; null clears the value.
     */
    avatar_uri?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;
  };
}
