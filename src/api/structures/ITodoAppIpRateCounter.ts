import { tags } from "typia";

/**
 * IP rate counter (full entity).
 *
 * Represents per-IP counters for a configured rate limit policy over a fixed
 * window, as modeled by todo_app_ip_rate_counters. Includes usage counts and
 * optional throttle state (blocked_until). Intended for administrative
 * diagnostics; does not expose secrets or tokens.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppIpRateCounter = {
  /**
   * Unique identifier of the IP rate counter row.
   *
   * Prisma: todo_app_ip_rate_counters.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Associated rate limit policy identifier.
   *
   * Prisma: todo_app_ip_rate_counters.todo_app_rate_limit_id (FK to
   * todo_app_rate_limits.id).
   */
  todo_app_rate_limit_id: string & tags.Format<"uuid">;

  /**
   * Subject IP address (IPv4/IPv6 textual representation).
   *
   * Prisma: todo_app_ip_rate_counters.ip
   */
  ip: string;

  /**
   * Start of the counting window.
   *
   * Prisma: todo_app_ip_rate_counters.window_started_at
   */
  window_started_at: string & tags.Format<"date-time">;

  /**
   * End of the counting window.
   *
   * Prisma: todo_app_ip_rate_counters.window_ends_at
   */
  window_ends_at: string & tags.Format<"date-time">;

  /**
   * Number of actions recorded within the window under policy.
   *
   * Prisma: todo_app_ip_rate_counters.count
   */
  count: number & tags.Type<"int32">;

  /**
   * Timestamp of the most recent contributing action, if any.
   *
   * Prisma: todo_app_ip_rate_counters.last_action_at (nullable).
   */
  last_action_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * If set, requests from this IP are throttled until this time.
   *
   * Prisma: todo_app_ip_rate_counters.blocked_until (nullable).
   */
  blocked_until?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Record creation timestamp.
   *
   * Prisma: todo_app_ip_rate_counters.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Prisma: todo_app_ip_rate_counters.updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Logical deletion timestamp for archival/cleanup.
   *
   * Prisma: todo_app_ip_rate_counters.deleted_at (nullable).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppIpRateCounter {
  /**
   * Search and pagination parameters for listing IP rate counters from
   * todo_app_ip_rate_counters.
   *
   * Supports filtering by policy, IP, window bounds, and throttle state
   * without exposing sensitive fields or actor identifiers.
   */
  export type IRequest = {
    /** Page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Items per page (1â€“100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Filter by associated rate limit policy identifier. */
    todo_app_rate_limit_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by IP address (exact or substring per implementation). */
    ip?: string | null | undefined;

    /** Lower bound (inclusive) for window_started_at. */
    window_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for window_ends_at. */
    window_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** When true, include only counters with blocked_until in the future. */
    blocked_only?: boolean | null | undefined;

    /**
     * Sort expression, e.g., 'window_started_at desc', 'last_action_at
     * desc'.
     */
    sort?: string | null | undefined;
  };

  /**
   * Summary projection for listing IP rate counter windows.
   *
   * Includes identifiers, window bounds, usage count, and optional
   * activity/throttle timestamps suitable for administrative list views.
   */
  export type ISummary = {
    /**
     * Primary key of the IP rate counter record.
     *
     * Prisma: todo_app_ip_rate_counters.id
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the associated rate limit policy.
     *
     * Prisma: todo_app_ip_rate_counters.todo_app_rate_limit_id
     */
    todo_app_rate_limit_id: string & tags.Format<"uuid">;

    /**
     * Subject IP address (IPv4/IPv6, textual).
     *
     * Prisma: todo_app_ip_rate_counters.ip
     */
    ip: string;

    /**
     * Start timestamp of the counting window.
     *
     * Prisma: todo_app_ip_rate_counters.window_started_at
     */
    window_started_at: string & tags.Format<"date-time">;

    /**
     * End timestamp of the counting window.
     *
     * Prisma: todo_app_ip_rate_counters.window_ends_at
     */
    window_ends_at: string & tags.Format<"date-time">;

    /**
     * Total actions recorded within the window.
     *
     * Prisma: todo_app_ip_rate_counters.count
     */
    count: number & tags.Type<"int32">;

    /**
     * Most recent contributing action time, when available.
     *
     * Prisma: todo_app_ip_rate_counters.last_action_at
     */
    last_action_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * If present, indicates a current throttle until this time; null when
     * not blocked.
     *
     * Prisma: todo_app_ip_rate_counters.blocked_until
     */
    blocked_until?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
