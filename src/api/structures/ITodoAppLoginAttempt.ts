import { tags } from "typia";

import { ELoginAttemptSortBy } from "./ELoginAttemptSortBy";
import { ESortDirection } from "./ESortDirection";

/**
 * Authentication attempt record for security analytics and brute‑force
 * protection.
 *
 * This schema maps to Prisma table todo_app_login_attempts and captures
 * per‑attempt outcomes with actor linkage when available. Sensitive secrets are
 * never stored here; only metadata such as email used, success flag, IP, and
 * user agent are recorded.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppLoginAttempt = {
  /**
   * Primary key of the login attempt.
   *
   * References Prisma model todo_app_login_attempts.id. UUID string uniquely
   * identifying this authentication attempt record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Resolved user's identifier if the attempted email maps to an account.
   *
   * Prisma: todo_app_login_attempts.todo_app_user_id (nullable FK to
   * todo_app_users.id). Null when the email did not match a known account or
   * when privacy-preserving flows avoid linking.
   */
  todo_app_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Email address used for the login attempt as entered by the client.
   *
   * Prisma: todo_app_login_attempts.email. Used for audit and rate limiting;
   * does not imply the account exists.
   */
  email: string & tags.Format<"email">;

  /**
   * Outcome of the login attempt.
   *
   * Prisma: todo_app_login_attempts.success. true for successful
   * authentication; false for failures.
   */
  success: boolean;

  /**
   * Client IP address captured for the attempt (IPv4 or IPv6 in text form).
   *
   * Prisma: todo_app_login_attempts.ip. Used for security analytics and
   * brute-force protection.
   */
  ip: string;

  /**
   * Optional client user-agent string.
   *
   * Prisma: todo_app_login_attempts.user_agent (nullable).
   */
  user_agent?: string | null | undefined;

  /**
   * Optional reason for failure (e.g., "invalid_credentials", "suspended").
   *
   * Prisma: todo_app_login_attempts.failure_reason (nullable).
   */
  failure_reason?: string | null | undefined;

  /**
   * Timestamp when the attempt occurred (business event time).
   *
   * Prisma: todo_app_login_attempts.occurred_at (timestamptz).
   */
  occurred_at: string & tags.Format<"date-time">;

  /**
   * Record creation timestamp.
   *
   * Prisma: todo_app_login_attempts.created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for the attempt record.
   *
   * Prisma: todo_app_login_attempts.updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoAppLoginAttempt {
  /**
   * Search, filtering, and pagination parameters for listing authentication
   * attempts.
   *
   * Maps to Prisma model todo_app_login_attempts in schema-03-auth.prisma.
   * Supports filters on success state, textual attributes (email, ip,
   * user_agent, failure_reason), and occurred_at windows. Pagination and
   * sorting follow administrative and self-service security view patterns.
   *
   * SECURITY: The body does not accept user or actor identifiers; ownership
   * scoping is derived from path parameters or authenticated context.
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based). When null or omitted, service
     * default applies.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Items per page (1–100). When null or omitted, service default applies
     * (commonly 20).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /**
     * Filter by success state of the attempt. true = succeeded; false =
     * failed.
     */
    success?: boolean | null | undefined;

    /**
     * Substring filter applied to the failure_reason column (e.g.,
     * "invalid_credentials").
     */
    failure_reason?: string | null | undefined;

    /**
     * Substring filter applied to the email column (as entered during the
     * attempt).
     */
    email?: string | null | undefined;

    /** Substring filter applied to the ip column (client IP as text). */
    ip?: string | null | undefined;

    /** Substring filter applied to the user_agent column. */
    user_agent?: string | null | undefined;

    /** Filter: include attempts with occurred_at >= this timestamp. */
    occurred_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter: include attempts with occurred_at <= this timestamp. */
    occurred_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Sort key for results. Default: occurred_at. */
    sort_by?: ELoginAttemptSortBy | undefined;

    /** Sort direction for results. Default: desc. */
    sort_dir?: ESortDirection | undefined;
  };

  /**
   * Summary view of a login attempt suited for list pages.
   *
   * Includes only essential, non‑secret fields for display and sorting.
   * Backed by Prisma table todo_app_login_attempts.
   */
  export type ISummary = {
    /**
     * Primary key of the login attempt.
     *
     * Prisma: todo_app_login_attempts.id (UUID).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address used for the login attempt.
     *
     * Prisma: todo_app_login_attempts.email.
     */
    email: string & tags.Format<"email">;

    /**
     * Outcome of the login attempt.
     *
     * Prisma: todo_app_login_attempts.success.
     */
    success: boolean;

    /**
     * Client IP address (text form IPv4/IPv6) captured at attempt time.
     *
     * Prisma: todo_app_login_attempts.ip.
     */
    ip: string;

    /**
     * Optional client user agent string.
     *
     * Prisma: todo_app_login_attempts.user_agent (nullable).
     */
    user_agent?: string | null | undefined;

    /**
     * Timestamp when the attempt occurred.
     *
     * Prisma: todo_app_login_attempts.occurred_at (timestamptz).
     */
    occurred_at: string & tags.Format<"date-time">;
  };
}
