import { tags } from "typia";

import { EOrderByITodoAppKpiCounter } from "./EOrderByITodoAppKpiCounter";
import { EOrderDirection } from "./EOrderDirection";

/**
 * KPI window snapshot entity sourced from Prisma model
 * mv_todo_app_kpi_counters.
 *
 * This record aggregates per-window indicators including counts of
 * created/completed todos and active users, plus optional latency aggregates.
 * It is read-only and intended for administrative analytics as described by the
 * Prisma schema comments.
 *
 * Includes system timestamps (created_at, updated_at, refreshed_at) and a soft
 * deletion marker (deleted_at) used by governance flows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppKpiCounter = {
  /**
   * Primary key of mv_todo_app_kpi_counters (UUID).
   *
   * Referenced from Prisma model mv_todo_app_kpi_counters.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Inclusive start of the KPI window.
   *
   * Prisma column: window_start (timestamptz).
   */
  window_start: string & tags.Format<"date-time">;

  /**
   * Exclusive end of the KPI window.
   *
   * Prisma column: window_end (timestamptz).
   */
  window_end: string & tags.Format<"date-time">;

  /**
   * Total number of todos created within the KPI window.
   *
   * Prisma column: todos_created (integer).
   */
  todos_created: number & tags.Type<"int32">;

  /**
   * Total number of todos completed within the KPI window.
   *
   * Prisma column: todos_completed (integer).
   */
  todos_completed: number & tags.Type<"int32">;

  /**
   * Distinct count of active users within the KPI window.
   *
   * Prisma column: active_users (integer).
   */
  active_users: number & tags.Type<"int32">;

  /**
   * Average time to complete a todo in hours for the KPI window, if
   * available.
   *
   * Prisma column: avg_time_to_complete_hours (double precision, nullable).
   */
  avg_time_to_complete_hours?: number | null | undefined;

  /**
   * 95th percentile time to complete a todo in hours for the KPI window, if
   * available.
   *
   * Prisma column: p95_completion_time_hours (double precision, nullable).
   */
  p95_completion_time_hours?: number | null | undefined;

  /**
   * Timestamp when this KPI row was last refreshed from source data.
   *
   * Prisma column: refreshed_at (timestamptz).
   */
  refreshed_at: string & tags.Format<"date-time">;

  /**
   * Materialized view row creation timestamp in the cache.
   *
   * Prisma column: created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Materialized view row last refresh/update timestamp in the cache.
   *
   * Prisma column: updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for MV row if removed from active view logic.
   *
   * Prisma column: deleted_at (timestamptz, nullable).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppKpiCounter {
  /**
   * Search, filter, sort, and pagination request for KPI window snapshots
   * from mv_todo_app_kpi_counters.
   *
   * All properties are optional; when omitted, service defaults apply (e.g.,
   * order_by window_end, order_dir desc, default page and limit). Date-time
   * values must be RFC 3339 strings.
   */
  export type IRequest = {
    /** Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Page size (1â€“100). Default commonly 20. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Lower bound (inclusive) for window_start filter. */
    window_start_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for window_start filter. */
    window_start_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Lower bound (inclusive) for window_end filter. */
    window_end_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for window_end filter. */
    window_end_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Sort key for results. Defaults commonly to window_end. */
    order_by?: EOrderByITodoAppKpiCounter | null | undefined;

    /** Sort direction for results (asc|desc). Defaults commonly to desc. */
    order_dir?: EOrderDirection | null | undefined;
  };

  /**
   * Summary projection of a KPI window snapshot for list views.
   *
   * Based on mv_todo_app_kpi_counters; includes essential counters and
   * optional latency aggregates.
   */
  export type ISummary = {
    /**
     * Identifier of the KPI counter row.
     *
     * Prisma: mv_todo_app_kpi_counters.id
     */
    id: string & tags.Format<"uuid">;

    /**
     * Inclusive start of the KPI window.
     *
     * Prisma: mv_todo_app_kpi_counters.window_start
     */
    window_start: string & tags.Format<"date-time">;

    /**
     * Exclusive end of the KPI window.
     *
     * Prisma: mv_todo_app_kpi_counters.window_end
     */
    window_end: string & tags.Format<"date-time">;

    /**
     * Todos created within the window.
     *
     * Prisma: mv_todo_app_kpi_counters.todos_created
     */
    todos_created: number & tags.Type<"int32">;

    /**
     * Todos completed within the window.
     *
     * Prisma: mv_todo_app_kpi_counters.todos_completed
     */
    todos_completed: number & tags.Type<"int32">;

    /**
     * Distinct active users within the window.
     *
     * Prisma: mv_todo_app_kpi_counters.active_users
     */
    active_users: number & tags.Type<"int32">;

    /**
     * Average hours to complete a todo in the window (nullable).
     *
     * Prisma: mv_todo_app_kpi_counters.avg_time_to_complete_hours
     */
    avg_time_to_complete_hours?: number | null | undefined;

    /**
     * 95th percentile hours to complete a todo in the window (nullable).
     *
     * Prisma: mv_todo_app_kpi_counters.p95_completion_time_hours
     */
    p95_completion_time_hours?: number | null | undefined;
  };
}
