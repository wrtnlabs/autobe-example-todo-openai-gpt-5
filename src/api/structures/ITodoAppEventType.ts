import { tags } from "typia";

import { ESortOrder } from "./ESortOrder";

/**
 * Business event taxonomy entity mapped to Prisma model todo_app_event_types.
 *
 * Defines stable codes used by append-only event logs and analytics. The
 * response excludes any password or token secrets (not present on this model).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppEventType = {
  /**
   * Primary key of the event type.
   *
   * Prisma: todo_app_event_types.id (UUID).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Stable machine-readable identifier (e.g., "todo.created"). Must remain
   * stable for classification.
   *
   * Prisma: todo_app_event_types.code with @@unique([code]).
   */
  code: string;

  /**
   * Human-readable title of the event type for administration and reporting.
   *
   * Prisma: todo_app_event_types.name.
   */
  name: string;

  /**
   * Optional description explaining when and why this event type is emitted.
   *
   * Prisma: todo_app_event_types.description (nullable).
   */
  description?: string | null | undefined;

  /**
   * Whether this event type is currently enabled for emission in the system.
   *
   * Prisma: todo_app_event_types.active.
   */
  active: boolean;

  /**
   * Record creation timestamp.
   *
   * Prisma: todo_app_event_types.created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Prisma: todo_app_event_types.updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoAppEventType {
  /**
   * Allowed sort keys for ITodoAppEventType.IRequest list queries.
   *
   * Based on todo_app_event_types columns: created_at, updated_at, code,
   * name.
   */
  export type ESortKey = "created_at" | "updated_at" | "code" | "name";

  /**
   * List/search request body for event types (todo_app_event_types).
   *
   * Includes pagination, filters (active, code, name, search), optional
   * created_at window, and a structured sort clause. Pagination follows
   * business rules: page >= 1; limit 1–100. Uses explicit nulls to disable
   * filters where applicable.
   */
  export type IRequest = {
    /** Page number for pagination. Must be >= 1; null to let server default. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Page size (items per page). Allowed range 1–100; null to use server
     * default.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Filter by enablement state (true/false). Null to ignore filter. */
    active?: boolean | null | undefined;

    /** Filter by code (exact or substring per provider implementation). */
    code?: string | null | undefined;

    /** Filter by name (exact or substring per provider implementation). */
    name?: string | null | undefined;

    /**
     * Free-text search applied to code/name/description, leveraging trigram
     * indexes where available.
     */
    search?: string | null | undefined;

    /** Lower bound (inclusive) for created_at in ISO 8601 format. */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for created_at in ISO 8601 format. */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sorting configuration. Defaults may be applied server-side if
     * omitted.
     */
    sort?: ITodoAppEventType.IRequest.Sort | null | undefined;
  };
  export namespace IRequest {
    /**
     * Sort configuration for ITodoAppEventType.IRequest.
     *
     * Encapsulates the sort key and order to avoid inline object
     * definitions in request types.
     */
    export type Sort = {
      /** Primary field to order results by. */
      key: ITodoAppEventType.ESortKey;

      /** Sort direction. Defaults to "desc" if omitted by provider policy. */
      order?: ESortOrder | undefined;
    };
  }

  /**
   * Creation payload for event taxonomy (todo_app_event_types). Excludes
   * system-generated fields and never accepts IDs from client.
   */
  export type ICreate = {
    /**
     * Stable machine-readable identifier (e.g., "todo.created"). Must be
     * unique.
     *
     * Prisma: todo_app_event_types.code (unique).
     */
    code: string;

    /**
     * Human-readable title.
     *
     * Prisma: todo_app_event_types.name.
     */
    name: string;

    /**
     * Optional description for administrative use.
     *
     * Prisma: todo_app_event_types.description (nullable).
     */
    description?: string | null | undefined;

    /**
     * Whether this event type is enabled for emission.
     *
     * Prisma: todo_app_event_types.active.
     */
    active: boolean;
  };

  /**
   * Update payload for the Business Event Taxonomy entity
   * (todo_app_event_types).
   *
   * All properties are optional to support partial updates. System-managed
   * fields (id, created_at, updated_at) are not accepted here. Be mindful
   * that changing the code can impact downstream producers and consumers;
   * business policy should govern whether this is allowed.
   */
  export type IUpdate = {
    /**
     * New machine-readable code for the event type. Must remain globally
     * unique if changed.
     *
     * Maps to todo_app_event_types.code. Note: Many deployments keep this
     * immutable; if change is allowed, enforce uniqueness.
     */
    code?: string | undefined;

    /**
     * New human-readable name for the event type.
     *
     * Maps to todo_app_event_types.name.
     */
    name?: string | undefined;

    /**
     * Updated description; set to null to clear.
     *
     * Maps to todo_app_event_types.description.
     */
    description?: string | null | undefined;

    /**
     * Toggle for enabling/disabling the event type.
     *
     * Maps to todo_app_event_types.active.
     */
    active?: boolean | undefined;
  };

  /** Summary view of an event type for administrative listings. */
  export type ISummary = {
    /**
     * Primary key.
     *
     * Prisma: todo_app_event_types.id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Stable identifier.
     *
     * Prisma: todo_app_event_types.code.
     */
    code: string;

    /**
     * Human-readable title.
     *
     * Prisma: todo_app_event_types.name.
     */
    name: string;

    /**
     * Enablement state.
     *
     * Prisma: todo_app_event_types.active.
     */
    active: boolean;

    /**
     * Record creation timestamp.
     *
     * Prisma: todo_app_event_types.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
