import { tags } from "typia";

import { IEAuditEventType } from "./IEAuditEventType";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * Audit trail entity reflecting Prisma table Audits.todo_mvp_audit_events.
 *
 * Captures who acted (user/admin, nullable FKs), the target Todo (nullable FK),
 * the event type, and timestamps. No Todo content is stored, preserving privacy
 * in line with schema commentary.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoMvpAuditEvent = {
  /**
   * Primary key (todo_mvp_audit_events.id).
   *
   * Prisma: String @id @db.Uuid.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Acting user's identifier (todo_mvp_audit_events.todo_mvp_user_id).
   *
   * Nullable to preserve records after user deletion.
   */
  todo_mvp_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Acting admin's identifier (todo_mvp_audit_events.todo_mvp_admin_id).
   *
   * Nullable to preserve records after admin deletion.
   */
  todo_mvp_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Target Todo identifier (todo_mvp_audit_events.todo_mvp_todo_id).
   *
   * Nullable to preserve history after Todo deletion.
   */
  todo_mvp_todo_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Business event type (todo_mvp_audit_events.event_type).
   *
   * Enum constrained to safe, documented values for MVP.
   */
  event_type: IEAuditEventType;

  /**
   * Optional short operational description
   * (todo_mvp_audit_events.event_description).
   *
   * Must not include Todo content (title/notes).
   */
  event_description?: string | null | undefined;

  /**
   * Audit record creation time (todo_mvp_audit_events.created_at).
   *
   * Prisma: DateTime @db.Timestamptz.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last administrative correction timestamp
   * (todo_mvp_audit_events.updated_at).
   *
   * Prisma: DateTime @db.Timestamptz.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for retention control
   * (todo_mvp_audit_events.deleted_at).
   *
   * Prisma: DateTime? @db.Timestamptz.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoMvpAuditEvent {
  /**
   * Search, filter, and pagination parameters for listing audit events
   * (admin-only context).
   *
   * Ownership context is administrative; sensitive Todo content is never
   * present in the audit entity by design.
   */
  export type IRequest = {
    /**
     * Page number for paginated retrieval of audit events.
     *
     * This is an API-level control that does not map to a database column.
     * When null or omitted, provider defaults apply.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of audit event records to return per page.
     *
     * API-level control aligned with performance targets. Upper bound
     * protects responsiveness. When null or omitted, provider defaults
     * apply.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | null
      | undefined;

    /**
     * Optional filter by acting user id.
     *
     * References Audits.todo_mvp_audit_events.todo_mvp_user_id (UUID,
     * nullable).
     */
    actor_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by acting admin id.
     *
     * References Audits.todo_mvp_audit_events.todo_mvp_admin_id (UUID,
     * nullable).
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by target Todo id.
     *
     * References Audits.todo_mvp_audit_events.todo_mvp_todo_id (UUID,
     * nullable).
     */
    target_todo_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by one or more audit event types captured in
     * Audits.todo_mvp_audit_events.event_type.
     */
    event_types?:
      | (
          | "todo_created"
          | "todo_updated"
          | "todo_completed"
          | "todo_uncompleted"
          | "todo_deleted"
        )[]
      | null
      | undefined;

    /**
     * Lower bound (inclusive) for filtering by
     * Audits.todo_mvp_audit_events.created_at (Timestamptz).
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound (inclusive) for filtering by
     * Audits.todo_mvp_audit_events.created_at (Timestamptz).
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sortable columns for audit lists.
     *
     * Whitelisted to stable timestamp columns in
     * Audits.todo_mvp_audit_events.
     */
    sort_by?: "created_at" | "updated_at" | undefined;

    /**
     * Sort direction applied with sort_by (asc or desc).
     *
     * Constrained by IEOrderDirection to avoid unsafe arbitrary input.
     */
    order?: IEOrderDirection | undefined;
  };
}
