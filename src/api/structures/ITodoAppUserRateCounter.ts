import { tags } from "typia";

import { ESortTodoAppUserRateCounter } from "./ESortTodoAppUserRateCounter";
import { ESortDirection } from "./ESortDirection";

/**
 * User-scoped rate counter window from Prisma model
 * todo_app_user_rate_counters.
 *
 * Summarizes request counts for a particular user under a specific rate limit
 * policy over a fixed window with optional cooldown (blocked_until). Includes
 * system-managed timestamps and an archival marker (deleted_at) per schema
 * comments.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppUserRateCounter = {
  /** Primary key of todo_app_user_rate_counters (UUID). */
  id: string & tags.Format<"uuid">;

  /**
   * Associated rate limit policy ID.
   *
   * Prisma column: todo_app_rate_limit_id (FK to todo_app_rate_limits.id).
   */
  todo_app_rate_limit_id: string & tags.Format<"uuid">;

  /**
   * Subject user ID to whom this counter applies.
   *
   * Prisma column: todo_app_user_id (FK to todo_app_users.id).
   */
  todo_app_user_id: string & tags.Format<"uuid">;

  /**
   * Start timestamp of the counting window.
   *
   * Prisma column: window_started_at (timestamptz).
   */
  window_started_at: string & tags.Format<"date-time">;

  /**
   * End timestamp of the counting window.
   *
   * Prisma column: window_ends_at (timestamptz).
   */
  window_ends_at: string & tags.Format<"date-time">;

  /**
   * Number of actions recorded within the window for this user/policy.
   *
   * Prisma column: count (integer).
   */
  count: number & tags.Type<"int32">;

  /**
   * Timestamp of the most recent contributing action within the window, if
   * any.
   *
   * Prisma column: last_action_at (timestamptz, nullable).
   */
  last_action_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * If throttled, the time until which actions should be blocked. Null when
   * not blocked.
   *
   * Prisma column: blocked_until (timestamptz, nullable).
   */
  blocked_until?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Record creation timestamp.
   *
   * Prisma column: created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Prisma column: updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp used for archival/cleanup without hard delete.
   *
   * Prisma column: deleted_at (timestamptz, nullable).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppUserRateCounter {
  /**
   * Search, filter, sort, and pagination request for user rate counter
   * windows.
   *
   * Used by administrative list operations over todo_app_user_rate_counters.
   * All properties are optional; when omitted, service defaults apply.
   */
  export type IRequest = {
    /** Page number for pagination (uint32 semantics). */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum records per page (uint32 semantics). Typical defaults 20;
     * allowed 1â€“100 by policy.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by rate limit policy ID when querying across policies. */
    todo_app_rate_limit_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by subject user ID. */
    todo_app_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Lower bound filter for window_started_at (inclusive). */
    window_started_from?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /** Upper bound filter for window_started_at (inclusive). */
    window_started_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Lower bound filter for window_ends_at (inclusive). */
    window_ends_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound filter for window_ends_at (inclusive). */
    window_ends_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * When true, include only counters currently blocked (blocked_until is
     * in the future).
     */
    blocked_only?: boolean | null | undefined;

    /**
     * Sort key for results. Defaults commonly to window_started_at or
     * last_action_at.
     */
    order_by?: ESortTodoAppUserRateCounter | null | undefined;

    /** Sort direction (asc|desc). Defaults commonly to desc. */
    order_dir?: ESortDirection | null | undefined;
  };
}
