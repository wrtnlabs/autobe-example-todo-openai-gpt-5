import { tags } from "typia";

import { IETodoMvpTodoStatus } from "./IETodoMvpTodoStatus";
import { IETodoMvpTodoStatusFilter } from "./IETodoMvpTodoStatusFilter";
import { IETodoMvpTodoSortBy } from "./IETodoMvpTodoSortBy";
import { IESortOrder } from "./IESortOrder";

/**
 * Full Todo entity for single-item responses.
 *
 * This DTO reflects all public fields of Todos.todo_mvp_todos needed by
 * clients: identity, content, lifecycle state, optional dates, and timestamps.
 * Ownership (todo_mvp_user_id) is intentionally omitted in responses; it is
 * enforced server-side.
 *
 * Security: No passwords or tokens; no actor IDs in outputs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoMvpTodo = {
  /**
   * Todo identifier.
   *
   * Prisma reference: Todos.todo_mvp_todos.id (UUID primary key).
   * System-generated and immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Short human-readable label for the task.
   *
   * Prisma reference: Todos.todo_mvp_todos.title (required). Business rules
   * emphasize trimming and length 1–120 after trim.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<120>;

  /**
   * Optional free-form details.
   *
   * Prisma reference: Todos.todo_mvp_todos.notes (nullable). Up to ~1,000
   * characters by business guidance.
   */
  notes?: (string & tags.MaxLength<1000>) | null | undefined;

  /**
   * Lifecycle state of the task.
   *
   * Prisma reference: Todos.todo_mvp_todos.status. Allowed values: "open" or
   * "completed".
   */
  status: IETodoMvpTodoStatus;

  /**
   * Optional day-level due date in the user's local time context.
   *
   * Prisma reference: Todos.todo_mvp_todos.due_date (nullable timestamptz).
   */
  due_date?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp set only when status transitions to "completed"; cleared when
   * reverting to "open".
   *
   * Prisma reference: Todos.todo_mvp_todos.completed_at (nullable
   * timestamptz).
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp recorded when the Todo is created.
   *
   * Prisma reference: Todos.todo_mvp_todos.created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp recorded whenever the Todo is edited or its status
   * changes.
   *
   * Prisma reference: Todos.todo_mvp_todos.updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoMvpTodo {
  /**
   * Search, filter, sort, and pagination request for listing the
   * authenticated user's Todos.
   *
   * Security: Ownership is derived from the authenticated context; this DTO
   * never accepts todo_mvp_user_id or similar actor identifiers.
   *
   * Prisma reference: Operates on Todos.todo_mvp_todos via provider logic;
   * not persisted.
   */
  export type IRequest = {
    /**
     * Page number for paginated retrieval.
     *
     * Not a DB column; controls pagination window. Begin at 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of records per page.
     *
     * Business default is commonly 100 for MVP. Providers enforce maximum
     * to avoid excessive payloads.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | null
      | undefined;

    /**
     * Filter by Todo lifecycle state for list retrieval.
     *
     * Allowed values reflect simple two-state lifecycle. "all" returns
     * both; "open" or "completed" restrict to one.
     */
    status?: IETodoMvpTodoStatusFilter | null | undefined;

    /**
     * Sort key for ordering results.
     *
     * Defaults to created_at in most views; due_date and completed_at
     * supported for alternate views.
     */
    sort_by?: IETodoMvpTodoSortBy | null | undefined;

    /**
     * Sort direction associated with sort_by.
     *
     * Typical default is desc for timestamp-based sorts.
     */
    order?: IESortOrder | null | undefined;
  };

  /**
   * Create DTO for a Todo item owned by the authenticated user.
   *
   * Prisma mapping: Inserts into `Todos.todo_mvp_todos` with server-assigned
   * fields `id`, `todo_mvp_user_id`, `status` (defaults to `open`), and
   * timestamps (`created_at`, `updated_at`). `completed_at` remains null
   * until status transitions to `completed`.
   *
   * Security checklist:
   *
   * - Authentication fields (e.g., `todo_mvp_user_id`) are forbidden in client
   *   input and must be taken from the authenticated session.
   * - System-generated fields (`id`, `created_at`, `updated_at`,
   *   `completed_at`) are system-managed and not accepted here.
   * - Sensitive fields (passwords/tokens) are not part of this DTO.
   */
  export type ICreate = {
    /**
     * Short human-readable label for the task.
     *
     * Prisma reference: `Todos.todo_mvp_todos.title` (required). Business
     * rules specify trimming leading/trailing whitespace and a typical
     * length of 1–120 characters after trim. Duplicate titles are allowed
     * per user.
     *
     * Security note: No sensitive data stored here.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<120>;

    /**
     * Optional free-form details for the task.
     *
     * Prisma reference: `Todos.todo_mvp_todos.notes` (nullable). Business
     * guidance allows up to ~1,000 characters; whitespace-only may be
     * treated as empty.
     *
     * Security note: Should not include secrets.
     */
    notes?: (string & tags.MaxLength<1000>) | null | undefined;

    /**
     * Optional day-level target completion date interpreted in the user's
     * local time.
     *
     * Prisma reference: `Todos.todo_mvp_todos.due_date` (nullable
     * timestamptz). Although stored as a timestamp, business semantics are
     * day-level to avoid timezone ambiguity.
     *
     * Security note: No identity information here.
     */
    due_date?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update DTO for modifying a Todo's mutable fields.
   *
   * All properties are optional (Partial<T> pattern). Ownership is immutable
   * and not present. System-managed fields (id, todo_mvp_user_id, created_at,
   * updated_at, completed_at) are not client-writable; providers update
   * timestamps and completed_at based on valid state transitions.
   *
   * Security checklist:
   *
   * - Authentication fields: todo_mvp_user_id never accepted.
   * - Sensitive fields: none.
   * - System fields: managed server-side.
   */
  export type IUpdate = {
    /**
     * New title for the task. Must be trimmed and satisfy length 1–120
     * characters after trimming.
     *
     * Prisma reference: Todos.todo_mvp_todos.title (non-nullable String).
     * Title cannot be cleared to null; omit this property to leave
     * unchanged.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<120>) | undefined;

    /**
     * Updated notes. Provide null to clear notes.
     *
     * Prisma reference: Todos.todo_mvp_todos.notes (nullable String). Notes
     * preserve line breaks; limit ~1,000 characters by business rules.
     */
    notes?: (string & tags.MaxLength<1000>) | null | undefined;

    /**
     * Updated due date. Provide null to clear the date.
     *
     * Prisma reference: Todos.todo_mvp_todos.due_date (nullable
     * timestamptz). Business semantics treat this as a day-level date in
     * user’s local time.
     */
    due_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Updated lifecycle state. When set to "completed", providers set
     * completed_at; when set to "open", providers clear completed_at.
     *
     * Prisma reference: Todos.todo_mvp_todos.status (non-nullable String
     * with allowed values "open" or "completed").
     */
    status?: IETodoMvpTodoStatus | undefined;
  };

  /**
   * Summary DTO optimized for list views.
   *
   * Excludes potentially large text fields like notes to keep responses
   * light. Contains essential fields for rendering and sorting in list
   * pages.
   */
  export type ISummary = {
    /**
     * Todo identifier.
     *
     * Prisma reference: Todos.todo_mvp_todos.id (UUID primary key).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Short task label, suitable for list display.
     *
     * Prisma reference: Todos.todo_mvp_todos.title (required).
     */
    title: string & tags.MinLength<1> & tags.MaxLength<120>;

    /**
     * Lifecycle state for quick list rendering.
     *
     * Prisma reference: Todos.todo_mvp_todos.status ("open"|"completed").
     */
    status: IETodoMvpTodoStatus;

    /**
     * Optional day-level due date for list context.
     *
     * Prisma reference: Todos.todo_mvp_todos.due_date (nullable).
     */
    due_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Set only for completed items, useful for Completed views ordering.
     *
     * Prisma reference: Todos.todo_mvp_todos.completed_at (nullable).
     */
    completed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Creation time for predictable default sorting (newest first).
     *
     * Prisma reference: Todos.todo_mvp_todos.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
