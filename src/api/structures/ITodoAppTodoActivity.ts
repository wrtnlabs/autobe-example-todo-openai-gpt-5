import { tags } from "typia";

import { EActivityType } from "./EActivityType";

/**
 * Activity record for a Todo (todo_app_todo_activities).
 *
 * Append-only audit trail of Todo lifecycle events including optional details
 * and status transitions. Security: does not store private todo text beyond the
 * details field per policy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppTodoActivity = {
  /**
   * Primary key.
   *
   * Maps to todo_app_todo_activities.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Target todo id (nullable to preserve audit history).
   *
   * Maps to todo_app_todo_activities.todo_app_todo_id
   */
  todo_app_todo_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Actor user id (nullable to preserve history when user is purged).
   *
   * Maps to todo_app_todo_activities.todo_app_user_id
   */
  todo_app_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of activity: 'create', 'update', 'complete', 'reopen', 'delete'.
   *
   * Maps to todo_app_todo_activities.activity_type.
   */
  activity_type: string;

  /** Optional human-readable details (no secrets). */
  details?: string | null | undefined;

  /**
   * Optional list of changed field names (comma-separated or structured
   * text).
   */
  changed_fields?: string | null | undefined;

  /** Optional prior status value when applicable. */
  previous_status?: string | null | undefined;

  /** Optional next status value when applicable. */
  next_status?: string | null | undefined;

  /**
   * Business-event timestamp when activity occurred.
   *
   * Maps to todo_app_todo_activities.occurred_at.
   */
  occurred_at: string & tags.Format<"date-time">;

  /**
   * Record creation timestamp.
   *
   * Maps to todo_app_todo_activities.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record update timestamp.
   *
   * Maps to todo_app_todo_activities.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for exceptional redaction.
   *
   * Maps to todo_app_todo_activities.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoAppTodoActivity {
  /**
   * List/search request for Todo activities.
   *
   * Security: Does not accept actor IDs; ownership is enforced by controller
   * using authenticated context.
   */
  export type IRequest = {
    /** Page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Items per page (1â€“100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Filter by one or more activity types. */
    activity_types?: EActivityType[] | null | undefined;

    /** Inclusive lower bound for occurred_at. */
    occurred_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Inclusive upper bound for occurred_at. */
    occurred_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Case-insensitive substring filter over details/changed_fields
     * (provider dependent).
     */
    search?: string | null | undefined;

    /** Primary sort key (default occurred_at). */
    sort?: "occurred_at" | "created_at" | null | undefined;

    /** Sort direction (default desc). */
    direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Summary view of a Todo activity suitable for list rendering.
   *
   * Contains essential metadata without large or sensitive content.
   */
  export type ISummary = {
    /** Activity id (UUID). */
    id: string & tags.Format<"uuid">;

    /** Activity type for list views. */
    activity_type: string;

    /** When the activity occurred. */
    occurred_at: string & tags.Format<"date-time">;

    /** Optional brief details for display. */
    details?: string | null | undefined;
  };
}
