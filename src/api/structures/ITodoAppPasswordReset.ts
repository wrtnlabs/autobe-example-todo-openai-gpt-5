import { tags } from "typia";

import { ESortDirection } from "./ESortDirection";

/**
 * Password reset record metadata (response-safe).
 *
 * This schema maps to Prisma table todo_app_password_resets and intentionally
 * omits sensitive fields such as token/token_hash. It exposes only non-secret
 * metadata suitable for end-user display and administrative review within
 * privacy constraints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoAppPasswordReset = {
  /**
   * Primary key of the password reset request.
   *
   * Prisma: todo_app_password_resets.id (UUID).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Related user's identifier when resolvable; null for privacy-preserving
   * requests.
   *
   * Prisma: todo_app_password_resets.todo_app_user_id (nullable FK to
   * todo_app_users.id).
   */
  todo_app_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Email address provided for the reset request.
   *
   * Prisma: todo_app_password_resets.email. Note: Token secrets are never
   * exposed in responses.
   */
  email: string & tags.Format<"email">;

  /**
   * Timestamp when the reset was requested.
   *
   * Prisma: todo_app_password_resets.requested_at (timestamptz).
   */
  requested_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reset token expires.
   *
   * Prisma: todo_app_password_resets.expires_at (timestamptz).
   */
  expires_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the reset token was used, if applicable.
   *
   * Prisma: todo_app_password_resets.consumed_at (nullable timestamptz).
   */
  consumed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Client IP captured at request time (IPv4/IPv6 text).
   *
   * Prisma: todo_app_password_resets.requested_by_ip (nullable string).
   */
  requested_by_ip?: string | null | undefined;

  /**
   * Record creation timestamp.
   *
   * Prisma: todo_app_password_resets.created_at (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Prisma: todo_app_password_resets.updated_at (timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoAppPasswordReset {
  /**
   * Search, filter, sort, and paginate password reset records.
   *
   * Maps to Prisma table todo_app_password_resets. SECURITY: This request
   * type does not accept actor identifiers; ownership is derived from path
   * context or authentication, consistent with business rules.
   */
  export type IRequest = {
    /** Page number (1-based). Null for service default. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Items per page (1–100). Null for service default. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null
      | undefined;

    /** Lower bound (inclusive) for requested_at. */
    requested_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for requested_at. */
    requested_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Lower bound (inclusive) for expires_at. */
    expires_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Upper bound (inclusive) for expires_at. */
    expires_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Consumption state filter derived from consumed_at.
     *
     * True ⇒ consumed_at IS NOT NULL; false ⇒ consumed_at IS NULL; null ⇒
     * no filter.
     */
    consumed?: boolean | null | undefined;

    /** Optional filter on email address for the reset request. */
    email?: (string & tags.Format<"email">) | null | undefined;

    /** Sort key for results. */
    order_by?: "requested_at" | "expires_at" | "created_at" | null | undefined;

    /** Sort direction for ordered results. */
    order_dir?: ESortDirection | undefined;
  };

  /**
   * Request payload to confirm a password reset.
   *
   * This DTO corresponds to the final step of the reset workflow driven by
   * Prisma model `todo_app_password_resets`. It accepts the opaque `token`
   * and the new credential. It never accepts or exposes sensitive system
   * fields like `token_hash`, and it must not accept actor IDs such as
   * `todo_app_user_id`.
   */
  export type IConfirm = {
    /**
     * Opaque reset token provided to the user via out-of-band channel.
     *
     * Server hashes this value and compares it to
     * `todo_app_password_resets.token_hash` to validate. The plaintext
     * token itself is never persisted in the database.
     */
    token: string;

    /**
     * New credential to be applied to the account.
     *
     * Security notice: the server stores only a secure password hash in
     * `todo_app_users.password_hash` (never plaintext). Client requests
     * must not include any actor/user identifiers; ownership is resolved
     * from the reset token context.
     */
    new_password: string;
  };

  /**
   * Summary of a password reset request suitable for list pages.
   *
   * Excludes all token/token_hash secrets by design and includes only
   * response‑safe metadata.
   */
  export type ISummary = {
    /** Primary key of the password reset request. */
    id: string & tags.Format<"uuid">;

    /** Email address provided for the request. */
    email: string & tags.Format<"email">;

    /** When the reset was requested. */
    requested_at: string & tags.Format<"date-time">;

    /** When the reset token expires. */
    expires_at: string & tags.Format<"date-time">;

    /** When the token was consumed, if applicable. */
    consumed_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Acknowledgment response after accepting a password reset request. This
   * response intentionally avoids exposing secret token values. Fields
   * reflect workflow timestamps and echo the submitted email while preserving
   * privacy (does not confirm account existence).
   *
   * Related storage: todo_app_password_resets (requested_at, expires_at);
   * tokens are stored only as secure hashes and never returned.
   */
  export type IRequested = {
    /**
     * Timestamp when the reset request was accepted (maps to
     * todo_app_password_resets.requested_at).
     */
    requested_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the reset request expires (maps to
     * todo_app_password_resets.expires_at).
     */
    expires_at: string & tags.Format<"date-time">;

    /**
     * Echo of the submitted email. This value does not confirm whether an
     * account exists (privacy-preserving).
     */
    email: string & tags.Format<"email">;

    /**
     * Optional human-readable message providing next-step guidance or
     * throttling information.
     */
    note?: string | undefined;
  };

  /**
   * Completion result for a password reset operation.
   *
   * This DTO discloses only safe metadata derived from the Prisma model
   * todo_app_password_resets. It never exposes security-sensitive fields such
   * as token or token_hash and contains no passwords. It is returned only for
   * successfully completed resets.
   */
  export type ICompleted = {
    /**
     * Password reset record identifier.
     *
     * References Prisma table todo_app_password_resets.id. This is the
     * authoritative identifier for the reset request and its lifecycle.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address associated with the reset request.
     *
     * References Prisma column todo_app_password_resets.email. This value
     * is safe to expose and helps the caller confirm the subject of the
     * completed reset.
     */
    email: string & tags.Format<"email">;

    /**
     * Timestamp when the reset was requested.
     *
     * Maps to todo_app_password_resets.requested_at (timestamptz). Use ISO
     * 8601 format with timezone.
     */
    requestedAt: string & tags.Format<"date-time">;

    /**
     * Timestamp when the reset token was scheduled to expire.
     *
     * Maps to todo_app_password_resets.expires_at (timestamptz). Provided
     * for audit and UX messaging.
     */
    expiresAt: string & tags.Format<"date-time">;

    /**
     * Timestamp when the reset token was consumed to apply the new
     * credential.
     *
     * Maps to todo_app_password_resets.consumed_at (timestamptz). Presence
     * here confirms completion.
     */
    consumedAt: string & tags.Format<"date-time">;
  };
}
