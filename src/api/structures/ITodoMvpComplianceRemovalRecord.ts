import { tags } from "typia";

import { IEComplianceReasonCode } from "./IEComplianceReasonCode";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * Compliance removal record entity mirroring Prisma table
 * Audits.todo_mvp_compliance_removal_records.
 *
 * These records document policy- or legal-driven removals in a
 * privacy-preserving manner: they do not store Todo content but do capture who
 * acted (admin), what was removed (Todo reference, nullable), why
 * (reason_code), and when (action_effective_at).
 *
 * Foreign keys are nullable to preserve oversight records even after related
 * entities are deleted. Notes must avoid including user Todo content per schema
 * comments.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoMvpComplianceRemovalRecord = {
  /**
   * Primary key of the compliance removal record
   * (todo_mvp_compliance_removal_records.id).
   *
   * Prisma: String @id @db.Uuid.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Acting administrator's identifier
   * (todo_mvp_compliance_removal_records.todo_mvp_admin_id).
   *
   * Prisma: String? @db.Uuid. Nullable to preserve integrity if the admin
   * account is later deleted.
   */
  todo_mvp_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Removed Todo's identifier
   * (todo_mvp_compliance_removal_records.todo_mvp_todo_id).
   *
   * Prisma: String? @db.Uuid. Nullable to preserve the record after the Todo
   * is deleted.
   */
  todo_mvp_todo_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * High-level reason code for compliance removal
   * (todo_mvp_compliance_removal_records.reason_code).
   *
   * Schema comments provide examples; this enum standardizes the allowed set
   * for MVP.
   */
  reason_code: IEComplianceReasonCode;

  /**
   * Optional administrative notes that must not include user Todo content
   * (todo_mvp_compliance_removal_records.notes).
   *
   * Prisma: String?. Content policies apply.
   */
  notes?: string | null | undefined;

  /**
   * Timestamp when the removal took effect from the user's perspective
   * (todo_mvp_compliance_removal_records.action_effective_at).
   *
   * Prisma: DateTime @db.Timestamptz.
   */
  action_effective_at: string & tags.Format<"date-time">;

  /**
   * Record creation time (todo_mvp_compliance_removal_records.created_at).
   *
   * Prisma: DateTime @db.Timestamptz.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last administrative correction to this record, if any
   * (todo_mvp_compliance_removal_records.updated_at).
   *
   * Prisma: DateTime @db.Timestamptz.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for retention/lifecycle control
   * (todo_mvp_compliance_removal_records.deleted_at).
   *
   * Prisma: DateTime? @db.Timestamptz.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoMvpComplianceRemovalRecord {
  /**
   * Search and pagination parameters for compliance removal records
   * (admin-only).
   *
   * Filters align with Audits.todo_mvp_compliance_removal_records while
   * preserving privacy (no Todo content).
   */
  export type IRequest = {
    /**
     * Page number for paginated retrieval of compliance removal records.
     *
     * API-level control; does not map to a database column.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of records returned per page for compliance removal
     * records.
     *
     * Upper bound helps meet responsiveness targets; when null or omitted,
     * provider defaults apply.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | null
      | undefined;

    /**
     * Optional filter by the acting administratorâ€™s id.
     *
     * References
     * Audits.todo_mvp_compliance_removal_records.todo_mvp_admin_id (UUID,
     * nullable).
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by the removed Todo id.
     *
     * References
     * Audits.todo_mvp_compliance_removal_records.todo_mvp_todo_id (UUID,
     * nullable).
     */
    removed_todo_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional filter by high-level reason codes such as
     * "policy_violation", "legal_request", or "user_request_via_admin".
     *
     * Maps to Audits.todo_mvp_compliance_removal_records.reason_code.
     */
    reason_codes?: string[] | null | undefined;

    /**
     * Lower bound (inclusive) for filtering by
     * Audits.todo_mvp_compliance_removal_records.action_effective_at
     * (Timestamptz).
     */
    effective_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound (inclusive) for filtering by
     * Audits.todo_mvp_compliance_removal_records.action_effective_at
     * (Timestamptz).
     */
    effective_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sortable columns for compliance removal records.
     *
     * Whitelisted to columns indexed or commonly used for operational
     * ordering.
     */
    sort_by?:
      | "action_effective_at"
      | "created_at"
      | "updated_at"
      | "reason_code"
      | undefined;

    /**
     * Sort direction applied with sort_by (asc or desc).
     *
     * Constrained by IEOrderDirection.
     */
    order?: IEOrderDirection | undefined;
  };
}
